/*eslint eqeqeq: ["error", "smart"]*/
/*!
* Data Aquarium Framework - Touch UI
* Copyright 2008-2017 Code On Time LLC; Licensed MIT; http://codeontime.com/license
*/
(function () {
    var transitionClasses = 'app-transition',//'app-transition app-animation-spin ui-icon-refresh',
        itemSelectedClasses = 'app-checked',
        userAgent = navigator.userAgent,
        platform = navigator.platform,
        iOS = /iPhone|iPad|iPod/.test(platform) && userAgent.indexOf("AppleWebKit") > -1,
        iOSMajorVersion = iOS ? parseInt(navigator.userAgent.match(/\(i.*;.*CPU.*OS (\d+)_\d+/)[1]) : null,
        android = /Android/i.test(userAgent),
        chrome = /chrom(e|ium)/i.test(userAgent),
        ie = (!!userAgent.match(/Trident\/7\./)),
        safari = /safari/i.test(userAgent),
        isTouchPointer,
        screenDPI = 96,
        autoCompleteRowCount = 100,
        isMac = platform.match(/Mac/i) != null,
        isWin = platform.match(/Win/i) != null,
        currentCulture = Sys.CultureInfo.CurrentCulture,
        dateTimeFormat = currentCulture.dateTimeFormat,
        activatorRegex = /^s*(\w+)\s*\|s*(.+?)\s*(\|\s*(.+)\s*)?$/,
        filterDetailsRegex = /(<(\/*(a|span).*?>)|(&nbsp;)|onclick=\".+?\")/g,
        filterDetailsRegex2 = /(<(\/*(b).*?>))/g,
        filterDetailsRegex3 = /\" ([\.;])/g,
        materialIconRegex = /\b(((material\-icon|glyphicons|glyphicon|fa|ion)\-([\w\-]+?)))(\s|$|,)/,
        phoneFieldRegex = /phone/i,
        emailFieldRegex = /email/i,
        urlFieldRegex = /\burl/i,
        mapFieldRegex = /phone/i,
        sortByRegex = /^\s*(\w+)(\s+(\w+)\s*)?$/,
        filterWithoutInputRegex = /\$(true|false|in|notin|tomorrow|today|yesterday|next|this|last|year|past|future|quarter|month|isempty|isnotempty)/,
        sortExpressionRegex = /\s*(\w+)(\s+(asc|ascending|desc|descending))?\s*(,|$)/gi,
        noPromoRegex = /(delete|clear|trash|remove|undo|erase)/,
        numericTypeRegex = /^(Byte|Currency|Decimal|Double|Int16|Int22|Int64|Single|SByte|UInt16|UInt32|UInt64)$/,
        menuItemUrlRegex = /^(_\w+):(.+)$/,
        membership,
        userScope = '',
        anonymousScope = '',
        menu,
        formTextInputs = {},
        resources = Web.DataViewResources,
        resourcesViews = resources.Views,
        resourcesMenu = resources.Menu,
        resourcesData = resources.Data,
        resourcesDataFilters = resourcesData.Filters,
        resourcesDataFiltersLabels = resourcesDataFilters.Labels,
        labelAnd = resourcesDataFiltersLabels.And,
        labelClear = resourcesDataFiltersLabels.Clear,
        resourcesPager = resources.Pager,
        resourcesModalPopup = resources.ModalPopup,
        resourcesHeaderFilter = resources.HeaderFilter,
        loadingStatusText = resourcesHeaderFilter.Loading,
        resourcesMobile = resources.Mobile,
        resourcesDevice = resources.Device,
        labelMore = resourcesMobile.More,
        resourcesGrid = resources.Grid,
        labelSearch = resourcesGrid.PerformAdvancedSearch,
        resourcesForm = resources.Form,
        resourcesActions = resources.Actions,
        resourcesValidator = resources.Validator,
        resourcesLookup = resources.Lookup,
        resourcesMembershipBar = Web.MembershipResources && Web.MembershipResources.Bar,
        resourcesActionsScopesGrid = resourcesActions.Scopes.Grid,
        resourcesInfoBar = resources.InfoBar,
        resourcesMobileThemes = resourcesMobile.Themes,
        resourcesImport = resourcesMobile.Import,
        resourcesDevelop = resourcesMobile.Develop,
        resourcesNo = resourcesData.BooleanDefaultItems[0][1],
        resourcesYes = resourcesData.BooleanDefaultItems[1][1],
        resourcesEditor = resources.Editor,
        shortcuts = { cache: {}, list: [], keyCodes: [] },
        rtf,
        dataInputStylesToBorrow = [
            { name: 'fontWeight' },
            { name: 'color', ignore: '.app-null' },
            { name: 'backgroundColor' },
            { name: 'textTransform' },
            { name: 'fontStyle', ignore: '.app-null' }
        ],
        nullValueInForms = resourcesData.NullValueInForms,
        toolbarStandardControls,
        toolbarSearchControls,
        fixedPositionTimeout,
        fetchEchosTimeout,
        scrollInterval, scrollStopTimeout,
        popupOpenCallback,
        popupCloseCallback,
        panelIsBusy,
        menuActionOnClose, skipMenuActionOnClose, contextActionOnClose, skipContextActionOnClose,
        refreshContextTimeout, sidebarElement, echoTimeout, clearContextScopeTimeout, fetchOnDemandTimeout,
        skipTap, isPageReady, touchScrolling, /*pageChangeCallback, */isInTransition,
        contextPanelScrolling = {},
        currentContext,
        newSortExpression,
        skipInfoView,
        yardstickData = {},
        autoFocus,
        maxGeoCacheSize = 500, maxMapMarkers = 500,
        screenBreakpoints = ['tn', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'],
        mouseX, mouseY,
        nsSVG = 'http://www.w3.org/2000/svg',
        tooltip, tooltipTimeout, tooltipDelay = 500, preventMouseEnter, // tooltip API
        notifyBar, notifyQueue = [], // notification API
        autoId = 0,
        rootDataViewId,
        skipRefreshContext,
        helpItem, taskAssistantItem, editItem, pagePropItem,
        _pendingPageText, _geoLocations,
        _webkitSuppressPageChangeOnStart,
        feedbackFrom,
        contentFramework,
        settings, settingsMap = {}, appBars,
        _app = $app,
        _input,
        _window = window,
        _history = history,
        isHosted = _window.parent != _window, toolbarIsVisible,
        $body,
        $window = $(_window),
        _screen = { isVirtual: false, top: 0, left: 0, width: 0, height: 0, physicalWidth: 0, physicalHeight: 0 },
        _device,
        $mobile = $.mobile,
        navigationHistory = $mobile.navigate.history,
        feedbackDelay = 34,
        refreshContextDelay = 450,
        maximumMultiSelectCount = 1000,
        _displayDensity,
        scrollbarInfo,
        authenticationEnabled,
        identityConfirmationRequested,
        displayMyAccount,
        loggedIn,
        userName,
        useFullscreenWhenSeeAll,
        _startTouch,
        _lastTouch,
        _lastBlur,
        autoOpenMenuTimeout,
        dragMan, dragEvent, pendingDragEvent,
        // icons
        iconBack = 'material-icon-chevron-left';

    //jQuery.fn.extend({
    //    visible: function () {
    //        return $(this[0]).is(':visible');
    //        var elem = this[0];
    //        return !!(elem.offsetWidth || elem.offsetHeight) && _window.getComputedStyle(elem).display != 'none';
    //    }
    //});

    function appName() {
        return settings.appName || 'Code On Time';
    }

    function isVirtualScreen() {
        return !!_screen.isVirtual;
    }

    function exitToHost() {
        _window.location.href = 'cloudontime://exit/?{}';
    }

    function isLocalHost() {
        return !!_window.location.host.match(/^localhost\b/);
    }

    function virtualDevice() {
        var deviceVar = _window.location.host + '_DevToolsDevice',
            deviceVal;
        if (arguments.length)
            //localStorage[deviceVar] = JSON.stringify(arguments[0]);
            _app.storage.set(deviceVar, JSON.stringify(arguments[0]));
        else {
            deviceVal = _app.storage.get(deviceVar);//localStorage[deviceVar];
            if (deviceVal)
                deviceVal = JSON.parse(deviceVal);
            return deviceVal || { name: 'Responsive' };
        }
    }

    function compareTwoItems(a, b) {
        var result = 0;
        if (a[2] < b[2])
            result = 1;
        else if (a[2] > b[2])
            result = -1;
        return result;
    }

    function toTooltipText(elem) {
        var tooltipText = elem.text();
        if (tooltipText.length > 300)
            tooltipText = tooltipText.substring(0, 300) + '...';
        if (tooltipText.match(/</))
            tooltipText = _app.htmlEncode(tooltipText);
        return tooltipText;
    }

    function scrollIntoView(element) {
        var scrollable, scrollableOffset, scrollBy, elementOffset;
        scrollable = findScrollable(element);
        scrollableOffset = scrollable.offset();
        elementOffset = element.offset();
        if (elementOffset.top < scrollableOffset.top)
            scrollBy = -(scrollableOffset.top - elementOffset.top + 8);
        else if (elementOffset.top + element.outerHeight() > scrollableOffset.top + scrollable.height())
            scrollBy = elementOffset.top + element.outerHeight() - (scrollableOffset.top + scrollable.height()) + 8;
        if (scrollBy != null)
            scrollable.scrollTop(scrollable.scrollTop() + scrollBy);
    }

    function lastFocusedField(field, page) {
        if (field && typeof field !== 'string')
            field = field.Name;
        if (!page)
            page = findActivePage();
        page.data('last-focused-field', field);
    }

    function textInputToValue(textInput) {
        var isRtf = textInput.is('iframe'),
            value = isRtf ? textInput[0].contentDocument.body.innerHTML.trim() : textInput.val();
        if (isRtf && value.match(/^(\s*(&nbsp;|<\/?(p|br)\/?>)\s*)+$/))
            value = '';
        return value;//.trim();
    }

    function isPromoMovedWithNotification() {
        var promo = mobile.promo(),
            notifyBarOffset,
            promoOffset;
        if (!notifyBar || !promo.length || !promo.is(':visible'))
            return false;
        notifyBarOffset = notifyBar.offset();
        promoOffset = promo.offset();
        return !(notifyBarOffset.left + notifyBar.outerWidth() < promoOffset.left || notifyBarOffset.left > promoOffset.left + promo.outerWidth());
    }

    function isFooterMovedWithNotification(footerTest) {
        var activePage = findActivePage(),
            footer;
        if (activePage.is('.app-page-modal')) return false;
        footer = activePage.find('.app-bar-footer');
        return footer.is(':visible') && (!footerTest || footerTest(footer));
    }

    function findFooterOnActivePage() {
        return findActivePage('.app-bar-footer');
    }

    function findTransitionedModalRootFooter() {
        var footer = $('.app-page-modal-root .app-bar-footer');
        return footer.length && footer.css('transform') != 'none' ? footer : null;
    }

    function resetPageFooter(footer) {
        var css = { 'transition': '', 'transform': '' };
        if (footer)
            footer.css(css);
        else
            findFooterOnActivePage().css(css);
    }

    function showNotification() {
        if (!notifyBar) {
            notifyBar = $('<div class="app-bar-notify app-hidden"></div>').appendTo($body).on('vclick', function (e) {
                function hide() {
                    var promo = mobile.promo(),
                        barHeight = notifyBar.outerHeight(),
                        moveFooter = isFooterMovedWithNotification(function (footer) { return footer.css('transform') != 'none'; }),
                        footerCss = { 'transition': 'transform 200ms ease-in', 'transform': 'translate3d(0,' + barHeight + 'px,0)' },
                        modalRootFooter = findTransitionedModalRootFooter(),
                        movePromo = isPromoMovedWithNotification();
                    if (movePromo)
                        promo.css({ 'transition': 'transform 200ms ease-in', 'transform': 'translate3d(0,' + barHeight + 'px,0)' });
                    if (moveFooter)
                        findFooterOnActivePage().css(footerCss);
                    if (modalRootFooter)
                        modalRootFooter.css(footerCss);
                    notifyBar.data('busy', true).css({ 'transform': 'translate3d(0,' + barHeight + 'px,0)' }).one('transitionend', function () {
                        notifyBar.removeData('busy shown').addClass('app-hidden');
                        if (moveFooter)
                            resetPageFooter();
                        if (movePromo) {
                            promo.css({ /*'margin-bottom': '', */'transition': '', 'transform': '' });
                            mobile.promo(true);
                        }
                        if (modalRootFooter)
                            resetPageFooter(modalRootFooter);
                    });
                }
                if (!notifyBar.is('.app-hidden'))
                    if (skipTap)
                        setTimeout(function () {
                            notifyBar.trigger('vclick');
                        }, 100);
                    else
                        hide();
            });
            if ($settings('ui.notify.transparent') == true)
                notifyBar.addClass('app-bar-notify-transparent');
        }

        var notify = notifyQueue[0];
        if (notifyBar.data('busy') || notifyBar.data('shown') && (!notify || notify.force != true) || skipTap || !isPageReady)
            setTimeout(showNotification, 100/*isPageReady ? 100 : 200*/);
        else if (notify) {
            var text = notify.text,
                duration = notify.duration,
                barHeight, promo = mobile.promo(), promoIsVisible = promo.is(':visible'),
                moveFooter = isFooterMovedWithNotification(),
                movePromo,// = isPromoMovedWithNotification(),
                isCentered = _screen.width > 568 && !moveFooter,
                isLeftAligned = isCentered && $settings('ui.notify.location') == 'left',
                leftMargin = appBars.left.visible ? appBars.left.width : 0;
            notifyQueue.splice(0, 1);
            // ensure notification bar
            notifyBar.data({ 'busy': true, 'shown': true, notify: notify }).addClass('app-hidden').css('transition-property', 'none');
            notifyBar.toggleClass('app-bar-notify-center', isCentered).toggleClass('app-bar-notify-left', isLeftAligned).css('left', '');
            if (promoIsVisible)
                mobile.promo(true);
            resetPageFooter();
            notifyBar.removeClass('app-hidden');
            text = htmlToText(text).trim();
            if (text.length > 250)
                text = text.substring(0, 250) + '...';
            var timestamp = new Date().getTime();
            notifyBar.data('timestamp', timestamp).text(text).css({
                bottom: isLeftAligned ? (/*promoIsVisible ? Math.max(16, 9 + (72 - notifyBar.outerHeight()) / 2) :*/ 16) : '',
                left: isCentered ? (isLeftAligned ? (leftMargin + (appBars.left.visible ? - 8 : 16)) : ((_screen.width - notifyBar.outerWidth()/* - leftMargin*/) / 2)) : (leftMargin > 0 ? leftMargin : '')
            });
            barHeight = notifyBar.outerHeight();
            notifyBar.css({ 'transform': 'translate3d(0,' + barHeight + 'px,0)' });
            if (duration == null)
                duration = 'short';
            if (duration == 'short')
                duration = $settings('ui.notify.duration.short') || 2500;
            else if (duration == 'medium')
                duration = $settings('ui.notify.duration.medium') || 5000;
            else if (duration == 'long')
                duration = $settings('ui.notify.duration.long') || 10000;
            if (typeof duration == 'string')
                duration = 2500;
            movePromo = isPromoMovedWithNotification();
            setTimeout(function () {
                if (movePromo)
                    promo.css({ 'transition': 'transform 200ms ease-in', 'transform': 'translate3d(0,-' + barHeight + 'px,0)' })
                if (moveFooter)
                    moveFooterAboveNotificationBar();
                notifyBar.css({ 'transform': '', 'transition-property': 'transform' }).one('transitionend', function () {
                    notifyBar.removeData('busy');
                    notifyBar.css('transition-property', '');
                    if (movePromo) {
                        mobile.promo(true);
                        promo.css({ 'transform': '', 'transition': ''/*, 'margin-bottom': barHeight + parseCss(promo, 'margin-bottom')*/ });
                    }
                    setTimeout(function () {
                        if (notifyBar.data('timestamp') == timestamp)
                            notifyBar.trigger('vclick');
                    }, duration);
                });
            }, 16);
        }
    }

    function moveFooterAboveNotificationBar(instantly) {
        var transition = 'transform 200ms ease-in',
            footer;
        if (notifyBar && notifyBar.is(':visible') && !findActivePage().is('.app-page-modal') && !notifyBar.is('.app-bar-notify-center,.app-bar-notify-left')) {
            footer = findFooterOnActivePage().css({ 'transition': instantly ? '' : transition, 'transform': 'translate3d(0,-' + notifyBar.outerHeight() + 'px,0)' });
            if (instantly)
                footer.css('transiton', transition);
        }

    }

    function screenChanged_sidebar(options) {
        var sidebar = options.sidebar || contextSidebar();
        if (sidebar.length)
            if (isVirtualScreen())
                sidebar.css({ minHeight: _screen.height, height: _screen.height, left: _screen.left, top: _screen.top });
            else
                sidebar.css({ minHeight: '', height: '', left: '', top: '' });
    }

    function screenChanged_accountManager(options) {
        var accountManager = options.accountManager || accountManagerScreen();
        if (accountManager.length)
            if (isVirtualScreen())
                accountManager.css({ left: _screen.left, top: _screen.top, right: _screen.right, bottom: _screen.bottom });
            else
                accountManager.css({ left: '', top: '', right: '', bottom: '' });
    }

    function screenChanged(options) {
        if (!options)
            options = { isVirtual: isVirtualScreen(), width: _screen.width, height: _screen.height };
        if (options.isVirtual == null)
            options.isVirtual = isVirtualScreen();
        if (!options.width)
            options.width = _screen.width;
        if (!options.height)
            options.height = _screen.height;
        var w = $window.width(),
            h = $window.height(),
            toolbar = options.toolbar || (mobile ? mobile._toolbar : $('.app-bar-tools')),
            screenBars = $('.app-virtual-screen-bar'),
            isVirtual = _screen.isVirtual = options.isVirtual;
        if (isVirtual) {
            if (_screen.deviceWidth) {
                options.width = _screen.deviceWidth;
                options.deviceWidth = null;
            }
            if (_screen.deviceHeight) {
                options.height = _screen.deviceHeight;
                options.deviceHeight = null;
            }
            if (options.width > w) {
                _screen.deviceWidth = options.width;
                options.width = w - 40;
            }
            if (options.height > h) {
                _screen.deviceHeight = options.height;
                options.height = h - 40;
            }
            _screen.width = options.width;
            _screen.height = options.height;
            _screen.physicalWidth = w;
            _screen.physicalHeight = h;
            _screen.left = Math.ceil((w - options.width) / 2);
            _screen.top = Math.ceil((h - options.height) / 2);
            _screen.right = w - _screen.left - _screen.width;
            _screen.bottom = h - _screen.top - _screen.height;
            toolbar.css({ left: _screen.left, top: _screen.top, width: _screen.width });
            if (!screenBars.length) {
                var bar = '<div class="app-virtual-screen-bar"></div>';
                $(bar).appendTo($body);
                $(bar).appendTo($body);
                $(bar).appendTo($body);
                $(bar).appendTo($body);
            }
            screenBars = $('.app-virtual-screen-bar');
            $(screenBars[0]).css({ width: _screen.left, right: 'auto' });  // left
            $(screenBars[1]).css({ width: _screen.right, left: 'auto' });  // rigth
            $(screenBars[2]).css({ height: _screen.top, bottom: 'auto' }); // top
            $(screenBars[3]).css({ height: _screen.bottom, top: 'auto' }); // bottom
            screenChanged_sidebar(options);
            //$(screenBars[2]).text(_device.name);
        }
        else {
            _screen.width = w;
            _screen.height = h;
            _screen.physicalWidth = w;
            _screen.physicalHeight = h;
            _screen.left = 0;
            _screen.top = 0;
            _screen.right = 0;
            _screen.bottom = 0;
            toolbar.css({ left: '', top: '', width: '' });
            screenBars.remove();
        }
        screenChanged_sidebar(options);
        screenChanged_accountManager(options);
        $body.toggleClass('app-virtual-screen', isVirtualScreen());

        if (notifyBar && notifyBar.is(':visible')) {
            //notifyBar.addClass('app-hidden').removeData('busy');
            skipTap = true;
            mobile.notify(notifyBar.addClass('app-hidden').removeData('busy shown').data('notify'));
        }
    }

    function $settings(selector, value) {
        var result,
            argCount = arguments.length;
        if (argCount == 1) {
            result = settingsMap[selector];
            if (result !== undefined || selector in settingsMap)
                return result;
        }
        var path = selector.split(/\./g),
            count = path.length, name,
            current = settings, i;
        for (i = 0; i < count; i++) {
            name = path[i];
            if (argCount == 2) {
                if (i == count - 1) {
                    current[name] = value;
                    settingsMap[selector] = value;
                }
                else if (current[name] == null)
                    current = current[name] = {};
                else
                    current = current[name];
            }
            else {
                if (i == count - 1) {
                    result = current[name];
                    settingsMap[selector] = result;
                    return result;
                }
                else if (current[name] != null)
                    current = current[name];
                else if (i < count - 1) {
                    current[name] = {};
                    current = current[name];
                }
                else
                    return null;
            }
        }
    }


    function $settingsEnabled(selector) {
        return $settings(selector) != false;
    }

    function isRtfEditor(element) {
        return element.tagName == 'DIV' && !element.className.match(/app\-drop\-box/);
    }

    // initilize specialKeys
    _app.keyCode = {
        'backspace': 8,
        'tab': 9,
        'enter': 13,
        'esc': 27,
        'space': 32,
        'insert': 45,
        'delete': 46,
        'pageup': 33,
        'pagedown': 34,
        'end': 35,
        'home': 36,
        'left': 37,
        'up': 38,
        'right': 39,
        'down': 40,
        'f1': 112,
        'f2': 113,
        'f3': 114,
        'f4': 115,
        'f5': 116,
        'f6': 117,
        'f7': 118,
        'f8': 119,
        'f9': 120,
        'f10': 121,
        'f11': 122,
        'f12': 123
    };

    function isShortcutMatchedToModifiers(shortcutObject, e, substituteMetaKey) {
        return (shortcutObject.ctrlKey == e.ctrlKey || substituteMetaKey && shortcutObject.ctrlKey == e.metaKey) && shortcutObject.altKey == e.altKey && shortcutObject.shiftKey == e.shiftKey && shortcutObject.metaKey == e.metaKey;
    }

    function handleKeyboardShortcuts(e, handleRtf, suppressRtfShortcuts) {
        var which = e.keyCode || e.which,
            shortcutObject, rtfCommand;
        if (handleRtf)
            for (var i = 0; i < rtf.list.length; i++) {
                rtfCommand = rtf.list[i];
                if (rtfCommand.key) {
                    shortcutObject = rtfCommand.shortcut;
                    if (!shortcutObject)
                        shortcutObject = rtfCommand.shortcut = createShortcutObject(rtfCommand.key, rtfCommand);
                    if (shortcutObject.which == which && isShortcutMatchedToModifiers(shortcutObject, e, rtfCommand.metaKey)) {
                        e.preventDefault();
                        e.stopPropagation();
                        if (!suppressRtfShortcuts)
                            rtf.range('exec', { command: rtfCommand.command, argument: rtfCommand.argument, validate: true });
                        return true;
                    }
                }
            }

        if (shortcuts.list.length && !suppressRtfShortcuts) {
            var which = e.keyCode || e.which,
                keyIndex = shortcuts.keyCodes.indexOf(which);
            if (keyIndex != -1) {
                shortcutObject = shortcuts.list[keyIndex];
                if (isShortcutMatchedToModifiers(shortcutObject, e)/* shortcutObject.ctrlKey == e.ctrlKey && shortcutObject.altKey == e.altKey && shortcutObject.shiftKey == e.shiftKey && shortcutObject.metaKey == e.metaKey*/) {
                    if (_input.popup(':visible'))
                        return false;
                    var context = [];
                    mobile.navContext(context);
                    $(context).each(function () {
                        var action = this;
                        if (action.shortcut == shortcutObject.shortcut) {
                            closePopupsAndPanels(true);
                            setTimeout(function () {
                                executeContextAction(action);
                            }, 100);
                            return false;
                        }
                    });
                    e.preventDefault();
                    e.stopPropagation();
                    return true;
                }
            }
        }
    }

    function createShortcutObject(shortcut, commandDef) {
        var key, i,
            shortcutObject = { shortcut: shortcut, ctrlKey: false, altKey: false, shiftKey: false, metaKey: false },
            keyList = shortcut.split(/\s*\+\s*/g);
        for (i = 0; i < keyList.length; i++) {
            key = keyList[i].toLowerCase();
            if (key.length > 1) {
                switch (key) {
                    case 'ctrl':
                        shortcutObject.ctrlKey = true;
                        break;
                    case 'alt':
                        shortcutObject.altKey = true;
                        break;
                    case 'shift':
                        shortcutObject.shiftKey = true;
                        break;
                    case 'meta':
                        shortcutObject.metaKey = true;
                        break;
                    default:
                        shortcutObject.which = _app.keyCode[key]
                        if (!shortcutObject.which)
                            shortcutObject.invalid = true;
                        break;
                }
            }
            else
                shortcutObject.which = commandDef && commandDef.which != null ? commandDef.which : key.toUpperCase().charCodeAt(0);
        }
        shortcuts.cache[shortcut] = shortcutObject;
        return shortcutObject;
    }

    function closePopups(immediately, test) {
        var popup = $('.app-popup');
        if (popup.length && (!test || popup.is(test))) {
            popup.popup('close', immediately);
            return true;
        }
    }

    function closePopupsAndPanels(immediately) {
        var panel = $('.ui-panel-open');
        if (panel.length) {
            panel.panel('close', immediately);
            return true;
        }
        return closePopups(immediately);
    }

    function actionToTooltip(action) {
        var text = action.text,
            shortcut = action.shortcut;
        if (shortcut)
            text += ' (' + shortcut + ')';
        return text;
    }

    function avatar(user, icon) {
        _app.AccountManager.avatar(user, icon);
    }

    function enhanceScrollingTouchStart(e) {
        _startTouch = touchPoint(e);
    }

    function enhanceScrollingTouchMove(e) {
        var inner = $(this);
        if (_startTouch) {
            var end = touchPoint(e);
            if (_startTouch.y < end.y) {
                // moving up
                if (inner[0].scrollHeight < inner.height() || inner.scrollTop() == 0)
                    e.preventDefault()
            }
            else if (_startTouch.y > end.y)
                // moving down
                if (inner[0].scrollHeight < inner.height() || inner.outerHeight() + inner.scrollTop() >= inner[0].scrollHeight)
                    e.preventDefault();
            _startTouch = null;
        }
    }

    function enhanceScrolling(control, enable) {
        var inner = control.is('.ui-panel-inner,.app-wrapper') ? control : control.find('.ui-panel-inner'),
            container = inner.closest('.app-popup,.ui-panel');
        if (iOS) {
            if (enable)
                inner.off('touchstart touchmove');
            else
                inner.on('touchstart', enhanceScrollingTouchStart).on('touchmove', enhanceScrollingTouchMove);
        }
        if (inner.is('.ui-panel-inner')) {

            //*** PROTOTYPE of shadows in scrollable panels *** 
            //$('<span class="app-scroll-indicator app-scroll-indicator-up"/>').appendTo(container);
            //$('<span class="app-scroll-indicator app-scroll-indicator-down"/>').appendTo(container);
            //inner.on('scroll', function (e) {
            //    var className = container[0].className,
            //        scrollTop = inner.scrollTop();
            //    if (scrollTop) {
            //        if (!className.match(/\bapp-can-scroll-up\b/))
            //            container.addClass('app-can-scroll-up');
            //    }
            //    else
            //        if (className.match(/\bapp-can-scroll-up\b/))
            //            container.removeClass('app-can-scroll-up');
            //    if (scrollTop + inner.outerHeight() < inner[0].scrollHeight) {
            //        if (!className.match(/\bapp-can-scroll-down\b/))
            //            container.addClass('app-can-scroll-down');
            //    }
            //    else
            //        if (className.match(/\bapp-can-scroll-down\b/))
            //            container.removeClass('app-can-scroll-down');
            //});
        }
    }

    function noTap() {
        skipTap = true;
        setTimeout(function () {
            skipTap = false;
        }, 250);
    }

    function goForwardTo(pageId) {
        var history = $mobile.navigate.history;
        $mobile.navigate('#' + pageId);
        history.stack[history.activeIndex].pageUrl = pageId;
    }

    function userNameToInitials(user) {
        user = user.split(/@/g);
        user = user[0];
        user = user.split(/\\/g);
        user = user[user.length > 1 ? 1 : 0];
        var userWords = user.replace(/\W/g, ' ').trim(),
            word, initials = '', i;
        if (!userWords)
            userWords = user;
        userWords = userWords.split(/\b/g);
        for (i = 0; i < userWords.length; i++) {
            word = userWords[i];
            if (word)
                word = word.trim();
            if (word)
                initials += word.substring(0, 1);
            if (initials.length == 2)
                break;
        }
        return initials;
    }

    function findFieldMappedToValue(lookupField, cfv) {
        var result, m,
            iterator = /(\w+)(\s*=\s*(\w+))?/g,
            contextFilter = lookupField.ContextFields;
        if (contextFilter) {
            m = iterator.exec(contextFilter);
            while (m) {
                if (m[1] == cfv.Name) {
                    result = lookupField._dataView.findField(m[3] ? m[3] : m[1]);
                    break;
                }
                m = iterator.exec(contextFilter);
            }
        }
        return result;

    }

    function filterOperatorRequiresValues(op) {
        return op.match(/^(=|<>|<|>|<=|>=|(\$(between|in|notin|beginswith|doesnotbeginwith|contains|doesnotcontain|endswith|doesnotendwith)))$/) != null;
    }

    function lovKey(field) {
        var dataView = field._dataView,
            externalFilter = createExternalFilter(dataView, field, []);
        externalFilter = externalFilter.length ? JSON.stringify(externalFilter) : '';
        return field.Name + '_listOfValues_' + externalFilter.toLowerCase().replace(/\W+/g, '_');
    }

    function createExternalFilter(dataView, field, filter) {
        var contextFilter = dataView.get_contextFilter(field, dataView.extension().collect()),
            contextIndex = 0,
            cfv, lookupField, itemsStyle = field.ItemsStyle || '',
            row = dataView.editRow(), lookupFieldOp;

        while (contextIndex < contextFilter.length) {
            cfv = contextFilter[contextIndex];
            if (cfv.Literal) {
                //filter.push(cfv.Name + ':=%js%' + JSON.stringify(cfv.Value));
                //contextFilter.splice(contextIndex, 1);
                contextIndex++;
            }
            else {
                lookupField = findFieldMappedToValue(field, cfv);
                var lookupFieldOp2 = dataView.findField(lookupField.Name + '_op2'),
                    lookupFieldOp = dataView.findField(lookupField.Name + '_op'),
                    op = null, requiresValues;// = lookupFieldOp ? (row[lookupFieldOp.Index] || '=') : '=';
                if (lookupFieldOp2)
                    op = row[lookupFieldOp2.Index];
                if (op == null && lookupFieldOp)
                    op = row[lookupFieldOp.Index];
                if (op == null)
                    op = '='
                requiresValues = filterOperatorRequiresValues(op);
                if (op.match(/^\$/))
                    op += '$';
                if (cfv.Value == null) {
                    if (lookupFieldOp) {
                        contextFilter.splice(contextIndex, 1);
                        if (op && !requiresValues)
                            filter.push(cfv.Name + ':' + op);
                    }
                    else {
                        contextIndex++;
                        filter.push(cfv.Name + ':=null');
                    }
                }
                else {
                    if (lookupField) {
                        if (lookupField.ItemsTargetController || lookupField.ItemsStyle == 'CheckBoxList') {
                            contextFilter.splice(contextIndex, 1);
                            var cfValues = _app.csv.toArray(cfv.Value);
                            cfValues.forEach(function (v, index) {
                                cfValues[index] = dataView.convertFieldValueToString(lookupField, v);
                            });
                            if (op == '=')
                                op = '$in$';
                            filter.push(cfv.Name + ':' + op + cfValues.join('$or$'));
                        }
                        else {
                            if (op == '$between$') {
                                cfv.Value2 = row[dataView.findField(lookupField.Name + '_v2').Index];
                                if (cfv.Value2 == null)
                                    op = '>=';
                                else
                                    if (cfv.Value > cfv.Value2)
                                        cfv.Value = [cfv.Value2, cfv.Value2 = cfv.Value][0];
                            }
                            cfv.Value = dataView.convertFieldValueToString(lookupField, cfv.Value);
                            if (cfv.Value2 != null)
                                cfv.Value2 = dataView.convertFieldValueToString(lookupField, cfv.Value2);
                            if (op == '=') {
                                contextIndex++;
                                filter.push(cfv.Name + ':=' + cfv.Value);
                            }
                            else {
                                contextFilter.splice(contextIndex, 1);
                                filter.push(cfv.Name + ':' + op + (cfv.Value != null ? cfv.Value : '') + (cfv.Value2 != null ? '$and$' + (cfv.Value2) : ''));
                            }
                        }
                    }
                }
            }
        }
        if (itemsStyle.match(/^(AutoComplete|Lookup)$/) && field.ItemsTargetController || itemsStyle == 'CheckBoxList') {
            var fieldValue = row[field.Index];
            if (fieldValue != null) {
                fieldValue = _app.csv.toArray(fieldValue.toString());
                fieldValue.forEach(function (v, index) {
                    // requires special handling for dates
                    fieldValue[index] = '%js%' + _app.serializer.serialize(v);
                });
                filter.push(field.Name + ':$notin$' + fieldValue.join('$or$'));
            }
        }
        var extended = field.Extended;
        if (extended && extended.filter) {
            extended.filter.forEach(function (filterDef) {
                var fieldName = filterDef.match(/^(.+?)\:/);
                if (fieldName && fieldName[1] != field.Name)
                    filter.push(filterDef);
            });
            extended.search.forEach(function (filterDef) {
                filter.push(filterDef);
            });
        }
        return contextFilter;
    }


    function calcWidth(element) {
        var elemObj = element[0], pageClassName,
            width,
            className = elemObj.className,
            leftSideBarWidth = appBars.left.visible ? appBars.left.width : 0,
            rightSideBarWidth = appBars.left.visible ? appBars.right.width : 0;
        // scrollable/wrapper
        if (className.match(/\b(app\-wrapper)\b/)) {
            pageClassName = element.closest('.ui-page')[0].className;
            if (pageClassName.match(/\b(app\-page\-modal|app\-has\-panel)\b/) && pageClassName.indexOf('app-page-modal-never') == -1)
                width = parseCss(element, 'width');//modalPageWidth();
            else
                width = _screen.width - leftSideBarWidth - rightSideBarWidth;
        }
        else if (className.match(/\b(app\-bar\-tools)\b/)) // toolbar
            width = _screen.width - rightSideBarWidth;
        else
            width = element.outerWidth();
        return width;
    }

    function canCreateNewItem(field) {
        return field.ItemsDataController && field.ItemsNewDataView;
    }

    function isModalPage(element) {
        if (!element)
            element = findActivePage();
        if (!element.is('.ui-page'))
            element = element.closest('.ui-page');
        return element.is('.app-page-modal');
    }

    function allowModal() {
        return _screen.width >= toPhysicalWidth($settings('ui.modal.when') || 'md') && _screen.height >= toPhysicalWidth('xs') || findModalRoot().length > 0;
    }

    function allowButtonBar() {
        return _screen.width > 420 && _screen.height >= 600;
    }

    function findModalRoot() {
        return $('.app-page-modal-root');
    }

    function getToolbarHeight() {
        var h = _window._toolbarHeight;
        if (!h)
            h = _window._toolbarHeight = mobile.toolbar().outerHeight();
        return h;

    }

    function keyboard() {
        return isTouchPointer && ($(document.activeElement).is(':input') || $window.height() < _screen.height);
    }


    function whenPageCanceled(callback, activePageId) {
        if (!activePageId)
            activePageId = findActivePage().prevAll('.ui-page').first().attr('id');
        $(document).one('pagecanceled.app', function (e) {
            if (e.namespace == 'app') {
                var currentActivePageId = getActivePageId();
                if (activePageId == currentActivePageId || currentActivePageId == 'Main')
                    callback();
                else if (findActivePage().prevAll('.ui-page').filter(function () { return $(this).attr('id') == activePageId }).length)
                    whenPageCanceled(callback, activePageId);
            }
        });
    }

    function whenPageShown(callback) {
        $(document).one('pageready.app', function (e) {
            if (e.namespace == 'app')
                callback();
        });
    }

    function goBack(callback) {
        _input.ignoreErrors = true;
        if (callback && typeof callback == 'function')
            whenPageShown(callback);
        isInTransition = true;
        _history.go(-1);
    }

    function displayPageHeader(pageInfo) {
        var header = pageInfo ? pageInfo.page.find('.app-page-header').filter(function () { return !$(this).is('.app-page-header-fixed') }) : null;//pageInfo.isPanel ? $('#' + pageInfo.Id + ' .app-page-header') : null;
        if ($body.is('.app-page-header-hidden') || pageInfo && pageInfo.headerText == false)
            pageHeaderText(false, header);
        else
            pageHeaderText(pageInfo && pageInfo.headerText || pageInfo && pageInfo.dataView && pageInfo.dataView.get_view().Label || document.title, header);
    }

    function nop() { }

    function showInfoView(context) {
        var standalone = typeof context == 'string';
        mobile.infoView(_app.find(standalone ? context : context.id), standalone);
    }

    function accountManagerChangeCurrentUser(context, link) {
        if (context.Token && _app.userName() != context.UserName)
            doChangeCurrentUser(context.UserName);
        else
            callWithFeedback(link, function () {
                doChangeCurrentUser(context.UserName);
            });
    }

    function isDedicatedLoginPage() {
        return _window.location.pathname.match(/\/login(\.aspx|$)/i);
    }

    function showLoginOnStart() {
        function doShowLogin() {
            mobile.showAccountManager(null, true);
        }
        if (mobile._started)
            doShowLogin();
        else {
            if (_app.AccountManager.count())
                accountManagerScreen(null, 'loading');
            $(document).one('start.app', doShowLogin);
        }
    }

    function showSplash() {
        if ($settingsEnabled('splash.enabled')) {
            if (sessionStorage)
                if (sessionStorage['spashShown'])
                    return;
                else
                    sessionStorage['spashShown'] = true;
            var duration = Math.max(1000, $settings('splash.duration') || 2500) - 500;
            accountManagerScreen(/*[{ text: loadingStatusText}]*/null, 'splash');
            setTimeout(function () {
                var accMan = accountManagerScreen();
                accMan.css('transition', 'opacity 500ms');
                setTimeout(function () {
                    accMan.css('opacity', 0);
                    setTimeout(function () {
                        accMan.remove();
                    }, 525);
                });
            }, duration);
        }
    }

    function tryAutoLogin() {
        var forceAccMan = _window.location.href.match(/(\?|&)_accMan=(\w+)/),
            returnUrl = mobile.returnUrl(),
            token = findCookieValue('.TOKEN'),
            handler = findCookieValue('.PROVIDER'),
            justSignedOut,
            loggedIn = _app.loggedIn();


        if (token) createCookie('.TOKEN', null, -1);

        if (sessionStorage) {
            justSignedOut = sessionStorage['signedOut'];
            sessionStorage.removeItem('signedOut');
        }
        if (!loggedIn && _app.AccountManager.enabled() || forceAccMan) {
            var currentUserName = _app.userName(),
                identities = _app.AccountManager.list(),
                lastUser = identities._lastUser && identities[identities._lastUser],
                loginLastUser = !forceAccMan && lastUser && !!lastUser.Token,
                forceMode = forceAccMan ? forceAccMan[2] : null,
                showLoading = forceMode == 'loading' || forceMode == 'splash',
                showList = forceMode == 'list';

            if (token) {
                lastUser = { UserName: handler, Token: token, Handler: handler };
                loginLastUser = true;
                showLoading = false;
            }

            if (loginLastUser || showLoading) {
                if (showLoading && !lastUser)
                    lastUser = { UserName: 'Test' };
                // attempt login
                var items = [];
                if (forceMode != 'splash') {
                    items.push({ text: lastUser.UserName, context: lastUser });
                    items.push({ text: loadingStatusText });
                }
                accountManagerScreen(items, forceMode);

                if (showLoading)
                    return;

                _app.switchUser(lastUser, function (user) {
                    var url = returnUrl || __baseUrl;
                    if (!forceAccMan)
                        _window.location.replace(url);
                }, function () {
                    mobile.busy(false);
                    lastUser.Token = null;
                    _app.AccountManager.set(lastUser);
                    showLoginOnStart();
                });
            }
            else if ((showList || returnUrl || justSignedOut) && !isDedicatedLoginPage())
                showLoginOnStart();
            else if (!loggedIn)
                showSplash();
        }
        else if (!loggedIn)
            showSplash();
    }


    function accountManagerScreen(items, mode) {
        var screen = $('.app-acc-man'),
            list;
        if (!arguments.length)
            return screen;
        if (screen.length) {
            screen.show().appendTo($body).removeClass('app-acc-man-inactive');
            list = screen.find('ul').empty();
        }
        else {
            screen = $('<div class="app-acc-man"><div class="app-acc-space"></div></div>').appendTo($body);
            var inner = $('<div class="app-acc-inner"></div>').appendTo(screen),
                logo = $('<div class="app-logo"></div>').appendTo(inner).html(appName()),
                listContainer = $('<div class="app-acc-list"></div>').appendTo(inner);
            screenChanged_accountManager({ accountManager: screen });
            var close = $('<a class="app-acc-close"><i class="material-icon">close</i></a>').attr('title', resourcesModalPopup.Close).prependTo(inner);
            var splashSettings = settings.splash;
            if (splashSettings) {
                var bkg = splashSettings.background,
                    lg = splashSettings.logo;

                function applyCustomBackground(element, bkg) {
                    if (bkg.match(/url\(/))
                        element.css('background', bkg);
                    else
                        element.css('background-image', 'url(' + bkg + ')');
                    element.css('text-indent', '-9999px');
                }

                if (bkg)
                    applyCustomBackground(screen.find('.app-acc-space'), bkg);
                if (lg)
                    applyCustomBackground(logo, lg);
            }
            close.on('vclick', function () {
                callWithFeedback(close, function () {
                    screen.fadeOut();
                });
            });
            list = $('<ul/>').appendTo(listContainer).on('vclick', 'a', function (e) {
                var target = $(e.target),
                    a = target.closest('a'),
                    item = a.data('context'),
                    userName;
                if (target.is('.app-btn-more')) {
                    userName = item.context.UserName;
                    callWithFeedback(target, function () {
                        showListPopup({
                            anchor: target, items: [
                                { text: userName, user: userName, keepOpen: true, callback: nop, selected: true, depth: 1 },
                                {},
                                {
                                    text: resourcesMembershipBar.LoginButton, icon: 'material-icon-arrow-forward', callback: function () {
                                        a.trigger('vclick');
                                    }
                                },
                                {
                                    text: resourcesMobile.Forget, icon: 'material-icon-delete', callback: function () {
                                        _app.AccountManager.remove(userName, true);
                                        a.remove();
                                    }
                                }
                            ]
                        });
                    });
                }
                else if (item.callback)
                    callWithFeedback(a, function () {
                        item.callback(item.context, a);
                    });
                return false;
            });

            var footer = $('<div class="app-acc-footer"></div>').appendTo(inner).html($('#PageFooterBar,footer small').html());
            listContainer.css({ 'top': logo.outerHeight(true) + 16, 'bottom': footer.outerHeight(true) });
        }

        if (mode && mode != 'loading' && mode != 'splash' && !screen.is('.app-acc-man-loading'))
            screen.hide().fadeIn();
        if (mode)
            screen.removeClass('app-acc-man-loading app-acc-man-switch').addClass('app-acc-man-' + mode);

        $(items).each(function () {
            var item = this,
                li = $('<li/>').appendTo(list),
                a = $('<a/>').appendTo(li),
                label = $('<div class="app-user-name"></div>').text(item.text).appendTo(a),
                itemContext = item.context,
                photoIcon;
            if (item.icon)
                materialIcon(item.icon, a);
            a.data('context', item);
            if (itemContext) {
                a.addClass('app-avatar');
                var userName = itemContext.UserName;
                label.text(userName);
                if (userName == _app.userName())
                    a.addClass('app-selected');

                if (itemContext.Email)
                    a.append($('<span class="app-user-email"></span>').text(itemContext.Email));
                if (!itemContext.Token)
                    a.append($('<span class="app-user-signed-out"></span>').text(resourcesMobile.SignedOut));

                photoIcon = $('<i class="app-icon-avatar">' + userNameToInitials(userName) + '</i>');
                a.prepend(photoIcon);
                avatar(userName, photoIcon)
                if (item.callback)
                    $('<span class="app-icon material-icon app-btn-more"/>').appendTo(a).attr('title', labelMore);
            }
            if (!item.callback)
                a.addClass('app-link-disabled');
        });

    }

    function requestDataViewSync(dataView, key) {
        dataView._syncKey = key;
        dataView._selectedKey = key;
    }

    function broadcastDataViewChanges(dataView) {
        var affectedController = dataView._controller;
        $(mobile._pages).each(function () {
            var p = this,
                dv = p.dataView;
            if (dv && p.id != dataView._id && !dv.get_isForm() && dv._syncKey == null) {
                if (dv._controller == affectedController)
                    dv._syncKey = true;
                else
                    $(dv._fields).each(function () {
                        if (this.ItemsDataController == affectedController) {
                            dv._syncKey = true;
                            return false;
                        }
                    });
            }
        });
    }

    function highScreenDPI() {
        return screenDPI >= 144;
    }

    function saveTouchPoint(e) {
        if (e.type != 'taphold')
            _lastTouch = touchPoint(e);
    }

    function lastTouchX(defaultValue) {
        return _lastTouch && _lastTouch.x || defaultValue;
    }

    function lastTouchY(defaultValue) {
        return _lastTouch && _lastTouch.y || defaultValue;
    }

    function calcPopupHeight(popup) {
        var arrow = popup.find('.ui-popup-arrow-container');
        return popup.outerHeight() + (arrow.length ? arrow.height() / 2 : 0) + 5 /* tolerance */;
    }

    function checkIfMultiSelect(dataView, link) {
        if (dataView.multiSelect()) {
            var keepSelection;
            if (!link) {
                link = (getActivePageId() == dataView._id ? findActivePage() : getEcho(dataView)/* findActivePage('#' + dataView._id + '_echo')*/).find('.app-listview .ui-btn.app-selected');
                keepSelection = true;
            }
            if (!link.is('.app-checked')) {
                if (dataView._selectedKeyList.length)
                    toggleSelectedRows(dataView, keepSelection);
                toggleRowSelection(dataView, link);
            }
        }
    }

    function ensureModalPageSize(page) {
        var activePage = findActivePage(),
            aw = parseCss(activePage, 'width'),
            ah = parseCss(activePage, 'height'),
            w = parseCss(page, 'width'),
            h = parseCss(page, 'height');
        if (aw != w || ah != h)
            resetPageHeight(page);
    }

    function isModalAndCentered(page) {
        return page.is('.app-page-modal-centered,.app-page-modal-fullscreen,.app-page-modal-fit-content,.app-page-modal-dock');
    }

    function modalSlideGap() {
        return _screen.width > 1200 ? 80 : (_screen.width < 500 ? 40 : 50);
    }

    function arrangeModalPages(toPage, prevPage, reverse) {
        var navStack = navigationHistory.stack,
            prevPageIsModal, right, pageHash, page,
            lastCenteredPage, i,
            glassPane, firstPartialPage,
            leftModalPage,
            leftGlassPane,// = $('.app-page-modal-glass-pane-left'),
            //rightModalPage,
            //rightGlassPane = $('.app-page-modal-glass-pane-right'),
            pageGap = modalSlideGap(),
            modalSizes = [],
            modalPages = [];
        if (!toPage)
            toPage = findActivePage();

        if (!toPage.is('.app-page-modal')) return;

        //lastCenteredPage = toPage;
        pageHash = '#' + toPage.attr('id');
        for (i = navStack.length; i--; i >= 0) {
            var entry = navStack[i],
                page;
            if (modalPages.length) {
                pageHash = entry.hash;
                if (pageHash) {
                    page = $(pageHash);
                    if (!page.length || !page.is('.app-page-modal'))
                        break;
                }
                else
                    break;
            }
            else if (entry.hash == pageHash)
                page = toPage;
            if (page) {
                modalPages.push(page);
                if (isModalAndCentered(page)/* && page != toPage*/)
                    lastCenteredPage = page;
            }
        }
        // the slide closest to the top is the "last centered" page
        if (lastCenteredPage) {
            i = modalPages.indexOf(lastCenteredPage);
            if (i < modalPages.length - 1)
                lastCenteredPage = modalPages[i + 1];
        }

        for (i = 0; i < modalPages.length; i++) {
            page = modalPages[i];
            if (i > 0) {
                if (lastCenteredPage)
                    ensureModalPageSize(page.addClass('app-page-modal-revealed'));
                else {
                    prevPage = modalPages[i - 1];
                    right = _screen.physicalWidth - prevPage.offset().left + pageGap;
                    if (right > _screen.width * 1.75)
                        break;
                    ensureModalPageSize(page.addClass('app-page-modal-partial'));
                    page.css('right', right);
                    if (!firstPartialPage)
                        firstPartialPage = page;
                }
            }
            if (lastCenteredPage) {
                var size = page.css('width') + ',' + page.css('height');
                if (modalPages.length > 1)
                    if (modalSizes.indexOf(size) == -1) {
                        if (lastCenteredPage != page)
                            page.addClass('app-page-modal-centered');
                        modalSizes.push(size);
                    }
                    else
                        page.addClass('app-page-modal-obscured');
            }
            if (lastCenteredPage == page)
                lastCenteredPage = null;
        }

        glassPane = $('.app-page-modal-glass-pane');
        if (!glassPane.length)
            glassPane = $('<div class="app-page-modal-glass-pane"></div>');
        if (firstPartialPage && modalPages.indexOf(firstPartialPage) == 1)
            glassPane.addClass('app-page-modal-glass-pane-partial').css({ right: firstPartialPage.css('right'), top: firstPartialPage.css('top'), height: firstPartialPage.css('height') }).insertAfter(firstPartialPage);
        else
            glassPane.css({ right: 0, top: '', height: '' }).removeClass('app-page-modal-glass-pane-partial').insertBefore(modalPages[0]);




        //if (rightModalPage) {
        //    ensureModalPageSize(rightModalPage.addClass('app-page-modal-partial'));
        //    right = _screenWidth - toPage.offset().left - toPage.outerWidth() - pageGap - rightModalPage.outerWidth();
        //    rightModalPage.css('right', right);
        //    if (!rightGlassPane.show().length)
        //        rightGlassPane = $('<div class="app-page-modal-glass-pane app-page-modal-glass-pane-right"></div>').appendTo($body);
        //    rightGlassPane.css({ right: right, width: rightModalPage.css('width'), height: rightModalPage.css('height'), top: rightModalPage.css('top') });
        //}
        //else
        //    rightGlassPane.hide();

    }

    function pageReady(ui) {
        if (!settings) return;
        useFullscreenWhenSeeAll = false;
        skipTap = false;
        isPageReady = false;
        activeLink();
        transitionStatus(false);
        updateMenuButtonStatus();
        // transition has finished
        //function executePageChangeCallback() {
        //    if (pageChangeCallback) {
        //        pageChangeCallback();
        //        pageChangeCallback = null;
        //        //if (pageInfo && pageInfo.returnCallback) {
        //        //    pageInfo.returnCallback();
        //        //    pageInfo.returnCallback = null;
        //        //}
        //    }
        //}
        var pageInfo = ui.toPageInfo || getPageInfo(),
            dataView,
            uiOptions = ui.options,
            reverse = uiOptions && uiOptions.fromPage && uiOptions.reverse;
        if (pageInfo) {
            if (pageInfo.initCallback) {
                pageInfo.initCallback();
                pageInfo.initCallback = null;
            }
            //else
            //    executePageChangeCallback();
        }
        //else if (isMainPageActive())
        //    executePageChangeCallback();

        mobile.busy(false);

        var toPage = $(ui.toPage),
            toPageIsModal = toPage.is('.app-page-modal'),
            toPageIsPanel = toPage.is('.app-page-panel'),
            prevPage = $(ui.prevPage),
            prevPageIsModal = prevPage.is('.app-page-modal');


        if (!isInTransition) {
            if (pageInfo) {
                //pageInfo = getPageInfo();
                if (pageInfo) {
                    dataView = pageInfo.dataView;
                    if (dataView && dataView._syncKey) {
                        if (dataView._syncKey == true)
                            dataView.sync();
                        else
                            dataView.sync(dataView._syncKey);
                        dataView._syncKey = null;
                        //refreshContext();
                    }
                }
            }
            toPage.find('.app-echo').each(function () {
                var dataViewId = $(this).attr('data-for'),
                    dataView = _app.find(dataViewId);
                if (dataView._syncKey) {
                    if (dataView._syncKey == true)
                        dataView.sync();
                    else
                        dataView.sync(dataView._syncKey);
                    dataView._syncKey = null;
                    //refreshContext();
                }
            });
        }

        // Safari triggers double transition
        if (toPage && prevPage && toPage.attr('id') == prevPage.attr('id'))
            return false;

        calcPageMinWidth(toPageIsPanel ? prevPage : toPage);
        resetPageHeight(toPageIsPanel ? prevPage : toPage);

        if (toPageIsPanel)
            updateSidebarVisibility();

        // page is about to become "ready"

        if (!toPageIsPanel) {

            var navStack = navigationHistory.stack;
            // compress stack when webkit is creating a duplicate entry on "Save and New"
            if (navigationHistory.activeIndex > 1 && navStack[navigationHistory.activeIndex].hash == navStack[navigationHistory.activeIndex - 1].hash)
                navStack.splice(--navigationHistory.activeIndex, 1);


            var modalBackground = mobile._modalBackground;
            if (!prevPageIsModal && toPageIsModal) {
                //prevPage.css('display', 'block');
                prevPage.addClass('app-page-modal-root');
                if (!modalBackground)
                    modalBackground = mobile._modalBackground = $('<div class="app-page-modal-background"></div>');
                modalBackground.insertBefore(toPage).show();
            }
            else if (prevPageIsModal && !toPageIsModal)
                if (modalBackground)
                    modalBackground.hide();

            $('.app-page-modal-partial').removeClass('app-page-modal-partial').css('right', '');
            $('.app-page-modal-revealed,.app-page-modal-centered,.app-page-modal-obscured').removeClass('app-page-modal-revealed app-page-modal-centered app-page-modal-obscured');
            if (toPageIsModal)
                arrangeModalPages(toPage, prevPage, reverse);
            else {
                toPage.removeClass('app-page-modal-root');
                $('.app-page-modal-glass-pane').remove();
            }
        }
        resetPageFooter();

        if (toPageIsPanel)
            displayPageHeader(pageInfo);
        var scrollable = pageInfo && pageInfo.scrollable || findScrollable(toPage);

        yardstick(scrollable.find('.app-listview'));
        setupGridHeaderStyle(scrollable);
        fitTabs(toPage);
        syncEmbeddedViews(scrollable);
        updateScrollbars(scrollable);
        updateMenuStripPosition();

        if (isHosted && !toolbarIsVisible)
            mobile._toolbar.css('visibility', getActivePageId() == 'Main' || findActivePage() && findActivePage().is('.app-page-modal') ? 'hidden' : '');

        stickyHeader(pageInfo ? pageInfo.page : null);
        _input.popup('hide');

        reverse = navigationHistory.activeIndex < navigationHistory.previousIndex;
        moveFooterAboveNotificationBar(true);
        //if (notifyBar && notifyBar.is(':visible'))
        //    findFooterOnActivePage().css({ 'transition': 'transform 200ms ease-in', 'transform': 'translate3d(0,-' + notifyBar.outerHeight() + 'px,0)' });

        if (!toPageIsPanel && pageTransitions() == 'slide' && prevPage)
            pageTransition(prevPage, toPage, reverse, function () {
                pageReadyComplete(pageInfo, reverse);
            });
        else {
            var doDelay = pageInfo && pageInfo.dynamic && !pageInfo.delayed;
            if (doDelay) {
                pageInfo.delayed = true;
                setTimeout(function () {
                    pageReadyComplete(pageInfo, reverse);
                });
            }
            else
                pageReadyComplete(pageInfo, reverse);

        }
    }

    function pageReadyComplete(pageInfo, reverse) {
        var scrollable = pageInfo ? pageInfo.scrollable : null,
            pageReadyEvent = $.Event('pageready.app'), autoFocus, causesCalculate, dataView, odp;
        if (pageInfo) {
            dataView = pageReadyEvent.dataView = pageInfo.dataView;
            createPageTabBar(pageInfo);
        }
        fetchOnDemand(100);
        //setTimeout(function () {
        //    showPresenters(scrollable);
        //}, 200);
        mobile.busy(false);
        $(document).trigger(pageReadyEvent);
        configurePromoButton(pageInfo ? pageInfo.dataView : null);
        refreshContext(false, 0);
        //stickyHeader(pageInfo ? pageInfo.page : null);
        fetchEchos(null, null, pageInfo ? pageInfo.scrollable.find('.app-echo') : null);

        if (!isTouchPointer)
            setTimeout(function () {
                if ((!$(document.activeElement).closest('[data-control]').length || reverse) && scrollable) {
                    focusScrollable(scrollable);
                    if (autoFocus != false)
                        if (scrollable.find('[data-input-container]').length)
                            _input.focus({ container: scrollable, lastFocused: reverse == true });
                }
                //$(findActivePage()).find('.app-wrapper').focus();
            });
        if (pageInfo) {
            odp = dataView && dataView.odp;
            autoFocus = pageInfo.autoFocus;
            pageInfo.autoFocus = true;
            causesCalculate = pageInfo.calculate;
            if (causesCalculate) {
                delete pageInfo.calculate;
                //dataView = pageInfo.dataView;
                causesCalculate = dataView.findField(causesCalculate);
                dataView._raiseCalculate(causesCalculate, causesCalculate);
            }
        }

        //enablePointerEvents(true);
        mobile.garbageCollector();
        if (reverse) {
            var entry = navigationHistory.stack[navigationHistory.activeIndex + 1],
                canceledPageId = entry && entry.hash;
            if (canceledPageId && canceledPageId.match(/^#/)) {
                var prevPageInfo = mobile.pageInfo(canceledPageId.substring(1));
                if (prevPageInfo)
                    $(canceledPageId).trigger('pagecanceled.app');
            }
        }
        // switch "offline transaction root" to edit mode when possible
        if (odp && odp.is(':active') && odp.root(dataView) && dataView.get_isForm() && !dataView.editing()) {
            isInTransition = true;
            mobile.executeInContext(toMaterialIcon('edit'));
            isInTransition = false;
        }
        isPageReady = true;
    }

    function createPageTabBar(pageInfo) {
        if (pageInfo && pageInfo.home && !pageInfo.tabBar) {
            pageInfo.tabBar = createTabBar();
            showHideTabBar(pageInfo, true);
        }
    }

    function createMainTabBar() {
        if (!mobile._tabBar) {
            mobile._tabBar = createTabBar();
            showHideTabBar(null, true);
        }
    }

    function createTabBar() {
        var tabBarItems = mobile._tabBarItems,
            footer, tabBar, ul, li;
        if (!tabBarItems) {
            tabBarItems = mobile._tabBarItems = [], items = [];
            enumerateMenuItems(items, true);

            $(items).each(function (index) {
                var item = this;
                if (item.icon && item.context)
                    tabBarItems.push(item);
                else {
                    tabBarItems.splice(index);
                    return false;
                }
            });
        }
        if (tabBarItems.length > 1 && $settings('ui.menu.tabbar') != false) {
            footer = mobile.bar('create', {
                type: 'footer', page: findActivePage()
            });
            if (!footer.length) return null;
            tabBar = $('<div class="app-bar-tabs" data-location="bottom"></div>').hide().appendTo(footer);
            ul = $('<ul>').appendTo(tabBar);
            tabBarItems.forEach(function (item) {
                li = $('<li data-tooltip-location="above">').appendTo(ul).data('item', item).css('width', Math.floor(100 / tabBarItems.length) + '%');
                materialIcon(item.icon, li);
                $('<span/>').appendTo(li).text(item.text);
                li.attr('title', item.tooltip);
                var selected = item.context.selected;
                if (selected)
                    $(item.context.children).each(function () {
                        if (this.selected)
                            selected = false;
                    });
                if (selected)
                    li.addClass('app-selected');
            });
            tabBar.data('items', tabBar.find('li'));
        }
        return tabBar;
    }

    function tabBarIsVisible() {
        var menuTabBar = $settings('ui.menu.tabbar'),
            sideBarWhen = mobile._uiSideBarWhen,
            allowSideBar = sidebarIsAllowed();
        if (allowSideBar) {
            if (sideBarWhen == 'Never')
                allowSideBar = false;
            else if (sideBarWhen == 'Landscape' && _screen.width < _screen.height)
                allowSideBar = false;
        }
        return menuTabBar == true || menuTabBar != false && (!appBars.left.visible && !allowSideBar);
    }

    function showHideTabBar(pageInfo, autoTrim) {
        var tabBar = pageInfo ? pageInfo.tabBar : mobile._tabBar, isVisible,
            last, offset, visible;
        if (tabBar && tabBar.length) {
            visible = tabBarIsVisible();
            isVisible = tabBar.is(':visible');
            if (visible && !isVisible || !visible && isVisible)
                mobile.bar(visible ? 'show' : 'hide', tabBar);
            if (visible && autoTrim) {
                var li, items = tabBar.data('items'),
                    liWidth = items.first().outerWidth(),
                    tabCount = mobile._tabBarItems.length,
                    maxTabCount = Math.floor(tabBar.width() / liWidth);
                if (tabBar.data('more')) {
                    tabBar.data('more').remove();
                    tabBar.removeData('more');
                    items.show();
                }
                if (tabCount > maxTabCount) {
                    li = $('<li data-tooltip-location="above" class="app-has-icon">').appendTo(tabBar.find('ul')).attr('title', labelMore);
                    //materialIcon('material-icon-more-horiz', li)
                    $('<i class="app-icon material-icon material-icon-more"></i>').appendTo(li);
                    tabBar.data('more', li);
                    items.filter(':gt(' + (maxTabCount - 2) + ')').hide();
                    $('<span>').appendTo(li).text(labelMore);
                    if (!items.filter(visibleFilterFunc).filter('.app-selected').length)
                        li.addClass('app-selected');
                }

            }
            syncMenuStripWithVisibleTabBar(visible);
        }
        return visible;
    }

    function syncMenuStripWithVisibleTabBar(visible) {
        if (visible == null)
            visible = tabBarIsVisible();
        $body.toggleClass('app-has-complete-tabbar', visible && Web.Menu.nodeCount == Web.Menu.nodesWithIcons.length);
    }

    function syncMenuStripWithVisibleSidebar() {
        var nodeCountInSidebar = Web.Menu.nodeCountInSidebar;
        if (nodeCountInSidebar)
            $body.toggleClass('app-has-complete-toolbar-in-sidebar', appBars.left.visible && Web.Menu.nodeCount == nodeCountInSidebar);
    }

    function pageTransition(prevPage, toPage, reverse, callback) {
        var prevPageIsModal = prevPage.is('.app-page-modal'),
            toPageIsModal = toPage.is('.app-page-modal'),
            prevPageIsSlide, prevPageIsCentered, toPageIsCentered,
            pageSet, pageSetSlideDistance,
            backText = mobile._backText,
            cleanup,
            transitionCount = 0;

        function transitionEnd() {
            transitionCount--;
            if (transitionCount == 0) {
                if (cleanup)
                    cleanup();
                if (transitionCount == 0) {
                    callback();
                    skipTap = false;
                }
            }
        }

        function start(element, styleProperties) {

            if (element.is(':visible')) {
                transitionCount++;
                element.one('transitionend', transitionEnd).css(styleProperties);
            }
        }

        function animation(options) {
            skipTap = true;
            cleanup = options.done;
            options.position();
            setTimeout(function () {
                options.transition();
                setTimeout(function () {
                    $(options.run).each(function () {
                        var runDef = this,
                            options = {};
                        for (var key in runDef)
                            if (key != 'element')
                                options[key] = runDef[key];
                        start(runDef.element, options);
                    });
                }, 16);
            }, 16);
        }


        mobile.busy(true);
        refreshContext(true);

        if (prevPageIsModal)
            if (toPageIsModal) {
                prevPageIsSlide = prevPage.is('.app-page-modal-partial');
                prevPageIsCentered = isModalAndCentered(prevPage);
                toPageIsCentered = isModalAndCentered(toPage);
                if (reverse) {
                    if (prevPageIsCentered || toPageIsCentered)
                        // fade-out from modal to modal
                        animation({
                            position: function () {
                                prevPage.addClass('app-page-revealed').css({ opacity: 1 });
                            },
                            transition: function () {
                                prevPage.addClass('app-transition-fade-out');
                            },
                            run: [{ element: prevPage, opacity: 0 }],
                            done: function () {
                                prevPage.removeClass('app-transition-fade-out app-page-revealed').css({ opacity: '' });
                            }
                        });
                    else {
                        // slide back from one modal to another
                        pageSet = $('.app-page-modal-partial').add(toPage);
                        pageSetSlideDistance = parseCss(toPage, 'width') + modalSlideGap();
                        var prevPageLeft = parseCss(prevPage, 'left') + pageSetSlideDistance;
                        animation({
                            position: function () {
                                prevPage.css('left', prevPageLeft).addClass('app-page-revealed');
                                prevPage.css({ transform: 'translate3d(' + -pageSetSlideDistance + 'px,0,0)' });
                                pageSet.css({ transform: 'translate3d(' + -pageSetSlideDistance + 'px,0,0)' });
                            },
                            transition: function () {
                                pageSet.addClass('app-transition-slide');
                                prevPage.addClass('app-transition-slide');
                            },
                            run: [
                                { element: prevPage, transform: 'translate3d(' + (_screen.physicalWidth - prevPageLeft + modalSlideGap()) + 'px,0,0)' },
                                { element: pageSet, transform: '' }
                            ],
                            done: function () {
                                pageSet.removeClass('app-transition-slide').css({ transform: '', transition: '' });
                                prevPage.removeClass('app-transition-slide app-page-revealed').css({ left: '', transform: '', transition: '' });
                            }
                        });
                    }
                }
                else {
                    if (toPageIsCentered || prevPageIsCentered) {
                        // fade in from modal to modal
                        var isObscured = prevPage.is('.app-page-modal-obscured');
                        animation({
                            position: function () {
                                if (isObscured)
                                    prevPage.toggleClass('app-page-modal-obscured app-page-modal-centered');
                                toPage.css({ opacity: 0 });
                            },
                            transition: function () {
                                toPage.addClass('app-transition-fade-in');
                            },
                            run: [{ element: toPage, opacity: '' }],
                            done: function () {
                                toPage.removeClass('app-transition-fade-in');
                                if (isObscured)
                                    prevPage.toggleClass('app-page-modal-obscured app-page-modal-centered');
                            }
                        });
                    }
                    else {
                        // slide forward from one modal to another
                        pageSet = $('.app-page-modal-partial').add(toPage);
                        animation({
                            position: function () {
                                pageSetSlideDistance = parseCss(toPage, 'width') + modalSlideGap();
                                pageSet.css({ transform: 'translate3d(' + pageSetSlideDistance + 'px,0,0)' });
                                pageSet = $(pageSet.get().reverse());
                            },
                            transition: function () {
                                pageSet.addClass('app-transition-slide');
                            },
                            run: [{ element: pageSet, transform: '' }],
                            done: function () {
                                pageSet.removeClass('app-transition-slide').css({ transform: '', transition: '' });
                            }
                        });
                    }
                }
            }
            else {
                // fade out from modal to a non-modal
                modalBackground = mobile._modalBackground;
                animation({
                    position: function () {
                        modalBackground.show().css({ opacity: 1 });
                        prevPage.addClass('app-page-revealed').css({ opacity: 1 });
                    },
                    transition: function () {
                        prevPage.addClass('app-transition-fade-out');
                        modalBackground.addClass('app-transition-fade-out');
                    },
                    run: [
                        { element: prevPage, opacity: 0 },
                        { element: modalBackground, opacity: 0 }
                    ],
                    done: function () {
                        prevPage.removeClass('app-transition-fade-out app-page-revealed').css({ opacity: '' });
                        modalBackground.hide().removeClass('app-transition-fade-out').css({ opacity: '' });
                    }
                });
            }
        else if (toPageIsModal) {
            // first modal page on the semi-transparent background
            var modalBackground = mobile._modalBackground;
            animation({
                position: function () {
                    toPage.css({ opacity: 0 });
                    modalBackground.css({ opacity: 0 })
                },
                transition: function () {
                    toPage.addClass('app-transition-fade-in');
                    modalBackground.addClass('app-transition-fade-in');
                },
                run: [
                    { element: toPage, opacity: '' },
                    { element: modalBackground, opacity: '' }
                ],
                done: function () {
                    toPage.removeClass('app-transition-fade-in');
                    modalBackground.removeClass('app-transition-fade-in');
                }
            });
        }
        else {
            // fullscreen => fullscreen
            if (prevPage.length) {
                if (prevPage.is('#Main') && !_window.location.hash)
                    // the first page of SPA
                    callback();
                else {
                    // slide fullscreen on "large" 
                    var pageWidth = parseCss(toPage, 'width');
                    if (pageWidth > toPhysicalWidth('md'))
                        if (reverse)
                            animation({
                                position: function () {
                                    toPage.addClass('app-transition-slide-background');
                                    prevPage.addClass('app-page-revealed').css({ transform: 'translate3d(0,0,0)', 'z-index': 2, opacity: 1 });
                                    backText.css({ transform: 'translate3d(-' + parseCss(backText, 'width') + 'px,0,0)', opacity: 0 });
                                },
                                transition: function () {
                                    prevPage.addClass('app-transition-slide-peel-out');
                                    backText.addClass('app-transition-slide-and-reveal');
                                },
                                run: [
                                    { element: prevPage, transform: 'translate3d(' + 200/*Math.ceil(pageWidth * .2)*/ + 'px,0,0)', opacity: 0 },
                                    { element: backText, transform: '', opacity: '' }
                                ],
                                done: function () {
                                    toPage.removeClass('app-transition-slide-background');
                                    prevPage.removeClass('app-transition-slide-peel-out app-page-revealed').css({ transform: '', 'z-index': '', opacity: '' });
                                    backText.removeClass('app-transition-slide-and-reveal');
                                }
                            });
                        else
                            // slide fullscreen on "medium and below"
                            animation({
                                position: function () {
                                    toPage.css({ transform: 'translate3d(' + 200/*Math.ceil(pageWidth * .2)*/ + 'px,0,0)' });
                                    prevPage.addClass('app-transition-slide-background app-page-revealed');
                                    backText.css({ transform: 'translate3d(' + parseCss(backText, 'width') + 'px,0,0)', opacity: 0 });
                                },
                                transition: function () {
                                    toPage.addClass('app-transition-slide-peel-in');
                                    //prevPage.addClass('app-transition-slide-background');
                                    backText.addClass('app-transition-slide-and-reveal');
                                },
                                run: [
                                    { element: toPage, transform: '' },
                                    //  { element: prevPage, transform: 'translate3d(' + (reverse ? 1 : -1) * parseCss(prevPage, 'width') + 'px,0,0)' },
                                    { element: backText, transform: '', opacity: '' }
                                ],
                                done: function () {
                                    prevPage.removeClass('app-transition-slide-background app-page-revealed');
                                    toPage.removeClass('app-transition-slide-peel-in').css({ transform: '', transition: '', 'z-index': '' });
                                    backText.removeClass('app-transition-slide-and-reveal').css({ transform: '', opacity: '' });
                                }
                            });
                    else
                        animation({
                            position: function () {
                                toPage.css({ transform: 'translate3d(' + (reverse ? -1 : 1) * pageWidth + 'px,0,0)', 'z-index': 2 });
                                prevPage.addClass('app-page-revealed');
                                backText.css({ transform: 'translate3d(' + (reverse ? -1 : 1) * parseCss(backText, 'width') + 'px,0,0)', opacity: 0 });
                                //if (chrome || true) {
                                //    // If the page headers and toolbar are colorful then this will create a thin divider between pages and below the toolbar on Chrome.
                                //    // Element app-bar-tools-transition creates a solid background under the two moving pages. 
                                //    var fixedHeader1 = toPage.find('.app-page-header-fixed'),
                                //        fixedHeader2 = prevPage.find('.app-page-header-fixed'),
                                //        wrapper1 = findScrollable(toPage),
                                //        wrapper2 = findScrollable(prevPage);
                                //    $('<span class="app-bar-tools-transition"/>').insertAfter(mobile._toolbar).css({
                                //        //'background-color': mobile._toolbar.css('background-color'),
                                //        height: Math.max(fixedHeader1.length ? fixedHeader1.offset().top + fixedHeader1.outerHeight() - wrapper1.scrollTop() : 0, fixedHeader2.length ? fixedHeader2.offset().top + fixedHeader2.outerHeight() - wrapper2.scrollTop() : 0)
                                //    });
                                //}
                            },
                            transition: function () {
                                backText.addClass('app-transition-slide-and-reveal');
                                prevPage.addClass('app-transition-slide');
                                toPage.addClass('app-transition-slide2');
                            },
                            run: [
                                { element: toPage, transform: '' },
                                { element: prevPage, transform: 'translate3d(' + (reverse ? 1 : -1) * parseCss(prevPage, 'width') + 'px,0,0)' },
                                { element: backText, transform: '', opacity: '' }
                            ],
                            done: function () {
                                prevPage.removeClass('app-transition-slide app-page-revealed').css({ transform: '' });
                                toPage.removeClass('app-transition-slide2').css({ transform: '', transition: '' });
                                backText.removeClass('app-transition-slide-and-reveal').css({ transform: '', opacity: '' });
                                //$('.app-bar-tools-transition').remove();
                            }
                        });
                }
            }
            else
                // this is the first page
                callback();
        }
    }

    // Forms Engine Implementation

    function generateLayout(dataView, physicalWidth) {
        var view = dataView.get_view(),
            firstField,
            layout,
            scrollableWidth,
            stepList = [], stepMap = {}, hasWizardSteps,
            triedCustomActions,
            dynamicCategories = [], dynamicFields = [];
        // enumerate categories with dynamic visibility
        $(dataView._expressions).each(function () {
            var exp = this,
                scope = exp.Scope,
                target = exp.Target;
            if (scope == 2)
                dynamicCategories.push(target);
            if (scope == 3)
                dynamicFields.push(target);
        });
        // map categories to the wizard steps
        $(dataView._categories).each(function (index) {
            var catDef = this,
                wizardStep = catDef.Wizard,
                newRow = index == 0 || catDef.Flow == 'NewRow', row,
                step;
            if (wizardStep)
                hasWizardSteps;
            else if (hasWizardSteps)
                wizardStep = '_after_';
            else
                wizardStep = '_before_';
            step = stepMap[wizardStep];
            if (!step) {
                step = { text: wizardStep, /*categories: [], */rows: [] };
                stepMap[wizardStep] = step;
                stepList.push(step);
                newRow = true;
            }
            if (newRow) {
                row = { categories: [] };
                step.rows.push(row);
            }
            else
                row = step.rows[step.rows.length - 1];
            //step.categories.push(catDef);
            row.categories.push(catDef);
        });
        $(stepList).each(function () {
            var step = this;
            $(step.rows).each(function () {
                var row = this,
                    tabList = [],
                    tabMap = {}, categoryMap = {};
                $(row.categories).each(function () {
                    // generate a set of tabs
                    var catDef = this,
                        tabText = catDef.Tab,
                        t = tabMap['t_' + tabText],
                        c,
                        category = { id: catDef.Id, headerText: catDef.HeaderText, desc: catDef.Description, collapsed: catDef.Collapsed, fields: [], floating: catDef.Floating, wrap: catDef.Wrap, dataViewCount: 0 };
                    if (!t) {
                        c = { categories: [] };
                        t = { text: catDef.Tab, columns: [c] };
                        tabMap['t_' + tabText] = t;
                        tabList.push(t);
                    }
                    else {
                        if (catDef.Flow == 'NewColumn') {
                            c = { categories: [] };
                            t.columns.push(c);
                        }
                        else
                            c = t.columns[t.columns.length - 1];
                    }
                    categoryMap[catDef.Index] = category;
                    c.categories.push(category);
                });
                $(dataView._fields).each(function () {
                    var f = this,
                        cat = categoryMap[f.CategoryIndex];
                    if (cat) {
                        cat.fields.push(f);
                        if (f.Type == 'DataView')
                            cat.dataViewCount++;
                    }
                });
                row.tabList = tabList;
            });
        });
        // render a layout
        layout = ['<div data-layout="form" data-layout-size="' + toLogicalWidth(physicalWidth) + '">'];

        function generateCustomActions(requiresContainer) {
            if (!triedCustomActions) {
                var actions = [];
                $(dataView.get_actions('Custom')).each(function () {
                    var a = this;
                    if (dataView._isActionMatched(a, true))
                        actions.push(a);
                });
                if (actions.length) {
                    if (requiresContainer)
                        layout.push('<div data-container="collapsible" data-wrap="false" data-header-text="none">');
                    layout.push('<div data-container="row">');
                    $(actions).each(function () {
                        layout.push('<span data-control="action" data-action="' + this.Path + '"><span class="app-control-inner"/></span>');
                    });
                    layout.push('</div>');
                    if (requiresContainer)
                        layout.push('</div>');
                }
                triedCustomActions = true;
            }
        }

        $(stepList).each(function () {
            var step = this,
                stepText = step.text,
                requiresStepContainer = !stepText.match(/^\_(before|after)\_$/);
            if (requiresStepContainer) {
                layout.push('<div data-container="wizard" data-wizard-step="' + _app.htmlAttributeEncode(stepText) + '">');
                generateCustomActions(true);
            }
            $(step.rows).each(function () {
                var row = this,
                    tabList = row.tabList,
                    hasTabs = tabList.length > 1;
                if (hasTabs)
                    generateCustomActions(true);
                if (hasTabs)
                    layout.push('<div data-container="tabset">');
                $(tabList).each(function () {
                    var t = this,
                        tabColumns = t.columns,
                        hasColumns = t.columns.length > 1;
                    if (hasTabs)
                        layout.push('<div data-container="tab" data-tab-text="' + _app.htmlAttributeEncode(t.text) + '">');
                    $(tabColumns).each(function () {
                        var c = this,
                            columnRelWidth = (100 / tabColumns.length - 1),
                            colWidth = hasColumns ? physicalWidth * columnRelWidth / 100 : physicalWidth;
                        if (hasColumns && colWidth <= toPhysicalWidth('tn'))
                            hasColumns = false;

                        if (hasColumns) {
                            generateCustomActions(true);
                            layout.push('<div data-container="column" style="width:' + columnRelWidth + '%">');
                        }
                        $(c.categories).each(function () {
                            var cat = this,
                                catDesc = cat.desc,
                                categoryVisibilityMarker = ' data-visibility="c:' + cat.id + '"',
                                skipRowAndCollapsible = hasTabs && c.categories.length == 1 && cat.dataViewCount == cat.fields.length,
                                description = catDesc && catDesc.replace(/\{([\w+\_]+)\}/g, '<span data-control="field" data-field="$1" data-read-only="true"><span class="app-control-inner">&#160;</span></span>'),//dataView._processTemplatedText(row, catDesc),
                                descriptionText = description && dataView._formatViewText(resourcesViews.DefaultCategoryDescriptions[description], true, description),
                                doWrap = cat.wrap == true || (hasColumns ? colWidth : physicalWidth) <= toPhysicalWidth('xs'),
                                isDynamicCategory = dynamicCategories.indexOf(cat.id) != -1;
                            if (skipRowAndCollapsible) {
                                if (cat.dataViewCount > 1)
                                    layout.push('<div data-container="simple"' + (isDynamicCategory ? categoryVisibilityMarker : '') + '>');
                            }
                            else
                                layout.push('<div data-container="collapsible" data-wrap="' + (doWrap ? 'true' : 'false')
                                    + /*'" x="' + colWidth + '"' +*/ '" data-header-text="' + (cat.headerText || 'none') + '"'
                                    + (cat.collapsed ? 'data-collapsed="true" ' : '') + (isDynamicCategory ? categoryVisibilityMarker : '') + '>');
                            generateCustomActions();
                            if (catDesc) {
                                if (!skipRowAndCollapsible)
                                    layout.push('<div data-container="row">');
                                layout.push('<div data-control="description"><span class="app-control-inner">' + descriptionText + '</span></div>');
                                if (!skipRowAndCollapsible)
                                    layout.push('</div>');
                            }
                            var catFieldGroupList = [],
                                catFieldGroup = [],
                                numberOfColumnsInRow = 1;
                            $(cat.fields).each(function () {
                                var f = this;
                                if (f.Type == 'DataView') {
                                    if (catFieldGroup.length)
                                        catFieldGroupList.push(catFieldGroup);
                                    catFieldGroupList.push([f]);
                                    catFieldGroup = [];
                                }
                                else
                                    catFieldGroup.push(f);
                            });
                            if (!hasColumns && cat.floating) {
                                if (cat.wrap) {
                                    if (toPhysicalWidth('sm') <= physicalWidth)
                                        numberOfColumnsInRow = 2;
                                    if (toPhysicalWidth('md') <= physicalWidth)
                                        numberOfColumnsInRow = 3;
                                    if (toPhysicalWidth('lg') <= physicalWidth)
                                        numberOfColumnsInRow = 4;
                                }
                                else {
                                    if (toPhysicalWidth('md') <= physicalWidth)
                                        numberOfColumnsInRow = 2;
                                    if (toPhysicalWidth('xl') <= physicalWidth)
                                        numberOfColumnsInRow = 3;
                                }
                                numberOfColumnsInRow = Math.min(numberOfColumnsInRow, cat.fields.length);
                            }
                            if (catFieldGroup.length)
                                catFieldGroupList.push(catFieldGroup);
                            $(catFieldGroupList).each(function () {
                                var catFields = this,
                                    numberOfFields = catFields.length;
                                var numberOfRows = Math.ceil(numberOfFields / numberOfColumnsInRow);
                                for (var rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {
                                    if (skipRowAndCollapsible)
                                        layout.push('<div data-container="simple"');
                                    else
                                        layout.push('<div data-container="row"' + (numberOfColumnsInRow > 1 ? (' data-columns="' + numberOfColumnsInRow + '"') : ''));
                                    var controls = [];
                                    for (var colIndex = 0; colIndex < numberOfColumnsInRow; colIndex++) {
                                        var f = catFields[rowIndex + colIndex * numberOfRows];
                                        if (f) {
                                            var isDataView = f.Type == 'DataView',
                                                fieldName = f.Name, headerText = f.HeaderText,
                                                isDynamicField = dynamicFields.indexOf(fieldName) != -1,
                                                fieldVisibilityMarker = isDynamicField ? (' data-visibility="f:' + fieldName + '"') : '';
                                            if (skipRowAndCollapsible) {
                                                if (isDynamicField)
                                                    layout.push(fieldVisibilityMarker);
                                                else if (isDynamicCategory)
                                                    layout.push(categoryVisibilityMarker);
                                            }
                                            else if (numberOfColumnsInRow == 1 && isDynamicField)
                                                layout.push(fieldVisibilityMarker);

                                            if (doWrap && numberOfColumnsInRow > 1)
                                                controls.push('<span class="app-field-group">');

                                            if (!isDataView && (!doWrap || headerText && headerText != '&nbsp;'))
                                                controls.push('<span data-control="label" data-field="' + fieldName + '"' + (numberOfColumnsInRow > 1 ? fieldVisibilityMarker : '') + '><span class="app-control-inner">' + fieldName + '</span></span>');
                                            controls.push('<span data-control="' + (isDataView ? 'dataview' : 'field') + '" data-field="' + fieldName + '"' + (numberOfColumnsInRow > 1 ? fieldVisibilityMarker : '') + (f.is('focus-auto') ? ' data-focus="true"' : '') + '><span class="app-control-inner">[' + fieldName + ']</span></span>');
                                            if (doWrap && numberOfColumnsInRow > 1)
                                                controls.push('</span>');

                                            if (!firstField)
                                                firstField = f;
                                        }
                                    };
                                    layout.push('>');
                                    $(controls).each(function () {
                                        layout.push(this);
                                    });
                                    layout.push('</div>');
                                }
                            });
                            if (skipRowAndCollapsible) {
                                if (cat.dataViewCount > 1)
                                    layout.push('</div>');
                            }
                            else
                                layout.push('</div>');
                        });
                        if (hasColumns)
                            layout.push('</div>');
                    });
                    //if (wrapColumns)
                    //    layout.push('</div>');
                    if (hasTabs)
                        layout.push('</div>');
                });
                if (hasTabs)
                    layout.push('</div>');
            });
            if (requiresStepContainer)
                layout.push('</div>');
        });
        //if (firstField && !dataView.tagged('sticky-header-form-disabled') && !allowModal(dataView))
        //    layout.splice(1, 0, '<div data-container="stickyheader"><span data-control="field" data-field="' + firstField.Name + '" data-read-only="true"><span class="app-control-inner">&#160;</span></span></div>');
        layout.push('</div>');
        layout = layout.join('\r\n');
        return layout;
    }

    //function doShowHideEchosInContainer(container, show) {
    //    $(container.children).each(function () {
    //        var c = this,
    //            echo;
    //        if (c.echoSelector) {
    //            echo = $(c.echoSelector);
    //            if (show) {
    //                echo.show();
    //                positionEmbeddedEchos(c);
    //                fetchEchos(false, 100);
    //            }
    //            else
    //                echo.hide();
    //        }
    //        if (c.children.length)
    //            doShowHideEchosInContainer(c, show);
    //    });
    //}

    function toLogicalWidth(w) {
        var lw;
        if (w >= 1366)
            lw = 'xxl'
        else if (w >= 1200)
            lw = 'xl';
        else if (w >= 992)
            lw = 'lg';
        else if (w >= 768)
            lw = 'md';
        else if (w >= 576)
            lw = 'sm';
        else if (w >= 480)
            lw = 'xs';
        else if (w >= 320)
            lw = 'xxs';
        else
            lw = 'tn';
        return lw;
    }

    function toMaxPhysicalWidth(w) {
        var sizeIndex = screenBreakpoints.indexOf(w);
        if (sizeIndex == -1)
            return _screen.width;
        return toPhysicalWidth(screenBreakpoints[Math.min(screenBreakpoints.length - 1, sizeIndex + 1)]) - 1;
    }

    function toPhysicalWidth(w) {
        switch (w) {
            case 'tn':
                return 280;
            case 'xxs':
                return 320;
            case 'xs':
                return 480;
            case 'sm':
                return 576;
            case 'md':
                return 768;
            case 'lg':
                return 992;
            case 'xl':
                return 1200;
            case 'xxl':
                return 1366;
            default:
                return _screen.width;
        }
    }

    function createLayout(dataView, physicalWidth/*, target*/) {
        var logicalWidth = toLogicalWidth(physicalWidth),
            layoutId = dataView._controller + '_' + dataView._viewId + '_' + dataView._filterFields + '_layout_' + logicalWidth + (allowModal(dataView) ? '_m' : ''),
            l = _app.cache[layoutId],
            survey = dataView.survey();
        if (!l) {
            var layout = dataView.get_view().Layout,
                layoutElem;
            if (layout) {
                var tempLayout = $('<div>' + layout + '</div>'),
                    layoutList = tempLayout.find('[data-layout]');

                if (layoutList.length) {
                    var layoutElemSizeIndex,
                        maxSizeIndex = screenBreakpoints.indexOf(logicalWidth);
                    layoutList.each(function () {
                        var l = $(this),
                            lw = l.attr('data-layout-size') || 'tn',
                            lwIndex = screenBreakpoints.indexOf(lw);
                        if (lwIndex != -1 && lwIndex <= maxSizeIndex && (!layoutElem || lwIndex > layoutElemSizeIndex)) {
                            layoutElem = l;
                            layoutElemSizeIndex = lwIndex;
                        }
                    });
                }
                else {
                    layoutElem = $('<div data-layout="form"></div>');
                    $(tempLayout.html()).appendTo(layoutElem);
                }
            }
            if (!layoutElem)
                layout = generateLayout(dataView, physicalWidth);
            else {
                //layoutElem.detach();
                //tempLayout.remove();
                layoutElem.find('[data-control]').each(function () {
                    var c = $(this),
                        contents = c.contents().remove();
                    contents.appendTo($('<span class="app-control-inner"/>').appendTo(c));
                });
                layout = $('<div></div>').append(layoutElem.clone()).html();
            }
            l = { html: layout };
            if (!survey || !(survey.dynamic || !survey.cache))
                _app.cache[layoutId] = l;
        }
        layoutElem = $(l.html);
        layoutElem.attr('data-input-container', dataView._id);
        dataView._isWizard = layoutElem.find('[data-container="wizard"]').length > 0;
        //if (target.is('.app-wrapper'))
        //    layoutElem.appendTo(target);
        //else
        //    layoutElem.insertAfter(target);
        return layoutElem;
    }

    /*
     
    function refreshLayout(container) {
        if (!container)
            container = findActivePage();
        container.find('[data-input-container]').each(function () {
            var oldLayoutElem = $(this),
                dataView, extension,
                row,
                layout,
                layoutElem;
            if (!oldLayoutElem.data('prepared'))
                return;
     
     
            //oldLayoutElem.find('[data-control="dataview"]').each(function () {
            //    var ph = $(this),
            //        id = ph.attr('id'),
            //        echo = $('.app-echo[data-for="' + id.substring(0, id.length - 3) + '"]');
            //    echo.hide();
            //});
            dataView = _app.find(oldLayoutElem.attr('data-input-container'));
     
     
            //_input.render({ container: oldLayoutElem, dataView: dataView, fit: true });
     
     
     
            extension = dataView.extension();
            row = dataView.editRow();
            layout = generateLayout(dataView, scrollable),
            layoutElem = createLayout(dataView, layout, oldLayoutElem);
     
            //if (showActionButtons != 'None')
            //    mobile.refreshAppButtons(context, { buttonBars: content.find('.app-bar-buttons'), toolbar: false });
     
            if (layoutElem) {
                mobile.tabs('destroy', { container: oldLayoutElem });
                extension._disposeLayout(oldLayoutElem);
                oldLayoutElem.remove();
                prepareLayout(dataView, row, layoutElem);
                evaluateConditionalStyleExpressions(dataView, row, layoutElem);
                mobile.tabs('fit', { container: layoutElem });
                // refresh app buttons
                var context = [];
                extension.context(context);
                mobile.refreshAppButtons(context, {
                    buttonBars: layoutElem.parent().find('.app-bar-buttons'), layout: layoutElem, toolbar: false
                });
            }
        });
    }*/

    function prepareLayout(dataView, row, layout) {
        var allFields = dataView._allFields,
            isForm = dataView.get_viewType() == 'Form',
            layoutOffset = layout.offset(),
            containers = [],
            containerNodes = [],
            controls = [],
            controlNodes = [],
            rootNodes = [],
            dataViewFields = {},
            scrollable = findScrollable(layout),
            extension = dataView.extension(),
            editing = extension.editing();


        //var result,
        //    t = +new Date();
        layout.data('prepared', true);

        layout.find('[data-visible-when]').each(function (index) {
            var container = $(this),
                expressions = dataView._expressions,
                visibleWhen = container.attr('data-visible-when'),
                isCategory = container.parent().is('[data-container="wizard"]'),
                exp = { Scope: isCategory ? 2 : 7, Target: index, Test: visibleWhen, Type: 1, ViewId: dataView._viewId };
            if (!expressions)
                expressions = dataView._expressions = [];
            expressions.push(exp);
            container.attr({ 'data-visible-when': null, 'data-visibility': (isCategory ? 'c:' : 'v:') + exp.Target });
        });


        _input.evaluate({ dataView: dataView, row: row, container: layout, ignoreDynamicButtons: true });

        // TO-DO: 
        //var superContainer = $('<div/>').width(layout.outerWidth(true)).insertBefore(layout);
        //layout.appendTo(superContainer);

        function enumerateComponents(element, parentContainerElement, parentContainerNode/*, parentContainerOffset*/) {
            if (!element.getAttribute) return;
            var controlType = element.getAttribute('data-control'),
                containerType = !controlType && element.getAttribute('data-container'),
                i, childNodes = element.childNodes,
                c,
                offset,
                width,
                node;
            if (controlType && parentContainerElement) {
                controls.push(element);
                c = $(element);
                offset = c.offset();
                node = {
                    self: c, parent: parentContainerNode, type: controlType, children: []//,
                    //position: c.css('position'),
                    //left: offset.left - parentContainerOffset.left - 1, top: offset.top - parentContainerOffset.top - 1,
                    //width: c.width(), outerWidth: c.outerWidth(true), height: c.height(), outerHeight: c.outerHeight(true)
                };
                //node.right = node.left + node.outerWidth - 1;
                //node.bottom = node.top + node.outerHeight - 1;
                controlNodes.push(node);
                parentContainerNode.children.push(node);
                c.data('node', node);

            }
            else if (containerType) {
                containers.push(element);
                c = $(element);
                //offset = c.offset();
                //width = c.width();
                node = {
                    /*id: containers.length, */self: c, children: [], type: containerType
                    //position: c.css('position'),
                    //left: Math.round(Math.max(0, offset.left - (parentContainerElement ? parentContainerOffset.left : layoutOffset.left) - 1)),
                    //top: Math.round(offset.top - (parentContainerElement ? parentContainerOffset.top : layoutOffset.top)),
                    //width: width, height: c.height(), outerHeight: c.outerHeight(true), outerWidth: c.outerWidth(true)
                };
                //node.right = node.left + node.outerWidth - 1;
                //node.bottom = node.top + node.outerHeight - 1;
                c.data('node', node);
                containerNodes.push(node);
                if (parentContainerElement) {
                    node.parent = parentContainerNode;
                    parentContainerNode.children.push(node);
                }
                else
                    rootNodes.push(node);
            }

            for (i = 0; i < childNodes.length; i++)
                enumerateComponents(childNodes[i], containerType ? element : parentContainerElement, containerType ? node : parentContainerNode, null/* containerType ? offset : parentContainerOffset*/);
        }
        enumerateComponents(layout[0]);

        //result = (+new Date() - t);

        containers = $(containers);
        controls = $(controls);

        layout.data('rootNodes', rootNodes).attr('data-state', editing ? 'write' : 'read');

        renderLayoutContainers(dataView, row, editing, rootNodes);
    }

    function renderLayoutContainers(dataView, row, editing, containers) {
        $(containers).each(function (index) {
            var container = this,
                self = container.self,
                tabs;
            if (container.ready || !self.is(':visible')) return;
            container.ready = true;
            if (container.type == 'tabset') {
                tabs = [];
                $(container.children).each(function () {
                    var t = this;
                    if (t.type == 'tab')
                        tabs.push({ text: t.self.attr('data-tab-text'), content: t.self, context: t });
                });
                if (tabs.length) {
                    container.tabs = tabs;
                    mobile.tabs('create', {
                        id: dataView._id + '_tabset_' + index,
                        tabs: tabs, className: 'app-tabs-layout',
                        scope: dataView.get_selectedKey(),
                        change: function (tabInfo) {
                            var tabContent = tabInfo.content;
                            ensureLayoutControls({ dataView: dataView, row: row, controls: tabInfo.context.children });
                            pageResized(null, tabContent);
                            fitSummaryToolbars(tabContent);
                            if (dataView.editing() && !isTouchPointer && !isInTransition)
                                _input.focus({ container: tabContent });
                        }
                    });
                    $(tabs).each(function () {
                        var t = this;
                        if (t.active) {
                            ensureLayoutControls({ dataView: dataView, row: row, editing: editing, controls: t.context.children });
                            return false;
                        }
                    });
                }
            }
            else {
                if (container.type == 'collapsible') {
                    var headerText = self.attr('data-header-text'),
                        contents, toggle, body;
                    if (headerText && headerText != 'none') {
                        contents = self.contents();
                        toggle = $('<div data-container="toggle" class="app-feedback"></div>');
                        body = $('<div data-container="simple"></div>)');
                        contents.appendTo(body);
                        $('<span class="app-collapsible-toggle-text"/>').appendTo(toggle).text(headerText);
                        //iconCarat('up', 'small', toggle).attr('title', resourcesForm.Minimize);
                        $('<span class="app-collapsible-toggle-button"/>').appendTo(toggle).attr('title', resourcesForm.Minimize);
                        toggle.appendTo(self);
                        body.appendTo(self);
                        if (self.attr('data-collapsed') == 'true')
                            self.addClass('app-container-collapsed');
                    }
                }
                //else if (container.type == 'stickyheader') {
                //    var staticText = $('<div class="app-static-text"></div>');
                //    self.contents().appendTo(staticText);
                //    staticText.appendTo(self.addClass('dv-heading'));
                //}
                renderLayoutControls(dataView, row, editing, container.children);
            }
        });
    }

    function renderLayoutControls(dataView, row, editing, controls) {
        $(controls).each(function (index) {
            var node = this,
                c = node.self,
                controlType,
                inner,
                fieldName,
                field,
                v, t;
            if (node.children.length)
                renderLayoutContainers(dataView, row, editing, [node]);
            else {
                if (node.ready || !c.is(':visible')) return;
                node.ready = true;
                fieldName = c.attr('data-field');
                controlType = node.type;
                if (fieldName) {
                    inner = c.find('.app-control-inner'),
                        field = dataView.findField(fieldName);
                    if (field) {
                        // we are dealing with a data-aware control
                        if (!field.AllowNulls)
                            c.attr('data-required', true);
                        // data-control="label"
                        if (controlType == 'label' || controlType == 'header') {
                            //$('<span class="app-control-inner"/>').appendTo(c.empty()).text(field.HeaderText);
                            field = dataView._allFields[field.AliasIndex];
                            var headerText = field.HeaderText;
                            inner.html(headerText);
                            if (!headerText || headerText == '&nbsp;')
                                c.attr('data-required', null);
                        }
                        else if (controlType == 'footer') {
                            //field = dataView._allFields[field.AliasIndex];
                            var footerText = field.FooterText;
                            if (footerText)
                                inner.html(footerText);
                            else
                                c.addClass('app-hidden');
                        }
                        else {
                            // data-control="dataview"
                            c.addClass('app-field-' + field.Name);
                            if (controlType == 'dataview') {
                                if (field.Type == 'DataView' && field.DataViewController)
                                    if (dataView.extension().inserting()) {
                                        c.hide();
                                        if (c.parent().is('[data-container="row"]'))
                                            c.parent().hide();
                                    }
                                    else {
                                        var parentDataView = dataView.get_parentDataView(dataView),
                                            fieldName = field.Name,
                                            dataViewId = dataView._id + '_' + fieldName,
                                            childDataView,
                                            viewCount = 0,
                                            childPageInfo,
                                            headerText = field.HeaderText,
                                            filterFields = field.DataViewFilterFields,
                                            args,
                                            startPage = row[field.Index], dataViewFields,
                                            echo;
                                        dataViewFields = dataView._dataViewFields;
                                        if (!dataViewFields)
                                            dataViewFields = dataView._dataViewFields = {};
                                        if (!dataViewFields[fieldName])
                                            dataViewFields[fieldName] = 1;
                                        else
                                            dataViewId += dataViewFields[fieldName]++;
                                        childDataView = _app.find(dataViewId);
                                        while (childDataView && childDataView._dataViewFieldParentId != parentDataView._id) {
                                            dataViewId = parentDataView._id + '_' + fieldName + viewCount++;
                                            childDataView = _app.find(dataViewId);
                                        }
                                        node.echoSelector = '#' + dataView._id + ' #' + dataViewId + '_echo';
                                        c.empty().attr('id', dataViewId + '_ph'); //.addClass('app-echo-placeholder');

                                        if (!childDataView) {
                                            args = { id: dataViewId, controller: field.DataViewController, viewId: field.DataViewId, filterFields: field.DataViewFilterFields, baseUrl: __baseUrl, servicePath: __servicePath, showSearchBar: true, autoHide: filterFields ? 2 : null, tag: field.Tag };
                                            args.startPage = startPage;
                                            if (filterFields)
                                                args.filterSource = field.DataViewFilterSource ? dataView.findField(filterFields)._dataViewId : dataView._id;

                                            args.showInSummary = !!field.DataViewShowInSummary;
                                            if (field.DataViewPageSize)
                                                args.pageSize = field.DataViewPageSize;
                                            args.selectionMode = !!field.DataViewMultiSelect ? 'Multiple' : 'Single';
                                            if (field.DataViewShowActionButtons)
                                                args.showActionButtons = field.DataViewShowActionButtons;
                                            args.showActionBar = field.DataViewShowActionBar != false;
                                            args.showDescription = field.DataViewShowDescription != false;
                                            args.showViewSelector = field.DataViewShowViewSelector != false;
                                            args.showSearchBar = field.DataViewShowSearchBar != false;
                                            args.showQuickFind = field.DataViewShowQuickFind != false;
                                            args.showRowNumber = !!field.DataViewShowRowNumber;
                                            if (field.DataViewShowPager)
                                                args.showPager = field.DataViewShowPager;
                                            args.showPageSize = field.DataViewShowPageSize != false;
                                            args.showModalForms = !!field.DataViewShowModalForms;
                                            args.searchOnStart = !!field.DataViewSearchOnStart;
                                            args.autoSelectFirstRow = !!field.DataViewAutoSelectFirstRow;
                                            args.autoHighlightFirstRow = !!field.DataViewAutoHighlightFirstRow;

                                            childDataView = $create(Web.DataView, args, null, null, $('<p>')[0]);
                                            childDataView._dataViewFieldName = fieldName;
                                            field._dataViewId = dataViewId;
                                            childDataView._dataViewFieldParentId = parentDataView._id; // mark as child
                                            childDataView._filterSourceSelected(parentDataView);
                                            childPageInfo = getPageInfo(dataViewId);
                                            childPageInfo.text = headerText;
                                            childPageInfo.headerText = headerText;
                                            childPageInfo.activator.text = headerText;
                                        }
                                        else
                                            childDataView._startPage = startPage;
                                        // position echo
                                        var scrollable = findScrollable(c);
                                        echo = scrollable.find('[data-for="' + dataViewId + '"]');
                                        if (!echo.length) {
                                            echo = createEcho(dataViewId, scrollable).addClass('app-echo-embedded');
                                        }
                                        echo.width(c.width());
                                        if (childDataView.get_startPage()) {
                                            childDataView._loadPage();
                                            refreshEcho(dataViewId + '_echo');
                                        }
                                        //ensureEmbeddedEchoHeight(echo, false);
                                        //ensureLayoutControlHeight(node, echo.outerHeight(true));
                                    }
                            }
                            else if (controlType == 'field') {
                                // data-control="field"
                                if (field.ToolTip)
                                    c.attr('title', field.ToolTip);
                                _input.render({ container: c, inner: inner, dataView: dataView, field: field, row: row, editing: editing });
                            }
                            else {
                                // unknown "data-aware" control
                            }
                        }
                    }
                }
                else {
                    // this control does not make use of "data-field" attribute
                    if (controlType == 'description')
                        c.closest('[data-container]').addClass('app-has-description');
                    else if (controlType == 'action') {
                        inner = c.find('.app-control-inner');
                        var actionPath = c.attr('data-action'),
                            action = dataView.findAction(actionPath),
                            btn,
                            isAvailable,
                            description;
                        if (action) {
                            btn = $('<span class="app-action-column-button"/>').appendTo(inner.empty().addClass('app-action-column')).text(action.HeaderText);
                            description = action.Description;
                            if (description)
                                btn.attr('title', description);
                            isAvailable = action && dataView._isActionAvailable(action);
                            if (!isAvailable)
                                c.addClass('app-disabled');
                        }
                        else {
                            var errorText = actionPath + ': ' + inner.text();
                            $('<span class="app-action-column-button"/>').appendTo(inner.empty().addClass('app-action-column')).text(errorText);
                            c.addClass('app-disabled');
                        }
                    }
                }
            }
        });
    }

    function renderDirtyLayoutControls(dataView, row, editing, controls) {
        // render visible controls that are dirty
        $(controls).each(function (index) {
            var node = this,
                c = node.self,
                controlType,
                inner,
                fieldName,
                field,
                v, t;
            if (!node.ready)
                if (c.is(':visible'))
                    renderLayoutControls(dataView, row, editing, [node]);
                else
                    return false;
            if (node.children.length)
                renderDirtyLayoutControls(dataView, row, editing, node.children);
            else {
                if (node.ready && node.dirty && c.is(':visible')) {
                    field = _input.elementToField(c);
                    _input.render({ container: c, dataView: dataView, field: field, editing: editing, row: row });
                    node.dirty = false;
                }
            }
        });
    }

    function ensureLayoutControls(options) {
        var dataView = options.dataView,
            row = options.row,
            editing = options.editing,
            controls = options.controls;
        //dataInputContainer = activeStep.closest('[data-input-container]');
        //dataView = $app.find(dataInputContainer.attr('data-input-container'));
        //row = dataView.editRow();
        if (!controls || !controls.length) return;
        if (!dataView)
            dataView = _app.find($(controls[0].self).closest('[data-input-container]').attr('data-input-container'));
        if (!row)
            row = dataView.editRow();
        if (editing == null)
            editing = dataView.editing();
        renderLayoutControls(dataView, row, editing, controls);
        renderDirtyLayoutControls(dataView, row, editing, controls);
    }

    //function adjustLayout(layout) {
    //    return;
    //    var rootNodes = layout.data('rootNodes'),
    //        maxBottom = 0,
    //        newHeight;
    //    $(rootNodes).each(function () {
    //        if (this.bottom > maxBottom)
    //            maxBottom = this.bottom;
    //    });
    //    newHeight = maxBottom++;
    //    if (layout.height() != newHeight)
    //        layout.height(newHeight + parseInt(layout.css('border-bottom-width')) + parseInt(layout.css('border-top-width')));
    //}

    //function ensureEmbeddedEchoHeight(echo, layoutChanged) {
    //    if (!echo.is('.app-echo-embedded'))
    //        return;
    //    var dataViewId = echo.attr('data-for'),
    //        placeholder = $('#' + dataViewId + '_ph'),
    //        control = placeholder.data('node'),
    //        //layout = placeholder.closest('[data-layout]'),
    //        scrollable,
    //        scrollableOffset,
    //        placeholderOffset;
    //    //ensureLayoutControlHeight(control, echo.outerHeight(true));
    //    //if (control.initialized) {
    //    //    scrollable = findScrollable(placeholder);
    //    //    scrollableOffset = scrollable.offset();
    //    //    placeholderOffset = placeholder.offset();
    //    //    echo.css({ left: placeholderOffset.left - scrollableOffset.left, top: placeholder.offset().top + scrollable.scrollTop() - scrollableOffset.top, width: placeholder.width() });
    //    //}
    //    //if (layoutChanged != false) {
    //    //    adjustLayout(layout);
    //    //    positionEmbeddedEchos(control);
    //    //}
    //    placeholder.height(echo.outerHeight(true));
    //    positionEmbeddedEchos(control);
    //}

    function syncEmbeddedViews(scrollable, delay) {
        if (delay) {
            clearTimeout(_window._syncEmbeddedViewsTimeout);
            _window._syncEmbeddedViewsTimeout = setTimeout(function () {
                syncEmbeddedViews(scrollable);
            });
            return;
        }
        if (!scrollable)
            scrollable = findScrollable();
        var list = [],
            page = findPage(scrollable),
            scrollableOffset = scrollable.offset(),
            scrollableScrollTop, pageLeft;

        scrollable.find('[data-control="dataview"]').each(function () {
            var that = $(this),
                node = that.data('node'),
                echo = $(node.echoSelector),
                h = parseCss(echo, 'height') + parseCss(echo, 'margin-top') + parseCss(echo, 'margin-bottom') + parseCss(echo, 'padding-top') + parseCss(echo, 'padding-bottom')//echo.outerHeight(true);
            if (echo.length && h) {
                if (h != parseCss(that, 'height') /*that[0].offsetHeight*/)
                    that.height(h);
                list.push({ p: that, e: echo });
            }
        });
        $(list).each(function () {
            var item = this,
                placeholder = item.p, placeholderOffset,
                w = placeholder.width();
            if (w) {
                if (scrollableScrollTop == null) {
                    scrollableScrollTop = scrollable.scrollTop();
                    pageLeft = page.length ? page.offset().left : 0;
                }
                placeholderOffset = placeholder.offset();
                item.e.css({
                    'visibility': '',
                    left: placeholderOffset.left - pageLeft /*- (isModalPage(page) ? parseCss(page, 'left') : (appBars.left.visible ? appBars.left.width + 1 : 0))*/,
                    top: placeholderOffset.top + scrollableScrollTop - scrollableOffset.top,// + parseCss(page, 'padding-top'),
                    width: w
                });
            }
            else
                item.e.css({ 'visibility': 'hidden', top: 0 });
        });
        setupGridHeaderStyle(scrollable);
    }

    //function syncEmbeddedEchoPosition(control) {
    //    var echo = $(control.echoSelector),
    //        placeholder = control.self,
    //        placeholderOffset = placeholder.offset(),
    //        scrollable = findScrollable(placeholder),
    //        scrollableOffset = scrollable.offset();
    //    echo.css({ left: placeholderOffset.left - scrollableOffset.left, top: placeholderOffset.top + scrollable.scrollTop() - scrollableOffset.top, width: placeholder.width() });

    //}

    //function positionEmbeddedEchos(control) {
    //    var echo,
    //        placeholderOffset,
    //        scrollable,
    //        scrollableOffset;
    //    if (control.echoSelector)
    //        syncEmbeddedEchoPosition(control);
    //    else if (control.children.length)
    //        $(control.children).each(function () {
    //            positionEmbeddedEchos(this);
    //        });
    //}

    //function invalidateEmbeddedEcho(dataViewId) {
    //    var echo = $('#' + dataViewId + '_echo');
    //    if (echo.is('.app-echo-embedded')) {
    //        echo.addClass('app-stale');
    //        fitEmbeddedEchos();
    //    }
    //}

    //function fitEmbeddedEchos(container) {
    //    (container || findActivePage()).find('.app-echo-embedded.app-stale').each(function () {
    //        ensureEmbeddedEchoHeight($(this));
    //    });
    //}

    //function ensureLayoutControlHeight(node, newNodeHeight) {
    //    return;
    //    if (arguments.length == 1)
    //        newNodeHeight = node.self[0].getBoundingClientRect().height;//.outerHeight(true);
    //    var deltaY = newNodeHeight - node.outerHeight,
    //        originalNodeBottom = node.bottom,
    //        self = node.self,
    //        container = node.parent,
    //        containerHeight,
    //        newContainerHeight = 0,
    //        layout,
    //        scrollable, scrollableOffset, scrollableScrollTop,
    //        peers;
    //    if (deltaY == 0 || deltaY > 0 && node.canGrow == false || deltaY < 0 && node.canShrink == false) return;
    //    if (container) {
    //        containerHeight = container.outerHeight;
    //        peers = container.children;
    //    }
    //    else {
    //        layout = node.self.closest('[data-layout]');
    //        peers = layout.data('rootNodes');
    //    }
    //    if (deltaY >= 0)
    //        newContainerHeight = Math.max(containerHeight, /*node.bottom + */deltaY + containerHeight/* - node.bottom*/);
    //    else
    //        newContainerHeight = node.bottom + deltaY + (/*node.bottomMargin != null ? node.bottomMargin : */containerHeight - node.bottom);
    //    node.outerHeight += deltaY;
    //    node.height += deltaY;
    //    node.bottom += deltaY;
    //    if (node.height == 0)
    //        self[0].style.display = 'none';
    //    else {
    //        if (node.initialized) {
    //            self.height(node.height);
    //            if (self[0].style.display == 'none')
    //                self[0].style.display = '';
    //        }
    //        else
    //            node.heightChanged = true;
    //    }
    //    $(peers).each(function () {
    //        var c = this;
    //        if (c.top >= originalNodeBottom || c.top > node.top) {
    //            newContainerHeight = Math.max(newContainerHeight, c.bottom + deltaY + containerHeight - c.bottom);
    //            c.top += deltaY;
    //            c.bottom += deltaY;
    //            if (c.initialized)
    //                c.self.css('top', c.top);
    //            else
    //                c.topChanged = true;
    //            positionEmbeddedEchos(c);
    //        }
    //    });
    //    if (!layout) {
    //        if (deltaY > 0 && containerHeight < newContainerHeight || deltaY < 0 && containerHeight > newContainerHeight)
    //            ensureLayoutControlHeight(container, newContainerHeight);
    //    }
    //}

    function expandCollapsedItems(context, link) {
        var item = link.parent().hide().next();
        while (item.length && !item.is(':visible'))
            item = item.show().next();
    }

    function visibleFilterFunc() {
        return $(this).is(':visible');
    }

    function createStyle() {
        return $('<style/>').appendTo($('head'));
    }

    function enumerateConditionalStyleExpressions(dataView) {
        return dataView._enumerateExpressions(Web.DynamicExpressionType.Any, Web.DynamicExpressionScope.ViewRowStyle, dataView.get_viewId());
    }

    function evaluateConditionalStyleExpressions(dataView, row, target, expressions) {
        if (!expressions)
            expressions = enumerateConditionalStyleExpressions(dataView);
        if (expressions && expressions.length) {
            var customCssClasses = dataView._evaluateJavaScriptExpressions(expressions, row, true);
            if (target) {
                var allCssClasses = [];
                $(expressions).each(function () {
                    var exp = this;
                    if (exp.Scope == 1)
                        allCssClasses.push(exp.Result);
                });
                allCssClasses = allCssClasses.join(' ');
                target.removeClass(allCssClasses);
                if (customCssClasses)
                    target.addClass(customCssClasses);
            }

        }
    }

    function frozenFieldName(dataView) {
        var fieldName = dataView.pageProp('frozenField');
        if (!fieldName && dataView._hasKey())
            fieldName = '_first_';
        return fieldName || '_none_';
    }

    function stickyHeaderTemplate(page) {
        if (!page)
            page = findActivePage();
        return page.find('.dv-heading');
    }

    function removeStickyHeaderTemplate(page) {
        stickyHeaderTemplate(page).remove();
    }

    function pathToId(path) {
        var id = path.replace(/\.\w+$/, '').replace(/\W/g, '_').toLowerCase() || 'page';
        if (id.match(/^\_/))
            id = id.substring(1);
        return id;
    }

    function usePopupPanel() {
        var w = _screen.width,
            h = _screen.height;
        return w < 480 && h < 640 || h < 480 && w < 640;
    }

    function dataViewEchoChanged(dataView) {
        getPageInfo(typeof dataView == 'string' ? dataView : dataView._id).echoChanged = true;
    }

    function gridViewIsPreferred() {
        var gw = 480;
        if (appBars.left.visibile)
            gw += 193;
        if (appBars.right.visible)
            gw += 193;
        return _screen.width >= gw;//$body.is('.app-sidebar-undocked') ? 480 : 480 + 193;
    }

    function findPanel(location, selector) {
        var dataView = selector && selector._controller ? selector : _app.find(findPage(selector).attr('id')),
            panel;
        if (dataView)
            $(dataView._panels).each(function () {
                var p = this;
                if (p.location == location)
                    $(p.pages).each(function () {
                        var page = this;
                        if (page.is('.app-page-panel-active')) {
                            panel = page;
                            return false;
                        }
                    });
                if (panel) return false;
            });
        return panel;
    }

    function dataInputOf(element, selector) {
        return _input.of(element, selector);
    }

    function findScrollable(selector) {
        if (selector) {
            if (typeof selector == 'string') {
                if (selector.match(/^\w/))
                    selector = '#' + selector;
                return $(selector).find('.app-wrapper');
            }
            if (selector.length && selector[0].className.indexOf('ui-page') != -1)
                return selector.find('.app-wrapper');
            return selector.closest('.app-wrapper');
        }
        else
            return findActivePage() ? findActivePage('.app-wrapper') : $();
    }

    function findPage(selector) {
        return selector ? selector.closest('.ui-page') : findActivePage();
    }

    function restoreScrollable() {
        var scrollable = findScrollable(),
            toolbarStub = scrollable.find('.app-toolbar-stub');
        if (toolbarStub.length) {
            scrollWrapper(scrollable, scrollable.data('restore-scroll-top'));
            toolbarStub.remove();
        }
    }

    function findEcho(child) {
        return $(child).closest('.app-echo');
    }

    function focusScrollable(scrollable) {
        var activeElement = document.activeElement,
            wrapper = $(activeElement).closest('.app-wrapper'),
            scrollable = findScrollable(scrollable);
        if (scrollable.length && (!wrapper.length || wrapper[0] !== scrollable[0]))
            scrollable.focus();
    }

    function reloadWindow() {
        var href = _window.location.href,
            hashIndex = href.indexOf('#');
        if (hashIndex >= 0)
            href = href.substr(0, hashIndex);
        _window.location.reload(href);
    }

    function displayDensity() {
        if (!_displayDensity) {
            var density = $settings('ui.displayDensity.value');
            _displayDensity = 16;
            if (density == 'Compact')
                _displayDensity = 14;
            else if (density == 'Condensed' || density == 'Tiny')
                _displayDensity = 12;
        }
        return _displayDensity;
    }

    function handleToolbarClick(event) {
        var toolbar = $(this),
            result,
            tolerance = toolbar.is('.app-bar-toolbar') ? 8 : 4,
            x = lastTouchX(event.clientX),
            y = lastTouchY(event.clientY);

        toolbar.find('.ui-btn-icon-notext').each(function () {
            var btn = $(this),
                btnLeft, btnRight,
                result;
            if (btn.is(':visible')) {
                if (btn.is('.ui-icon-bars')) {
                    btnLeft = 0;
                    btnRight = parseCss(mobile._backText, 'left');
                }
                else {
                    btnLeft = btn.offset().left;
                    btnRight = (btnLeft + btn.outerWidth() + 8);
                    btnLeft -= 8;
                }
                if (btnLeft <= x && x <= btnRight) {
                    setTimeout(function () {
                        btn.trigger('vclick');
                    });
                    result = true;
                    return false;
                }
            }
        });
        return result;
    }

    function lovOf(field, fieldInfo) {
        var lov = field.DynamicItems || field.Items,
            valueList, textList,
            fieldValue = fieldInfo && fieldInfo.value,
            fieldText = fieldInfo && fieldInfo.text;
        if (lov && !lov.length && fieldInfo && fieldValue) {
            fieldValue = fieldInfo.value,
                fieldText = fieldInfo.text;
            valueList = typeof fieldValue == 'string' ? fieldValue.split(_app._simpleListRegex) : [fieldValue];
            textList = valueList.length > 1 ? fieldText.split(_app._simpleListRegex) : [fieldText];
            $(valueList).each(function (index) {
                lov.push([valueList[index], textList[index]]);
            });
        }
        return lov;
    }

    function scrollWrapper(wrapper, scrollTop) {

        function allowScrolling() {
            wrapper.removeData('scrolling enableScrollEventsTimeout');
            updateVScrollbar(wrapper);
        }

        wrapper.data('scrolling', true);
        wrapper.scrollTop(scrollTop);
        var enableScrollEventsTimeout = wrapper.data('enableScrollEventsTimeout');
        if (enableScrollEventsTimeout != null)
            clearTimeout(enableScrollEventsTimeout);
        wrapper.data('enableScrollEventsTimeout', setTimeout(allowScrolling, 300));
    }

    function refreshEchoToolbarWithDelay(dataView, echo) {
        if (!echo)
            echo = getEcho(dataView);// $('#' + dataView._id + '_echo');
        if (echo.length)
            echo.find('.app-echo-toolbar .app-echo-controls').addClass('app-stale');
        var activePageId = getActivePageId();
        clearTimeout(_window._refreshEchoToolbar);
        _window._refreshEchoToolbar = setTimeout(function () {
            if (activePageId == getActivePageId() && !mobile.busy() && !isInTransition)
                fetchEchos();
        }, 500);
    }

    function popupAnimation(menu) {
        return !menu && usePopupPanel() ? (settings.pageTransition != 'none' ? 'slideup' : 'none') : (isTouchPointer ? 'fade' : 'none');
    }

    //function iconIsGlyph(icon) {
    //    return false;
    //    //return icon && typeof icon == 'string' && icon.match(/glyphicon-/);
    //}

    function iconIsMaterial(icon) {
        return icon && typeof icon == 'string' && icon.match(/^(material\-icon|glyphicons|glyphicon|fa|ion)\-.+/);
    }

    function materialIcon(icon, parent) {
        var m = icon.match(/^(material\-icon|glyphicons|glyphicon|fa|ion)\-(.+)/);
        if (!m) return null;
        var
            font = m[1],
            supportsLigatures = font == 'material-icon';
        return $('<i class="app-icon ' + font + ' ' + m[0] + '" aria-hidden="true">' + (supportsLigatures ? m[2].replace(/\-/g, '_') : '') + '</i>').appendTo(parent.addClass('app-has-icon app-has-' + font));
    }

    function progressIndicatorInPanel() {
        return $('.ui-panel-open .ui-btn.app-animated');
    }

    function progressIndicatorInPopup() {
        return $('.ui-popup-active .ui-btn.app-animated');
    }



    function startSearchCallback(context) {
        _app.search('show', context.dataViewId);
    }

    function clickMenuButton() {
        var button = mobile._menuButton;
        callWithFeedback(button, function () {
            button.trigger('vclick');
        });
    }

    function resizeSignatures(content) {
        $(content).find('.app-signature').each(function () {
            _app.upload('resize', { container: this });
        });
    }

    function focusStatusBar(statusBar) {
        var current = statusBar.find('.Current'),
            currentOffset,
            statusBarOffset;
        if (current.length) {
            statusBarOffset = statusBar.offset();
            currentOffset = current.offset()
            statusBar.scrollLeft((currentOffset.left - statusBarOffset.left) - current.outerWidth(true) / 2);
        }
    }

    function wizard(method, options) {
        if (!options)
            options = {};
        var container = options.container || findActivePage(),
            layout = options.layout || container,
            config;
        if (!layout.is('[data-layout]')) {
            layout = layout.find('[data-layout]');
            if (!layout.length && container)
                layout = container.closest('[data-layout]');
        }
        config = layout.data('wizard-config');

        if (!config) {
            config = { steps: [], active: 0 };
            config.containers = layout.find('[data-container="wizard"]').each(function (index) {
                var container = $(this),
                    step = { text: container.attr('data-wizard-step'), isDynamic: container.find('> [data-visibility]').length > 0 };
                config.steps.push(step);
            });
            layout.data('wizard-config', config);
        }

        if (!config.steps.length) return;

        function visible(index) {
            var skip,
                step = config.steps[index];
            if (step.isDynamic) {
                skip = true;
                $(config.containers[index]).children().each(function () {
                    var elem = this;
                    if (elem.style.display != 'none') {
                        skip = false;
                        return false;
                    }
                });
            }
            return !skip;
        }

        function find(dir, index) {
            if (index == null)
                index = config.active;
            index += dir;
            while (index >= 0 && index < config.steps.length) {
                if (visible(index))
                    break;
                else
                    index += dir;
            }
            return index;
        }



        function selectPage(text) {
            $(config.steps).each(function (index) {
                var step = this;
                if (step.text == text && visible(index)) {
                    config.active = index;
                    pageChanged();
                }
            });
        }


        function test(dir, index) {
            var index = find(dir, index);
            return index >= 0 && index < config.steps.length;
        }

        function changeVisiblePage() {
            hideTooltip();
            config.containers.removeClass('app-wizard-active');
            var index = config.active,
                activeStep,
                dataInputContainer,
                dataView, row;
            if (index != -1) {
                activeStep = $(config.containers[index]).addClass('app-wizard-active');
                ensureLayoutControls({ controls: activeStep.data('node').children });
                pageResized();
                //fitTabs();
                //syncEmbeddedViews();
                //fetchEchos(true);
            }
        }

        function pageChanged() {
            changeVisiblePage();
            status();
            if (!isTouchPointer)
                _input.focus({ container: $(config.containers[config.active]) });
        }

        function status() {
            var page = container.closest('.ui-content'),
                next, prev;
            if (!page.length)
                page = container.find('.ui-content');
            next = page.find('[data-action-path="wizard-next"]'),
                prev = page.find('[data-action-path="wizard-prev"]');
            next.toggleClass('app-btn-disabled', !test(1));
            prev.toggleClass('app-btn-disabled', !test(-1));
            updateStatusBar();
        }

        function updateStatusBar() {
            var page = layout.closest('.ui-page'),
                statusBar = page.find('.app-status-bar'),
                dataView,
                page, sb;
            if (statusBar.length) {
                dataView = _app.find(page.attr('id'));
                if (dataView._statusBarAuto) {
                    // generate a status bar
                    sb = [dataView._controller + '.' + dataView._viewId + '._wizard:' + config.active + '\n'];
                    $(config.steps).each(function (index) {
                        var step = this,
                            skip,
                            text = step.text;
                        if (step.isDynamic) {
                            skip = true;
                            $(config.containers[index]).children().each(function () {
                                if (this.style.display != 'none') {
                                    skip = false;
                                    return false;
                                }
                            });
                        }
                        if (!skip)
                            sb.push((index == config.active ? ('[' + text + ']') : text) + ' >');
                    });
                    dataView._statusBarAuto = sb.join('');
                }
                statusBar.html(dataView.statusBar());
                var segments = statusBar.find('li.Segment'),
                    zindex = segments.length + 10;
                segments.each(function (i) {
                    this.style.zIndex = zindex - i;
                });
                focusStatusBar(statusBar);
            }
        }

        switch (method) {
            case 'start':
                config.active = test(1, -1) ? 0 : -1;
                changeVisiblePage();
                updateStatusBar();
                break;
            case 'status':
                status();
                break;
            case 'select':
                selectPage(options.text);
                break;
            case 'next':
                var next = find(1);
                if (next != -1) {
                    config.active = next;
                    pageChanged();
                }
                break;
            case 'prev':
                var prev = find(-1);
                if (prev != -1) {
                    config.active = prev;
                    pageChanged();
                }
                break;
            case 'visible':
                if (options.step)
                    if (options.step.is('.app-wizard-active'))
                        return true;
                    else {
                        var index = options.step.prevAll('[data-container="wizard"]').length;
                        return visible(index);
                    }
                break;
            case 'show':
                if (options.step && !options.step.is('.app-wizard-active')) {
                    var index = options.step.prevAll('[data-container="wizard"]').length;
                    if (index != config.active && visible(index)) {
                        config.active = index;
                        changeVisiblePage();
                        status();
                    }
                }
                break
        }
    }

    function configurePromoButton(dataView, thumbnails) {
        if (!$settings('ui.actions.promote')) return;
        var button = mobile.promo(),
            activePageId,
            viewStyle,
            isList,
            pageInfo, page, pageOffset,
            showOnLeft,
            buttonWidth, buttonOffset;

        if (!dataView)
            dataView = mobile.dataView();
        if (dataView) {
            if (dataView._panelContainer)
                dataView = _app.find(dataView._panelContainer.attr('id'));
            activePageId = dataView._id;
        }
        if (dataView) {
            viewStyle = dataView.extension().viewStyle();
            isList = (viewStyle == 'List' || viewStyle == 'Cards');
            showOnLeft = viewStyle == 'Map';
            if (isList && thumbnails == null)
                thumbnails = findActivePage('.app-listview .ui-li-has-thumb').length > 0;
            if (viewStyle != 'Map')
                if (isList && thumbnails || dataView.get_showMultipleSelection() || !sidebarIsVisible())
                    showOnLeft = false;
        }
        button = mobile.promo();
        pageInfo = getPageInfo(activePageId);
        if (pageInfo) {
            page = pageInfo.page; //$('#' + activePageId);
            buttonWidth = button.outerWidth();
            buttonOffset = Math.floor(buttonWidth / 3)
            if (page)
                if (page.is('.app-page-modal')) {
                    pageOffset = page.offset();
                    if (page.is('.app-page-modal-fullscreen'))
                        button.css({
                            left: showOnLeft ? pageOffset.left + buttonOffset : 'auto',
                            right: showOnLeft ? 'auto' : _screen.physicalWidth - (pageOffset.left + page.outerWidth()) + buttonOffset,
                            bottom: _screen.physicalHeight - (pageOffset.top + page.outerHeight() - buttonOffset),
                            'margin-bottom': 0
                        });
                    else
                        button.css({
                            left: showOnLeft ? pageOffset.left + buttonOffset : 'auto',
                            right: showOnLeft ? 'auto' : _screen.physicalWidth - (pageOffset.left + page.outerWidth()) + buttonOffset,
                            bottom: _screen.physicalHeight - (pageOffset.top + page.outerHeight() + Math.ceil(buttonWidth / 2)),
                            'margin-bottom': 0
                        });
                }
                else {
                    var panel = findPanel('right', dataView),
                        rightPanelWidth = (panel ? parseCss(panel, 'width') : 0) + _screen.left;
                    button/*.removeClass('app-promo-modal')*/.css({
                        left: showOnLeft ? (appBars.left.visible ? appBars.left.width /*- buttonWidth / 2*/ + buttonOffset : buttonOffset) : 'auto',
                        right: showOnLeft ? 'auto' : (rightPanelWidth + (appBars.right.visible ? appBars.right.width + buttonOffset : buttonOffset)),
                        bottom: isVirtualScreen() ? _screen.top : ''/*,
                    'margin-bottom': ''*/
                    });
                }
        }
    }

    function updateMenuStripPosition(force) {
        var title = mobile._title;
        if (title.data('screen-width') != _screen.width || force)
            title.data('screen-width', _screen.width).css('marginLeft', appBars.left.visible ? appBars.left.width : mobile._logo.offset().left + mobile._logo.outerWidth())
    }

    function updateSidebarInner() {
        var leftInner = appBars.left.inner;
        appBars.left.width = leftInner.css('width', '').outerWidth();
        if (scrollbarInfo.width)
            leftInner.css({ 'overflow-y': 'scroll', 'width': appBars.left.width - scrollbarInfo.width + 2 });
    }

    function updateSidebarVisibility(resetPanelState) {
        if (resetPanelState)
            $body.removeClass('app-has-panel-right');
        var bodyClass = document.body.className,
            leftChanged, rightChanged;
        if (!isHosted) {

            function showLeftSideBar() {
                if (appBars.left.mini && !bodyClass.match(/\bapp\-has\-minisidebar\-left\b/))
                    $body.addClass('app-has-minisidebar-left');
                else if (!appBars.left.mini && bodyClass.match(/\bapp\-has\-minisidebar\-left\b/))
                    $body.removeClass('app-has-minisidebar-left');
                if (!bodyClass.match(/\bapp-has-sidebar-left\b/)) {
                    $body.addClass('app-has-sidebar-left');
                    appBars.left.visible = true;
                    updateSidebarInner();
                    //leftInner.css({ 'overflow-y': 'scroll', width: sidebar.width() - parseCss(leftInner, 'padding-left') - parseCss(leftInner, 'padding-right') - scrollbarInfo.width });
                    leftChanged = true;
                }
            }

            function hideLeftSideBar() {
                if (bodyClass.match(/\bapp\-has\-minisidebar\-left\b/))
                    $body.removeClass('app-has-minisidebar-left');
                if (bodyClass.match(/\bapp-has-sidebar-left\b/)) {
                    $body.removeClass('app-has-sidebar-left');
                    appBars.left.visible = false;
                    appBars.left.width = 0;
                    leftChanged = true;
                }
            }

            if ($settings('ui.sidebar.when') == 'Landscape')
                if (sidebarIsAllowed() && _screen.width > _screen.height)
                    showLeftSideBar();
                else
                    hideLeftSideBar();
            else if ($settings('ui.sidebar.when') == 'Never') {
                if (bodyClass.match(/\bapp-has-sidebar-left\b/)) {
                    $body.removeClass('app-has-sidebar-left app-has-minisidebar-left');
                    appBars.left.visible = false;
                    appBars.left.width = 0;
                    leftChanged = true;
                }
            }
            else // 'Always'
                if (sidebarIsAllowed())
                    showLeftSideBar();
                else
                    hideLeftSideBar();

        }
        // Right Side Bar
        if (_screen.width >= toPhysicalWidth('md') && false/* 992*/) {
            //if (!bodyClass.match(/\bapp-has-sidebar-right\b/)) {
            //    $body.addClass('app-has-sidebar-right');
            //    appBars.right.visible = true;
            //    appBars.right.width = appBars.right.inner.outerWidth() - scrollbarInfo.width;
            //    rightChanged = true;
            //}
        }
        else
            if (bodyClass.match(/\bapp-has-sidebar-right\b/)) {
                $body.removeClass('app-has-sidebar-right');
                appBars.right.visible = false;
                appBars.right.width = 0;
                rightChanged = true;
            }
        if (leftChanged) {
            updateMenuStripPosition(true);
            syncMenuStripWithVisibleSidebar();
            stickyHeader();
            configurePromoButton();
        }
        var activePage = $('.ui-page.app-has-panel-right').first(),
            hasPanel = activePage.is('.app-has-panel');
        if (!activePage.is('.app-page-modal')) {
            if (hasPanel && !bodyClass.match(/\bapp-has-panel-right\b/))
                rightChanged = true;
            else if (!hasPanel && bodyClass.match(/\bapp-has-panel-right\b/))
                rightChanged = true;
        }
        if (rightChanged) {
            var panel = findPanel('right', activePage),
                toolbarRight = panel ? parseCss(panel, 'width') : 0;
            if (appBars.right.visible)
                toolbarRight += appBars.right.width + 1;
            $body.toggleClass('app-has-panel-right', hasPanel && !!panel);
            mobile._toolbar.css(toolbarRight ? { 'right': toolbarRight, width: 'auto' } : { 'right': '', width: '' });
            configurePromoButton();
        }
        updateMiniSiderInnerHeight();
    }

    function updateMiniSiderInnerHeight() {
        if (appBars.left.visible) {
            var inner = appBars.left.inner,
                bottom = parseInt(inner[0].style.bottom || '0');
            if (appBars.left.mini) {
                if (!bottom)
                    inner.css('bottom', inner.next().outerHeight() - 1);
            }
            else if (bottom)
                appBars.left.inner.css('bottom', '');
        }
    }

    function openHref(href) {
        activeLink();
        var m = href.match(/^(_\w+)\:(.+)$/),
            t,
            s;
        if (m && m[1]) {
            u = m[2];
            s = m[1] == '_blank' ? null : 'modal=yes,alwaysRaised=yes,resizable=yes';
            if (s)
                _window.open(u, t, s);
            else
                _window.open(u, t);
        }
        else if (isTouchPointer)
            _window.location.href = href;
        else
            _window.open(href);
    }

    function checkBoxRadioHeight() {
        switch ($settings('ui.displayDensity.value')) {
            case 'Comfortable':
                return 46;
            case 'Compact':
                return 40
        }
        return 35;
    }

    function timeNow() {
        return new Date().getTime();
    }

    function parseCss(element, stylePropertyName) {
        return parseFloat(arguments.length == 1 ? element : element.css(stylePropertyName));
    }

    function safePoint(p) {
        if (p.x != null)
            p.x = Math.ceil(p.x);
        if (p.y != null)
            p.y = Math.ceil(p.y);
        return p;
    }

    function resetToolbarButtons() {
        var buttons = mobile._toolbarButtons,
            btn,
            contextButton = mobile._contextButton,
            contextButtonLeft = Math.ceil(contextButton.show().offset().left),
            contextButtonWidth = parseCss(contextButton, 'width') + 2,
            gap = displayDensity(),
            rightPos, i = buttons.length - 1;

        rightPos = parseCss(mobile._toolbar, 'width') - contextButtonLeft + gap;
        if (isVirtualScreen())
            rightPos += _screen.left;
        while (i >= 0) {
            btn = $(buttons[i]).css('right', rightPos);
            rightPos = rightPos + contextButtonWidth + gap;
            i--;
        }
    }

    function textOrHtml(field, t, elem, conditionalWrapping) {
        if (field.htmlEncode()) {
            if (field.TextMode == 3) {
                var lines = _app.htmlEncode(t).split(/\r?\n/),
                    i, s;
                for (i = 0; i < lines.length; i++) {
                    s = lines[i],
                        m = s.match(/^\s+/);
                    if (m)
                        lines[i] = Array(m[0].length * 2).join('&nbsp;') + s.substring(m[0].length);
                }
                t = lines.join('<br/>');
                if (lines.length > 15) {
                    elem.html('<div class="app-text-collapsible"></div>').children().html(t);
                    $('<span class="ui-btn ui-btn-icon-notext ui-btn-inline ui-icon-carat-d ui-inline ui-corner-all app-btn-toggle"/>').attr('title', resourcesForm.Maximize).appendTo(elem);
                }
                else {
                    elem.html(t);
                    if (conditionalWrapping)
                        elem.css('white-space', 'nowrap');
                }
            }
            else
                elem.text(t);
        }
        else
            elem.html(t);
    }

    function formatQuickFindPlaceholder(dataView) {
        return String.format('{0} - {1}', resourcesGrid.QuickFindText, dataView.get_view().Label);
    }

    //function executeRefreshCallback(pageInfo) {
    //    if (pageInfo.refreshCallback) {
    //        pageInfo.refreshCallback();
    //        pageInfo.refreshCallback = null;
    //    }
    //}

    function hidePresenters(scrollable, extension, keepMap) {
        scrollable.find('> .app-map, > .app-presenter-instruction').hide();
        if (!keepMap)
            extension._mapPageWindow = null;
        mobile.presenter('hide', { container: scrollable });
    }

    function nowToString() {
        return String.format('{0:' + _app.dateFormatStrings['{0:f}'] + '}', new Date());
    }

    function enablePanelAnimation(panel) {
        return true;
        //var enable = settings.pageTransition != 'none';
        //if (arguments.length == 0)
        //    return enable;
        //if (!enable)
        //    panel.removeClass('ui-panel-animate');
    }

    function appendMoreButton(dataView, link, frozen) {
        if (dataView._hasKey()) {
            var button = $('<span class="app-btn-more">&nbsp;</span>').appendTo(link).attr('title', labelMore);
            if (frozen)
                button.addClass('app-frozen');
        }
    }

    function inputCaretPos(input, position) {
        input = $(input);

        if (position == null)
            position = input.val().length;

        if (input.length)
            try {
                //input[0].selectionStart = input[0].selectionEnd = position;
                input[0].setSelectionRange(position, position);
            }
            catch (ex) {
            }
    }

    function quickFind(dataView, query) {
        dataView.extension().quickFind(query);
    }

    function advancedSearchFilter(dataView) {
        var filter = [];
        if (dataView && dataView.viewProp('useAdvancedSearch'))
            filter = dataView.viewProp('advancedSearchFilter') || filter;
        return filter;
    }

    function notifyDataFilterChanged(dataView) {
        var text = dataView.extension().filterStatus(true, false);
        mobile.notify({ dataView: dataView, text: text || resourcesMobile.FilterCleared });
    }

    function applyDataFilter(dataView) {
        resetInstruction(dataView);
        persistDataFilter(dataView);
        $(dataView._allFields).each(function () {
            delete this._listOfValues;
        });
        resetGridHeaderStyle(dataView);
        //dataView._requiresContextRefresh = true;
        notifyDataFilterChanged(dataView);
        dataView._forceSync();
        dataView.refreshData();
    }

    function clearDataFilter(dataView, keepAdvancedSearch) {
        if (!keepAdvancedSearch && advancedSearchFilter(dataView).length)
            dataView.viewProp('advancedSearchFilter', null);
        dataView.clearFilter(true);
        applyDataFilter(dataView);
    }

    function advancedFilterStatus(dataView) {
        var oldFilter = dataView._filter,
            advancedFilter = advancedSearchFilter(dataView),
            status;
        if (advancedFilter.length) {
            dataView._filter = [];
            status = dataView.extension().filterStatus(true);
            dataView._filter = oldFilter;
        }
        return status;
    }

    function persistDataFilter(dataView) {
        var filter = (dataView.get_filter() || []).slice(0),
            externalFields = [],
            expression, i = 0,
            searchingEvent = $.Event('searching.app', { dataView: dataView });
        $(dataView.get_externalFilter()).each(function () {
            externalFields.push(this.Name);
        });
        while (i < filter.length) {
            expression = filter[i];
            if (Array.indexOf(externalFields, expression.match(/^\w+/)[0]) != -1)
                filter.splice(i, 1);
            else
                i++;
        }
        dataView.viewProp('filter', filter);

        $(document).trigger(searchingEvent);
    }

    function menuStripIsVisible() {
        var menuStripInfo = mobile._menuStrip;
        return menuStripInfo && menuStripInfo.strip.is(':visible');
    }

    function updateMenuStripState(visible) {
        var menuStripInfo = mobile._menuStrip,
            menuStrip = menuStripInfo && menuStripInfo.strip,
            //menuPanel = mobile._menuPanel,
            title = mobile._title;
        if (menuStrip) {
            //var externalLinks = $(menuPanel).find('li a[rel="external"]'),
            //    externalItems = externalLinks.parent(),
            //    listDividers = $(menuPanel).find('.ui-li-divider:not(.app-info):not(.app-copy)');
            if (arguments.length == 0)
                visible = menuStripIsVisible();
            if (visible) {
                menuStrip.show();
                //externalItems.hide();
                //listDividers.hide();
                //title.addClass('app-hidden');
            }
            else {
                menuStrip.hide();
                //externalItems.show();
                //listDividers.show();
                mobile.refreshTitleState();
            }
        }
    }

    function addSeparator(list) {
        if (list.length && list[list.length - 1].text)
            list.push({});
    }

    function ensureCausesCalculate(target) {
        //target = $(target);
        //var causesCalculate = target.attr('data-causes-calculate'),
        //    causesPopulate = target.attr('data-causes-populate'),
        //    causesCopy = target.attr('data-causes-copy'),
        //    dataView;
        //if (causesCopy) {
        //    causesCopy = causesCopy.split(/\./);
        //    dataView = _app.find(causesCopy[1]);
        //    dataView._copyStaticLookupValues(dataView.findField(causesCopy[0]));
        //}
        //if (causesCalculate)
        //    mobile.causesCalculate(causesCalculate);
        //if (causesPopulate) {
        //    causesPopulate = causesPopulate.split(/\./);
        //    _app.find(causesPopulate[1])._raisePopulateDynamicLookups();
        //}
        //// re-calculate the visual state of the current view
        //var dataView = mobile.dataView();
        //if (dataView && !target.is(':checkbox,:radio'))
        //    setTimeout(function () {
        //        dataView.extension().calculate(mobile.dataView());
        //    }, 200);
    }

    //function handleTriggeredCheckboxRadioClicks(event) {
    //    var target = $(event.target),
    //        parentFieldSetContainer,
    //        input,
    //        field,
    //        newValue = [],
    //        oldValue;
    //    parentFieldSetContainer = target.closest('.app-container-scrollable');
    //    if (parentFieldSetContainer.length) {
    //        input = parentFieldSetContainer.next();
    //        field = parentFieldSetContainer.data('data-field');
    //        parentFieldSetContainer.find(':checkbox,:radio').each(function (index) {
    //            if ($(this).is(':checked')) {
    //                if (newValue.length)
    //                    newValue.push(',');
    //                newValue.push(lovOf(field)[index][0]);
    //            }
    //        });
    //        oldValue = input.val();
    //        input.val(newValue.join(''));
    //        if (oldValue != input.val())
    //            ensureCausesCalculate(input);
    //    }
    //}

    //function renderScrollableContainer(field, fieldInput, fieldInfo) {
    //    var multipleChoices = field.ItemsStyle == 'CheckBoxList',
    //        lov = lovOf(field, fieldInfo),
    //        inputId = fieldInput.attr('id'),
    //        fieldSetContainer = fieldInput.prev(),
    //        doReplace = fieldSetContainer.is('.app-container-scrollable'),
    //        existingFieldSets,
    //        fieldSet,
    //        fieldSetList = [],
    //        v = fieldInput.val(),
    //        selectedValues = v.split(/\s*,\s*/), //v != null ? v.toString().split(/\s*,\s*/) : [],
    //        itemsPerColumn = Math.min(Math.ceil(lovOf(field).length / (field.Columns > 1 ? field.Columns : 1)), Math.max(Math.ceil(mobile.screen().height * .45 / checkBoxRadioHeight()), 3));

    //    if (doReplace) {
    //        existingFieldSets = fieldSetContainer.find('fieldset');
    //        existingFieldSets.find(':checkbox,:input').off().checkboxradio('destroy');
    //        existingFieldSets.controlgroup('destroy');
    //        fieldSetContainer.empty();

    //    }
    //    else
    //        fieldSetContainer = $('<div class="app-container-scrollable"></div>').attr('data-columns', field.Columns);

    //    $(lov).each(function (index) {
    //        if (index % itemsPerColumn == 0) {
    //            fieldSet = $('<fieldset class="app-controlgroup-vertical"/>').appendTo(fieldSetContainer);
    //            fieldSetList.push(fieldSet);
    //        }
    //        var option = this,
    //            optionValue = option[0],
    //            optionInput = $('<input/>').attr({ 'id': inputId + index, 'type': multipleChoices ? 'checkbox' : 'radio' }).appendTo(fieldSet),
    //            optionLabel = $('<label/>').attr('for', inputId + index).appendTo(fieldSet).text(option[1]);
    //        if (!multipleChoices)
    //            optionInput.attr('name', inputId);
    //        if (!field.HtmlEncode)
    //            optionLabel.html(option[1]);
    //        if (multipleChoices)
    //            optionValue = optionValue != null ? optionValue.toString() : '';
    //        if (multipleChoices && selectedValues.indexOf(optionValue) != -1 || !multipleChoices && optionValue == v)
    //            optionInput.attr('checked', 'true');
    //    });
    //    if (doReplace) {
    //        if (lov.length) {
    //            //var firstChild = fieldSetContainer.children().first(),
    //            //    h = firstChild.length ? firstChild.height() : 0;
    //            //if (h > cssUnitsToNumber(fieldSetContainer.css('min-height')))
    //            //    fieldSetContainer.css('min-height', h);
    //        }
    //        else
    //            fieldSetContainer.text(nullValueInForms);
    //    }
    //    else
    //        fieldSetContainer.insertBefore(fieldInput).data('data-field', field);
    //    $(fieldSetList).controlgroup().find(':checkbox,:radio').checkboxradio();
    //    fieldSetContainer.find(':checkbox,:radio').on('click', handleTriggeredCheckboxRadioClicks);
    //}

    //function adjustScrollableContainers(content, regroup) {
    //    content.find('.app-container-scrollable').each(function () {
    //        var maxWidth = 0,
    //            maxHeight = 0,
    //            scrollableContainer = $(this),
    //            fieldColumns = parseInt(scrollableContainer.attr('data-columns')),
    //            fieldSets = scrollableContainer.find('fieldset');
    //        if (regroup) {
    //            var inputs = fieldSets.find(':input'),
    //                itemsPerColumn = Math.min(Math.ceil(inputs.length / (fieldColumns > 1 ? fieldColumns : 1)), Math.max(Math.ceil(mobile.screen().height * .45 / checkBoxRadioHeight()), 3)),
    //                fieldSet,
    //                newFieldSets = [];
    //            fieldSets.find(':checkbox,:input').off().checkboxradio('destroy');
    //            fieldSets.controlgroup('destroy');
    //            inputs.each(function (index) {
    //                if (index % itemsPerColumn == 0) {
    //                    fieldSet = $('<fieldset class="app-controlgroup-vertical"/>').appendTo(scrollableContainer);
    //                    newFieldSets.push(fieldSet);
    //                }
    //                var input = $(this),
    //                    label = input.prev();
    //                label.appendTo(fieldSet);
    //                input.appendTo(fieldSet);
    //            });
    //            fieldSets.remove();
    //            fieldSets = $(newFieldSets).controlgroup().find(':checkbox,:radio').checkboxradio();
    //            scrollableContainer.find(':checkbox,:radio').on('click', handleTriggeredCheckboxRadioClicks);
    //        }


    //        if (!regroup)
    //            fieldSets.each(function () {
    //                $(this).height('').find('.ui-checkbox,.ui-radio').width('');
    //            });
    //        fieldSets.each(function () {
    //            var fieldSet = $(this),
    //                w = fieldSet.width(),
    //                h = fieldSet.height();
    //            if (w > maxWidth)
    //                maxWidth = w;
    //            if (h > maxHeight)
    //                maxHeight = h;
    //        });
    //        fieldSets.each(function () {
    //            $(this).height(maxHeight).find('.ui-checkbox,.ui-radio').width(maxWidth + 1);
    //        });
    //    });

    //}

    function clearHtmlSelection(delay) {
        var result = true;
        if (delay)
            setTimeout(function () {
                clearHtmlSelection();
            }, 5);
        else
            try {
                if (_window.getSelection) {
                    var range = _window.getSelection();
                    if (range && range.rangeCount > 0)
                        range.removeAllRanges();
                }
                else if (document.selection)
                    document.selection.empty();
            }
            catch (ex) {
                result = false;
            }
        return result;
    }

    function htmlSelection() {
        var range,
            result;
        if (document.selection && document.selection.createRange) {
            range = document.selection.createRange();
            result = range.htmlText;
        }
        else if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                range = selection.getRangeAt(0);
                var clonedSelection = range.cloneContents();
                var div = document.createElement('div');
                div.appendChild(clonedSelection);
                result = div.innerHTML;
            }
        }
        return result;
    }

    function hideMenuStrip(enable) {
        var stripInfo = mobile._menuStrip,
            strip = stripInfo && stripInfo.strip;
        if (strip) {
            strip.hide();
            if (arguments.length == 1)
                strip.attr('data-enabled', enable ? 'true' : 'false');
        }
    }

    function changeViewStyle(listview, viewStyle) {
        if (viewStyle == 'Cards')
            listview.addClass('app-cardview').removeClass('app-grid app-onecolumnview');
        else if (viewStyle == 'Grid')
            listview.addClass('app-grid').removeClass('app-cardview app-onecolumnview');
        else if (viewStyle == 'List')
            listview.addClass('app-onecolumnview').removeClass('app-cardview app-grid');
    }

    function changeViewStyleWithFeedback(dataViewId, viewStyle, keyValue) {
        var dataView = _app.find(dataViewId);
        resetInstruction(dataView);
        dataView.extension().viewStyle(viewStyle, keyValue);
        dataViewEchoChanged(dataViewId);
        refreshContext(true);
        refreshContext(false, 10);
    }

    function showPresenterInstruction(scrollable, extension) {
        if (!extension.instruction) return;
        var presenterInstruction = scrollable.find('> .app-presenter-instruction'),
            instruction = extension.instruction();
        if (!presenterInstruction.length)
            presenterInstruction = $('<div class="app-presenter-instruction"></div>').appendTo(scrollable).hide();
        if (instruction) {
            presenterInstruction.show();
            presenterInstruction.html(instruction);
        }
        else
            presenterInstruction.hide();
        revealStickyHeaderInstruction();
        resetStickyHeaderInstruction(extension.dataView(), scrollable.closest('.ui-page'), false, true);
    }

    function resetStickyHeaderInstruction(dataView, page, isGrid, isPresenter) {
        // update heading
        getPageInfo(dataView).stickyHeader.hide();
        var that = dataView.extension(),
            gridHeader;
        if (!that._instructed && dataView._totalRowCount != -1) {
            var instruction = that.instruction(),
                heading = stickyHeaderTemplate(page);
            if (instruction || isGrid) {
                heading.empty();
                that._instructed = true;
                if (!heading.length)
                    heading = $('<span class="dv-heading"/>').appendTo(page).hide();
                if (instruction)
                    $('<span class="app-view-instruction"/>').appendTo(heading).html(instruction.replace(/<a.*?<\/a>/gi, ''));
                heading.attr('data-selector', isPresenter ? '.app-presenter-instruction:visible' : 'ul.app-listview li.app-list-instruction');
                if (isGrid) {
                    gridHeader = createGridHeader(dataView, heading);
                    if (!instruction)
                        gridHeader.addClass('app-grid-header-no-description');
                }
                stickyHeader();
                if (isGrid || dataView.extension().viewStyle().match(/Cards|List/) && dataView.get_groupExpression())
                    $(document).trigger($.Event('scrollstop.app', { relatedTarget: findScrollable(page)/*.find('.ui-content .app-wrapper')*/ }));
            }
            else
                heading.remove();
        }
    }

    function refreshAllPresenters() {
        $('div[data-role="presenter"]').addClass('app-stale');
        showPresenters();
    }

    function showPresenters(scrollable) {

        function doShow(presenter) {
            var name = presenter.attr('data-presenter'),
                dataView = mobile.dataView(),
                id = dataView ? dataView._id : null,
                echo = presenter.closest('.app-echo');
            if (echo.length)
                id = echo.attr('data-for');
            if (id && presenter.css('display') != 'none')
                mobile.presenter('show', { name: name, id: id, container: scrollable || findScrollable(presenter) });
        }

        if (scrollable) {
            scrollable.find('div[data-role="presenter"]').each(function () {
                doShow($(this));
            });
            $('.ui-page:not(.ui-page-active) div[data-role="presenter"]').each(function () {
                var presenter = $(this);
                if (!presenter.closest('.app-echo-inner').length)
                    presenter.addClass('app-stale');
            });
        }
        else
            $('div[data-role="presenter"].app-stale').each(function () {
                var presenter = $(this);
                presenter.removeClass('app-stale');
                doShow(presenter);
            });
    }

    function resetMapHeight(wrapper) {
        wrapper.find('> .app-map').each(function () {
            var mapView = $(this),
                header = wrapper.find('> .app-page-header:visible'),
                instruction = wrapper.find('> .app-presenter-instruction:visible'),
                elementAbove = $(instruction.length && instruction || header.length && header),
                mapInfo = mapView.data('data-map');
            mapView.css('top', elementAbove.length ? elementAbove.position().top + elementAbove.outerHeight(true) : 0);
            if (mapView.is(':visible') && mapInfo) {
                var map = mapInfo.map,
                    center = map.getCenter();
                google.maps.event.trigger(map, "resize");
                map.setCenter(center);
            }
        });
    }

    //function resetInvisiblePageHeight(page) {
    //    var p = page[0];
    //    p.style.zIndex = -10;
    //    resetPageHeight(page);
    //    p.style.zIndex = '';
    //}

    function modalPageWidth() {
        var max = $settings('ui.modal.max'), w, sw = _screen.width;
        if (max)
            w = Math.min(toPhysicalWidth(max), sw - 30);
        else {
            w = Math.max(sw, _screen.height * .85);
            w = w <= toPhysicalWidth('xxs') ? (w - 30) : Math.ceil(w / 1.618);
            w = Math.min(w, toPhysicalWidth('md'));
        }
        return w;
    }

    function modalPageHeight() {
        var h = Math.max(768 / 2 - 30, _screen.width <= toPhysicalWidth('xxs') ? (_screen.height - 30) : Math.ceil(_screen.height * .8));
        if (h > _screen.height - 30)
            h = _screen.height - 30;
        return h;
    }

    function adjustFixedPageHeader(wrapper) {
        var fixedPageHeader = wrapper.prev();
        if (fixedPageHeader.is('.app-page-header-fixed')) {
            fixedPageHeader.css('top', parseCss(wrapper, 'top'));
            var headerHeight = fixedPageHeader.outerHeight();
            wrapper.data('header-height', headerHeight);
            var fixedPageImage = fixedPageHeader.prev();
            if (fixedPageImage.is('.app-page-header-image')) {
                fixedPageImage.css('height', '');
                fixedPageImage.css({ 'top': parseCss(wrapper, 'top'), height: fixedPageImage.height() + headerHeight });
            }
        }
    }

    function panelLayoutChanged(page) {
    }

    function resetPageHeight(p) {
        var activePage = findActivePage(),
            page = p || activePage;
        if (page.is('.app-page-panel'))
            return;
        var
            isActive = page.attr('id') == activePage.attr('id') || page.is('.app-page-modal-root'),
            isModal = page.is('.app-page-modal'),
            //prototypePage = isActive ? page : activePage,
            pagePaddingTop = getToolbarHeight(),//prototypePage.css('padding-top'),
            pageMinHeight = _screen.height - getToolbarHeight(),//prototypePage[0].style.minHeight,//prototypePage.css('min-height'),
            pageContent = page.find('.ui-content'),
            tabs = pageContent.children().filter(function () {
                return $(this).is('.app-bar-header,.app-bar-actions,.app-tabs');
            }),
            footers = pageContent.find('.app-bar-footer'),
            fixedTop = contentFramework && page.find(contentFramework.fixedTop.selector),
            fixedTopHeight = fixedTop && fixedTop.css('position') == 'fixed' && fixedTop.outerHeight(),
            fixedBottom = contentFramework && page.find(contentFramework.fixedBottom.selector),
            fixedBottomHeight = fixedBottom && fixedBottom.css('position') == 'fixed' && fixedBottom.outerHeight(),
            pageIsStale = page.is('.app-stale'),
            wrapperBottom = 0, isFullscreen,
            screenGap = _screen.width < 480 && !page.is('.app-page-modal-gap-required') ? 0 : 15;
        if (isModal) {
            var classAttr = page.attr('class'),
                maxSize = classAttr.match(/\bapp\-page\-modal\-max\-(tn|xxs|xs|sm|md|lg|xl|xxl|any)\b/),
                dock = classAttr.match(/\bapp\-page\-modal\-dock\-(top|left|right|bottom)\b/),
                modalHeight = modalPageHeight(),
                modalWidth = modalPageWidth(),
                maxModalWidth = maxSize ? toMaxPhysicalWidth(maxSize[1]) : 0;
            if (dock)
                dock = dock[1];
            if (maxSize)
                modalWidth = Math.min(_screen.width - screenGap * 2, maxModalWidth);
            isFullscreen = page.is('.app-page-modal-fullscreen');
            if (isFullscreen) {
                modalWidth = _screen.width - screenGap * 2;
                modalHeight = _screen.height - screenGap * 2;
            }
            var wrapper = findScrollable(page),//.find('.ui-content .app-wrapper'),
                tabsHeight = 0;

            var pageInfo = getPageInfo(page.attr('id')),
                dataView = pageInfo && pageInfo.dataView,
                pageTop = (_screen.height - modalHeight) / 2,
                pageLeft = (_screen.width - modalWidth) / 2,
                pageRight, pageBottom;
            if (dock) {
                if (dock == 'top') {
                    pageTop = screenGap;
                    //if (_screen.height < 384)
                    //    modalHeight = _screen.height - 30;
                }
                else if (dock == 'left') {
                    pageLeft = screenGap;
                    if (!dataView || !dataView.tagged('modal-fit-content')) {
                        pageTop = screenGap;
                        pageBottom = screenGap;
                        modalHeight = _screen.height - screenGap * 2;
                    }
                }
                else if (dock == 'bottom') {
                    pageTop = 'auto';
                    pageBottom = screenGap;
                    //if (_screen.height < 384)
                    //    modalHeight = _screen.height - 30;
                }
                else if (dock == 'right') {
                    pageLeft = 'auto';
                    pageRight = screenGap;
                    if (!dataView || !dataView.tagged('modal-fit-content')) {
                        pageTop = screenGap;
                        pageBottom = screenGap;
                        modalHeight = _screen.height - screenGap * 2;
                    }
                }
            }
            if (isVirtualScreen()) {
                if (pageTop != 'auto')
                    pageTop += _screen.top;
                if (pageLeft != 'auto')
                    pageLeft += _screen.left;
                if (pageBottom != null && pageBottom != 'auto')
                    pageBottom -= _screen.bottom;
                if (pageRight != null && pageRight != 'auto')
                    pageRight -= _screen.right;
            }
            page.css({
                'padding-top': 0,
                top: pageTop,
                left: pageLeft,
                right: pageRight,
                bottom: pageBottom,
                'min-width': modalWidth,
                'max-width': modalWidth,
                width: modalWidth,
                'min-height': modalHeight,
                'max-height': modalHeight,
                height: modalHeight
            });


            footerHeight = footers.length ? footers.outerHeight() : 0;
            tabs.each(function () {
                var bar = $(this);
                if (bar.css('display') != 'none')
                    tabsHeight += bar.outerHeight(true);
            });
            var scrolling = wrapper.data('scrolling');
            wrapper.data('scrolling', true);
            page.find('.app-bar-actions,.app-bar-footer,.app-bar-header').each(function () {
                var elem = $(this);
                elem.width(modalWidth - parseCss(elem, 'padding-left') - parseCss(elem, 'padding-right'));
            });
            tabsHeight += page.find('.app-page-modal-title').outerHeight();

            wrapper.css({
                top: tabsHeight,
                left: 0,
                'min-width': modalWidth + scrollbarInfo.width,
                'max-width': modalWidth + scrollbarInfo.width,
                width: modalWidth + scrollbarInfo.width,
                'min-height': modalHeight - footerHeight - tabsHeight,
                'max-height': modalHeight - footerHeight - tabsHeight,
                height: modalHeight - footerHeight - tabsHeight
            });


            if (!isFullscreen && dataView && dataView.tagged('modal-fit-content')) {
                var stub = wrapper.find('.app-stub'),
                    stubPos, newHeight, heightDelta;
                if (stub.length) {
                    stubPos = stub.position();
                    newHeight = Math.ceil(stubPos.top + stub.height() + wrapper.scrollTop());
                    heightDelta = /*wrapper.height()*/ (/*modalHeight*/ wrapper.height()/* - footerHeight - tabsHeight*/) - newHeight;
                    if (heightDelta > 0) {
                        wrapper.css({
                            'min-height': modalHeight - footerHeight - tabsHeight - heightDelta,
                            'max-height': modalHeight - footerHeight - tabsHeight - heightDelta,
                            height: modalHeight - footerHeight - tabsHeight - heightDelta
                        });
                        modalHeight -= heightDelta;
                        if (dock != 'top' && dock != 'bottom')
                            pageTop = _screen.top + (_screen.height - modalHeight) / 2;
                        page.css({
                            top: pageTop,
                            'min-height': modalHeight,
                            'max-height': modalHeight,
                            height: modalHeight
                        })
                    }
                }
                page.addClass('app-page-modal-fit-content');
            }
            //var fixedPageHeader = wrapper.prev();
            //if (fixedPageHeader.is('.app-page-header-fixed')) {
            //    fixedPageHeader.css('top', parseInt(wrapper.css('top')));
            //    wrapper.data('header-height', fixedPageHeader.outerHeight());
            //    var fixedPageImage = fixedPageHeader.prev();
            //    if (fixedPageImage.is('.app-page-header-image'))
            //        fixedPageImage.css('top', parseInt(wrapper.css('top')));
            //}
            adjustFixedPageHeader(wrapper);


            wrapper.data('vscrollbar').css({
                height: modalHeight - footerHeight - tabsHeight,
                right: 0,
                top: tabsHeight
            });
            resetMapHeight(wrapper);
            if (!scrolling)
                wrapper.data('scrolling', false);
        }
        else {
            //if (isActive) {
            //$mobile.resetActivePageHeight();
            //pageMinHeight = prototypePage.css('min-height');
            //}
            //else
            //    page.css({ 'padding-top': pagePaddingTop, 'min-height': pageMinHeight });
            //pageMinHeight = parseCss(pageMinHeight);
            page.css({ 'padding-top': pagePaddingTop, 'min-height': pageMinHeight });

            pagePaddingTop = parseCss(pagePaddingTop)
            if (isHosted && !toolbarIsVisible && page.attr('id') == 'Main') {
                pagePaddingTop = 0;
                pageMinHeight += getToolbarHeight();
            }
            var pageLeft = appBars.left.visible ? appBars.left.width + 1 : 0,
                pageRight = appBars.right.visible ? appBars.right.width + 1 : 0;
            if (isVirtualScreen()) {
                pageLeft += _screen.left;
                pageRight -= _screen.left;
            }

            page.css({ left: pageLeft, right: pageRight, width: _screen.width - pageRight - pageLeft/* + 1*/, top: isVirtualScreen() ? _screen.top : '' });
            findScrollable(page)/*.find('.ui-content .app-wrapper')*/.each(function () {
                var wrapper = $(this),
                    tabsHeight = 0; // tabs.length ? tabs.outerHeight(true) : 0;
                var scrolling = wrapper.data('scrolling');
                wrapper.data('scrolling', true);

                tabs.each(function () {
                    var bar = $(this);
                    if (bar.css('display') != 'none')
                        tabsHeight += bar.outerHeight(true);
                });
                footers.each(function () {
                    var bar = $(this);
                    if (bar.css('display') != 'none')
                        wrapperBottom += bar.outerHeight(true);
                });
                if (tabsHeight) {
                    pageMinHeight = pageMinHeight - tabsHeight;
                    pagePaddingTop = pagePaddingTop + tabsHeight;
                }
                if (fixedTopHeight) {
                    pageMinHeight -= fixedTopHeight;
                    pagePaddingTop += fixedTopHeight;
                }
                if (fixedBottomHeight) {
                    pageMinHeight -= fixedBottomHeight;
                    wrapperBottom += fixedBottomHeight;
                }
                if (wrapperBottom)
                    wrapperBottom -= 2;

                var wrapperHeight = pageMinHeight - wrapperBottom;

                if (page.is('.app-has-panel'))
                    $(getPageInfo(page.attr('id')).dataView._panels).each(function () {
                        var p = this,
                            pageLeft = parseCss(page, 'left'),
                            wrapperWidth = _screen.width - (appBars.right.visible ? appBars.right.width : 0) - pageLeft - 1,
                            panelWidth = wrapperWidth;
                        $(p.pages).each(function () {
                            var panel = this;
                            if (panel.is('.app-page-panel-active'))
                                if (p.location == 'right') {
                                    panelWidth = Math.ceil(wrapperWidth * p.size / 100);
                                    page.css({ 'right': pageRight + panelWidth });
                                    panel.css({ top: parseCss(page, 'top'), left: 'auto', bottom: wrapperBottom, width: panelWidth, 'min-height': parseCss(page, 'min-height') });
                                    //panel.css({ top: 0, left: 'auto', bottom: wrapperBottom, width: panelWidth, 'min-height': _screenHeight });
                                    //findScrollable(panel).css({ top: 0, bottom: 0, height: _screenHeight });
                                }
                        });
                    });

                wrapper.css({ 'top': pagePaddingTop, bottom: wrapperBottom, 'min-height': wrapperHeight });
                if (isActive)
                    wrapper.css({ 'height': wrapperHeight });
                if (scrollbarInfo.width)
                    wrapper.css('width', '').width(wrapper.width() + scrollbarInfo.width);


                // update the vscrollbar of the wrapper
                wrapper.data('vscrollbar').css({
                    height: pageMinHeight - wrapperBottom,
                    right: 0,
                    top: pagePaddingTop
                });

                adjustFixedPageHeader(wrapper);

                resetMapHeight(wrapper);
                if (!scrolling)
                    wrapper.data('scrolling', false);
            });
        }
        if (isTouchPointer)
            $body.scrollTop(0);
    }

    function findCookieValue(name) {
        var cookies = document.cookie.split(';'), i, c;
        for (i in cookies) {
            c = cookies[i].trim();
            if (c.startsWith(name + '='))
                return c.substring(name.length + 1);
        }
    }

    function createCookie(name, value, days) {
        var expires = '';
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toGMTString();
        }
        document.cookie = name + "=" + value + expires + "; path=/";
    }

    function initTouchUI() {
        //settings = __settings;
        var
            highDisplayDensity = $settings('ui.displayDensity.mobile')/* settings.mobileDisplayDensity*/,
            lowDisplayDensity = $settings('ui.displayDensity.desktop')/*settings.desktopDisplayDensity*/,
            sysBrowser = Sys.Browser,
            futureDate,
            expires,
            cookie,
            pageHeaderParent = $('#PageHeader').parent(),
            //pageTheme,// = $body.attr('data-theme') || (pageHeaderParent.attr('class') || '').match(/\bpage-theme-(\w+)\b/i),
            cookieTheme,
            firstContentPage = $('div[data-content-framework]').first(),
            //buttonShapes = userVariable('buttonShapes'),
            promoteActions = userVariable('promoteActions'),
            smartDates = userVariable('smartDates');

        // find theme cookie
        var user = settings.appInfo.split('|')[1],
            cookieThemeValue = findCookieValue('.COTTHEME' + user);
        if (cookieThemeValue) {
            var vs = cookieThemeValue.split('.');
            if (vs.length > 1)
                cookieTheme = { theme: vs[0], accent: vs[1] };

        }

        if (!pageHeaderParent.length)
            pageHeaderParent = $body;

        function validateSidebar(value) {
            if (value)
                value = value.match(/Landscape|Always|Never/);
            return value ? value[0] : 'Landscape';
        }

        //settings.mapApiIdentifier = settings.mapApiIdentifier;
        $settings('membership.profile', $settings('membership.profile') || 'view switch login logout');
        $settings('ui.transitions.style', userVariable('transitions') || $settings('ui.transitions.style') || (android || highScreenDPI() || $app.host ? 'slide' : 'none'));
        mobile._uiSideBarWhen = userVariable('sidebar') || validateSidebar($settings('ui.sidebar.when'))
        $settings('ui.sidebar.when', mobile._uiSideBarWhen || (sidebarIsAllowed() ? 'Always' : 'Landscape'));
        var userMiniSideBar = userVariable('minisidebar');
        $settings('ui.sidebar.mini', userMiniSideBar != null ? userMiniSideBar : $settingsEnabled('ui.sidebar.mini') || $settings('ui.sidebar.mini') == null && _screen.width <= toPhysicalWidth('lg'));
        $settings('ui.menu.location', isHosted ? 'toolbar' : $settings('ui.menu.location') ? $settings('ui.menu.location') : 'toolbar');
        settings.bars = { left: { visible: false, width: 0, content: [] }, bottom: { visible: false, height: 0, content: [] }, right: { visible: false, width: 0, content: [] } };
        $settings('ui.theme.name', userVariable('theme') || cookieTheme && cookieTheme.theme || $settings('ui.theme.name'));
        $settings('ui.theme.accent', userVariable('accent') || cookieTheme && cookieTheme.accent || $settings('ui.theme.accent'));
        $settings('ui.displayDensity.value', userVariable('displayDensity') ||
            (screenDPI < 144 ? lowDisplayDensity :
                (highDisplayDensity == 'Auto' ? (screenDPI >= 432 ? 'Comfortable' : 'Compact') : highDisplayDensity)));
        //labelsInForm: userVariable('labelsInForm') || settings.labelsInForm,
        $settings('ui.list.labels.display', userVariable('labelsInList') || $settings('ui.list.labels.display')),
            $settings('ui.showSystemButtons', userVariable('showSystemButtons') || $settings('ui.showSystemButtons') || 'Auto');
        //buttonShapes: buttonShapes != null ? buttonShapes : settings.buttonShapes
        $settings('ui.actions.promote', promoteActions != null ? promoteActions : $settings('ui.actions.promote'));
        $settings('ui.list.initialMode', isHosted ? 'Summary' : (userVariable('initialListMode') || $settings('ui.list.initialMode') || 'SeeAll'));
        $settings('ui.smartDates', smartDates != null ? smartDates : $settings('ui.smartDates') == true);

        appBars = settings.bars;

        if (sysBrowser.agent == sysBrowser.InternetExplorer && sysBrowser.version <= 9 && !(__settings.host || window.external)) {
            $body.hide();
            if (settings.defaultUI) {
                futureDate = new Date().getDate() + 365,
                    expires = new Date();
                expires.setDate(futureDate);
                cookie = String.format('appfactorytouchui=false; expires={0}; path=/', expires.toUTCString());
                document.cookie = cookie;
                location.reload($mobile.path.parseUrl(location.href).hrefNoHash);
            }
            else
                alert(resourcesMobile.TouchUINotSupported);
        }

        if (iOS) {
            $body.addClass('app-ios');
            if (iOSMajorVersion < 8)
                $body.addClass('app-ios7');
        }
        if (android)
            $body.addClass('app-android');

        //if (settings.buttonShapes == false)
        //    $body.addClass('app-buttons-text-only');

        if ($settings('ui.showSystemButtons') != 'Always')
            $body.addClass('app-show-system-buttons-on-hover');

        //$('<link href="http://fonts.googleapis.com/css?family=Roboto" rel="stylesheet" type="text/css">').appendTo($('head'));

        if (pageHeaderParent.is('.Tall'))
            $body.addClass('app-page-header-hidden');
        if (pageHeaderParent.is('.Wide') || ($settings('ui.menu.location') != 'sidebar' && (firstContentPage.length && firstContentPage.attr('data-sidebar') != 'true')) || (!firstContentPage.length && $('div[data-app-role="page"]').first().attr('data-sidebar') == 'false')) {
            $settings('ui.sidebar.when', 'Never');
            $settings('settings.options.sidebar', false);
        }

        if (isHosted) {

            if (!location.href.match(/_showNavigation=false/)) {
                $body.addClass('app-hosted-show-navigation');
                toolbarIsVisible = true;
                mobile._toolbar.css('visibility', '');
            }
            if (location.hash) {
                $body.children().hide();
                location.reload(location.pathname + location.search);
                return;
            }
            $body.addClass('app-hosted');
        }

        $(document).trigger($.Event('init.app'));

        $mobile.defaultPageTransition = 'none';//settings.pageTransition;
        // configure left, right, and bottom panels
        var sidebar = $('<div id="app-sidebar" class="ui-panel ui-panel-fixed ui-body-a app-sidebar app-sidebar-left app-sidebar"><div class="ui-panel-inner" tabindex="0"><ul/></div><div class="app-bar-toolbar-bottom"></div></div>').appendTo($body),
            inner = sidebar.find('.ui-panel-inner');
        screenChanged_sidebar({ sidebar: sidebar });

        if (scrollbarInfo.width)
            inner.css({ 'overflow-y': 'scroll', width: sidebar.width() - parseCss(inner, 'padding-left') - parseCss(inner, 'padding-right') + scrollbarInfo.width });
        appBars.left.inner = inner;
        appBars.left.toolbar = inner.next();
        appBars.left.content.push(sidebar.find('ul').listview());
        sidebar = $('<div class="ui-panel ui-panel-fixed ui-body-a app-sidebar app-sidebar-right"><div class="ui-panel-inner" tabindex="0"><ul/></div></div>').appendTo($body);
        inner = sidebar.find('.ui-panel-inner');
        //if (scrollbarInfo.width)
        //    inner.css({ 'overflow-y': 'scroll', width: sidebar.width() - parseCss(inner, 'padding-left') - parseCss(inner, 'padding-right') + scrollbarInfo.width });
        appBars.right.inner = inner;
        appBars.right.content.push(sidebar.find('ul').listview());

        if ($settingsEnabled('ui.sidebar.mini'))
            appBars.left.mini = true;
        updateSidebarVisibility();


        if (!$settings('ui.displayDensity.value'))
            $settings('ui.displayDensity.value', isTouchPointer ? 'Comfortable' : 'Compact');

        $body.addClass(themeToClass($settings('ui.theme.name')));
        $body.addClass('app-accent-' + $settings('ui.theme.accent'));
        $body.addClass(displayDensityToClass($settings('ui.displayDensity.value')));
        //if (settings.labelsInForm == 'AlignedRight')
        //    $body.addClass('app-labelsinform-alignedright');
        if ($settings('ui.list.labels.display') == 'DisplayedAbove')
            $body.addClass('app-labelsinlist-displayedabove');
    }

    function fitTabs(page) {
        mobile.tabs('fit', { page: page });
    }

    function restoreScrolling(page) {
        page = $(page);
        findScrollable(page)/*.find('.ui-content .app-wrapper')*/.each(function () {
            var wrapper = $(this),
                scrollTop = wrapper.data('scroll-top');
            //if (scrollTop && wrapper.scrollTop() != scrollTop)
            //    scrollWrapper(wrapper, scrollTop);
        });
        page.find('.app-echo-inner').each(function () {
            var wrapper = $(this),
                scrollLeft = wrapper.data('scroll-left');
            if (wrapper.parent().is(':visible') && scrollLeft && wrapper.scrollLeft() != scrollLeft) {
                wrapper.scrollLeft(scrollLeft);
            }
        });
        restoreGridScrolling(page);
    }

    function saveScrolling(page) {
        page = $(page);
        if (page.is(':visible')) {
            findScrollable(page)/*.find('.ui-content .app-wrapper')*/.each(function () {
                var wrapper = $(this);
                //wrapper.data('scroll-top', wrapper.scrollTop());
            });
            page.find('.app-echo-inner').each(function () {
                var wrapper = $(this);
                if (wrapper.parent().is(':visible'))
                    wrapper.data('scroll-left', wrapper.scrollLeft());
            });
        }
    }

    function getScrollInfo(wrapper) {
        var scrollTop = wrapper.scrollTop();
        return { top: scrollTop * -1, height: wrapper.height() + scrollTop, maxHeight: wrapper[0].scrollHeight };
    }

    //var scrollList = [];

    function registerPanelScroller(panel) {
        var wrapper = panel.find('.ui-panel-inner'),
            scrolling, lastScrollTop, scrollInterval;
        if (wrapper.length) {
            wrapper.on('scroll keydown keyup', function () {
                if (isInTransition || !isTouchPointer)
                    return;
                if (!scrolling) {
                    scrolling = true;
                    lastScrollTop = wrapper.scrollTop();
                    //scrollList = [lastScrollTop];

                    skipTap = true;
                    var lastCheck = new Date().getTime();

                    function checkScrollStop() {
                        var scrollTop = wrapper.scrollTop(),
                            scrollChanged = scrollTop != lastScrollTop;
                        if (scrollChanged || new Date().getTime() - lastCheck < 100) {
                            lastScrollTop = scrollTop;
                            //scrollList.push(scrollTop);
                            if (scrollChanged)
                                lastCheck = new Date().getTime();
                            requestAnimationFrame(checkScrollStop);
                        }
                        else {
                            //clearInterval(scrollInterval);
                            scrolling = false;
                            skipTap = false;
                            wrapper.data('scroll-stop-time', new Date());
                            // alert(scrollList.toString());
                        }
                    }

                    /*scrollInterval =*/ requestAnimationFrame(checkScrollStop);
                }
            })
        }
    }

    function unRegisterPanelScroller(panel) {
        panel.find('.ui-panel-inner').off('scroll keydown keyup');
    }

    function updateScrollbars(container, delayed) {
        if (!container)
            container = findScrollable();
        updateVScrollbar(container, false, delayed == true);
        container.find('.app-data-list').each(function () {
            updateHScrollbar($(this));
        });
    }

    function updateHScrollbar(container, scrollbarHandle, delay) {
        if (container.length)
            if (!scrollbarHandle) {
                scrollbarHandle = container;
                if (container.parent().attr('class').match(/\-outer/))
                    scrollbarHandle = container.parent();
                scrollbarHandle = scrollbarHandle.next().find('.app-hscrollbar-handle');
            }
        var scrollLeft = container.scrollLeft();

        function change() {
            scrollbarHandle.css({
                left: scrollLeft * ratio,
                width: container.width() * ratio,
                display: ''
            });
        }

        var width = container.width(),
            scrollWidth = container[0].scrollWidth,
            ratio = Math.abs(width - scrollWidth) <= 2 ? 1 : width / scrollWidth;
        scrollbarHandle.parent().css('visibility', ratio == 1 ? 'hidden' : '');
        if (ratio == 1 || container.find('.app-hidden').length) {
            scrollbarHandle.css('display', 'none');
            container.removeClass('app-inner-shadow-left app-inner-shadow-right app-inner-shadow-left-right');
        }
        else {
            if (scrollLeft <= 0)
                container.addClass('app-inner-shadow-right').removeClass('app-inner-shadow-left app-inner-shadow-left-right');
            else if (scrollLeft >= container[0].scrollWidth - container[0].clientWidth - 1)
                container.addClass('app-inner-shadow-left').removeClass('app-inner-shadow-right app-inner-shadow-left-right');
            else
                container.addClass('app-inner-shadow-left-right').removeClass('app-inner-shadow-right app-inner-shadow-left');
            //if (delay && false)
            //    requestAnimationFrame(change);
            //else
            //  change();
            change();
        }
    }

    function updateVScrollbar(wrapper, vscrollbarHandle, delayed) {
        if (wrapper.length)
            if (delayed) {
                clearTimeout(_window._updateVScrollbarTimeout)
                _window._updateVScrollbarTimeout = setTimeout(function () {
                    updateVScrollbar(wrapper, vscrollbarHandle);
                }, 100);
            }
            else {
                if (!vscrollbarHandle)
                    vscrollbarHandle = wrapper.next().find('.app-vscrollbar-handle');
                var scrollHeight = wrapper[0].scrollHeight,
                    wrapperHeight = wrapper.height(),
                    ratio = wrapperHeight / scrollHeight,
                    vscrollbar = vscrollbarHandle.parent(),
                    page = wrapper.parent().parent();
                footer = vscrollbar.next();
                vscrollbar.css('visibility', ratio == 1 ? 'hidden' : '');
                if (ratio == 1) {
                    vscrollbarHandle.css('display', 'none');
                    footer.addClass('app-bar-footer-no-scrolling');
                    page.removeClass('app-page-scrolled');
                }
                else {
                    requestAnimationFrame(function () {
                        var scrollTop = wrapper.scrollTop(),
                            h = wrapperHeight * ratio,
                            topAdjustment = 0;
                        if (h < 16) {
                            h = 16;
                        }
                        vscrollbarHandle.css({
                            top: scrollTop * ratio - topAdjustment,
                            //transform: 'translate3d(0,' + wrapper.scrollTop() * ratio + 'px,0)',
                            height: h,
                            display: ''
                        });
                        if (scrollHeight <= scrollTop + wrapperHeight)
                            footer.addClass('app-bar-footer-no-scrolling');
                        else
                            footer.removeClass('app-bar-footer-no-scrolling');
                        var hh = wrapper.data('header-height');
                        page.toggleClass('app-page-scrolled', scrollTop > (hh || 50));
                    });
                }
            }
    }

    function createScroller(page, handleScrollingEvents) {
        var wrapper = findScrollable(page)/*.find('.ui-content .app-wrapper').first()*/,
            vscrollbar, vscrollbarHandle,
            content, children,
            scrolling, lastScrollTop, scrollInterval/*,
            startTime, startScroll, waitForScrollEvent*/;



        //function notifyDir(dir) {
        //    wrapper.data('scroll-dir', dir);
        //    $(document).trigger($.Event('scrolldir.app', { relatedTarget: wrapper }));
        //}

        function notifyScrollDirChange() {
            lastScrollTop = wrapper.data('lastScrollTop');
            if (lastScrollTop == null)
                lastScrollTop = 0;
            var lastDirection = wrapper.data('scroll-dir'),
                scrollTop = wrapper.scrollTop(),
                newDirection = scrollTop < lastScrollTop ? 'up' : (scrollTop == lastScrollTop ? 'none' : 'down');
            //document.title = newDirection + ',' + lastDirection + ',' + scrollTop;
            if (newDirection == 'none' && lastDirection == 'none')
                newDirection = 'up';
            if (newDirection != lastDirection) {
                //notifyDir(newDirection);
                wrapper.data('scroll-dir', newDirection);
                $(document).trigger($.Event('scrolldir.app', { relatedTarget: wrapper }));
            }
        }

        if (!wrapper.length) {
            content = page.find('.ui-content');
            children = content.contents();
            wrapper = $('<div class="app-wrapper"></div>').appendTo(content);//.css('right', -scrollbarInfo.width);
            if (scrollbarInfo.width)
                wrapper.css('overflow-y', 'scroll');
            var windowWidth = _screen.width;
            wrapper.toggleClass('app-display-tablet', windowWidth >= toPhysicalWidth('sm') + (appBars.left.visible ? appBars.left.width : 0))

            vscrollbar = $('<div class="app-vscrollbar"></div>').insertAfter(wrapper);
            vscrollbarHandle = $('<div class="app-vscrollbar-handle" data-draggable="vscrollbar"></div>').appendTo(vscrollbar);
            wrapper.data({ 'vscrollbar': vscrollbar, 'vscrollbar-handle': vscrollbarHandle });
            updateVScrollbar(wrapper, vscrollbarHandle);

            enhanceScrolling(wrapper, false);

            var pageInfo = mobile.pageInfo(page);
            if (pageInfo && pageInfo.external)
                vscrollbar.css('display', 'none');

            if (handleScrollingEvents == false)
                wrapper.on('scroll', function (event) {
                    updateVScrollbar(wrapper, vscrollbarHandle);
                });
            else
                wrapper/*.on('wheel DOMMouseWheel mousewheel', function (event) {
                    if (scrolling && 'deltaY' in event.originalEvent) {
                        var lastDirection = wrapper.data('scroll-dir'),
                            newDirection = event.originalEvent.deltaY > 0 ? 'down' : 'up';
                        if (newDirection != lastDirection)
                            notifyDir(newDirection);
                    }
                }).on('touchstart', function (e) {
                        saveTouchPoint(e);
                        if (iOS && iOSMajorVersion < 8) {
                            waitForScrollEvent = false;
                            touchScrolling = true;
                        }
                    }).on('touchmove', function () {
                        if (iOS) {
                            startTime = timeNow();
                            startScroll = wrapper.scrollTop();
                        }
                    }).on('touchend', function (e) {
                        saveTouchPoint(e);
                        if (iOS && iOSMajorVersion < 8) {
                            var deltaTime = timeNow() - startTime,
                                currentScrollTop = wrapper.scrollTop(),
                                deltaScroll = Math.abs(startScroll - currentScrollTop);
                            if (deltaTime > 0 && deltaScroll / deltaTime > 0.25 || currentScrollTop < 0 || currentScrollTop > wrapper.height())
                                waitForScrollEvent = true;
                            else
                                touchScrolling = false;
                        }
                    })*/.on('scroll', function (event) {

                        if (isInTransition || wrapper.data('scrolling')) {
                            clearInterval(wrapper.data('scrollInterval'));
                            wrapper.data('lastScrollTop', wrapper.scrollTop());
                            scrolling = false;
                            skipTap = false;
                            return;
                        }

                        updateVScrollbar(wrapper, vscrollbarHandle);

                        // DEBUG
                        //_window._sc = scrolling ? _window._sc + 1 : 1; 


                        if (!scrolling) {
                            //wrapper.data('lastScrollTop', wrapper.scrollTop());
                            scrolling = true;

                            hideTooltip();
                            $(document).trigger($.Event('scrollstart.app', { relatedTarget: wrapper }));
                            skipTap = true;
                            vscrollbar.addClass('app-scrollbar-reveal');

                            var timeCheck = new Date().getTime();


                            function checkScrollStop() {
                                var scrollTop = wrapper.scrollTop();

                                // DEBUG
                                //$('.app-bar-toolbar .ui-title').text(_window._sc + ': ' + scrollTop + ', ' + lastScrollTop);

                                var scrollChanged = scrollTop != lastScrollTop,
                                    now = new Date().getTime();

                                if (scrollChanged || now - timeCheck < 100) {
                                    lastScrollTop = scrollTop;
                                    if (scrollChanged)
                                        timeCheck = now;
                                    requestAnimationFrame(checkScrollStop);
                                }
                                else {
                                    // DEBUG
                                    //$('.app-bar-toolbar .ui-title').text('done: ' + _window._sc + ': ' + scrollTop + ', ' + lastScrollTop);
                                    clearInterval(wrapper.data('scrollInterval'));
                                    notifyScrollDirChange();
                                    scrolling = false;
                                    skipTap = false;
                                    wrapper.data({ 'scroll-stop-time': new Date(), 'lastScrollTop': scrollTop, scrollInterval: null });
                                    vscrollbar.removeClass('app-scrollbar-reveal');
                                    //if (waitForScrollEvent) {
                                    //    waitForScrollEvent = false;
                                    //    touchScrolling = false;
                                    //}
                                    $(document).trigger($.Event('scrollstop.app', { relatedTarget: wrapper }));
                                }
                            }

                            //wrapper.data('scrollInterval', setInterval(, 50));
                            requestAnimationFrame(checkScrollStop);
                        }
                        else
                            notifyScrollDirChange();
                    });
            if (!isTouchPointer)
                wrapper.attr('tabindex', 0);
            $('<div class="app-page-header"><h2/><h1/></div><div class="app-page-header-divider"></div>').appendTo(wrapper);
            children.appendTo(wrapper);
        }
        return wrapper;
    }

    function activeLink(link, causesTransition) {
        //isInTransition = link != null && causesTransition != false;
        mobile.activeLink(link);
    }

    function higlightButton(button) {
        activeLink(button);
        setTimeout(function () {
            activeLink();
        }, 200);
    }

    function callWithFeedback(link, method) {
        if (!method)
            method = nop;
        link = $(link);
        var classAttr = link.attr('class');
        if (classAttr && classAttr.match(/\bapp-btn-/)) {
            link.addClass('ui-btn-active');
            //setTimeout(function () {
            //    link.removeClass('ui-btn-active');
            //}, feedbackDelay);
            setTimeout(function () {
                //if (isInTransition && method == nop)
                //    setTimeout(function () {
                //        callWithFeedback(link);
                //    }, feedbackDelay);
                //else {
                link.removeClass('ui-btn-active');
                feedbackFrom = 'link';
                method(link);
                //}
            }, feedbackDelay);
        }
        else {
            activeLink(link);
            setTimeout(function () {
                if (isInTransition && method == nop) {
                }
                else {
                    activeLink();
                    feedbackFrom = 'link';
                    if (link && link.is('.app-btn'))
                        feedbackFrom = 'toolbar';
                    method(link);
                }
            }, feedbackDelay);
        }
    }

    function trimContentStub(scrollable, stub) {
        if (!stub)
            stub = scrollable.find('.app-stub,.app-stub-main');
        if (stub.length) {
            var stubTop = Math.ceil(stub.offset().top),
                //stubHeight = stub.outerHeight(true),
                scrollableTop = Math.ceil(scrollable.offset().top),
                scrollableHeight = scrollable.height();
            if (stubTop > scrollableTop)
                if (stubTop > scrollableTop + scrollableHeight)
                    stub.height('');
                else
                    stub.height(scrollableHeight - (stubTop - scrollableTop));
        }
    }

    //function halt() {
    //    mobile.promo(false);
    //    $body.find('> *').hide();
    //}

    function userActivity() {
        if (membership)
            membership._updateLastActivity();
    }


    function contextSidebar() {
        if (!sidebarElement || !sidebarElement.length)
            sidebarElement = $('.app-sidebar').first();
        return sidebarElement;
    }

    function sidebarIsVisible(location) {
        return settings.bars[location || 'left'].visible;// contextSidebar().is(':visible');
    }

    function clearPassiveCalculateTimeout(resetOldValue) {
        //if (passiveCalculateTimeout) {
        //    clearTimeout(passiveCalculateTimeout);
        //    passiveCalculateTimeout = null;
        //}
        //if (resetOldValue)
        //    passiveCalculateOldValue = null;
    }

    function executeContextAction(item, link, skipFocus) {
        if (item) {
            if (!skipFocus)
                focusScrollable();
            if (item.href)
                openHref(item.href);
            else if (item.callback)
                item.callback(item.context, link);
        }
    }

    function ensureFocusedLink(link) {
        var focusedLinks = link.closest('ul').find('.app-focus');
        link.closest('.ui-panel-inner').focus();
        if (focusedLinks.length) {
            focusedLinks.removeClass('app-focus ui-btn-active');
            link.addClass('app-focus ui-btn-active');
        }
    }

    function scrollFocusedLinkIntoView(link, inner) {
        if (link.length) {
            if (!inner)
                inner = link.closest('.ui-panel-inner');
            var itemOffset = link.offset(),
                innerOffset = inner.offset(),
                deltaY,
                top = innerOffset.top,
                bottom = top + inner.outerHeight() - 1;
            if (itemOffset.top < top)
                deltaY = itemOffset.top - top;
            else if (itemOffset.top + link.outerHeight() > bottom)
                deltaY = itemOffset.top + link.outerHeight() - bottom;
            if (deltaY)
                setTimeout(function () {
                    inner.scrollTop(inner.scrollTop() + deltaY);
                }, 10);
        }
    }

    function transitionStatus(inProgress) {
        var activePage = findActivePage();
        if (activePage)
            activePage.find('.dv-load-at-top').css('visibility', inProgress ? 'hidden' : '');
        isInTransition = inProgress;
    }

    function findActivePage(selector) {
        var activePage = $mobile.activePage;
        return arguments.length ? activePage.find(selector) : activePage;
    }

    function getActivePageId() {
        var activePage = findActivePage();
        return activePage ? activePage.attr('id') : '_';
    }

    function getPageInfo(selector) {
        return mobile.pageInfo(selector);
    }

    function getEcho(selector) {
        var pageInfo = getPageInfo(selector),
            echo = pageInfo.echo;
        if (!echo)
            echo = pageInfo.echo = $('#' + pageInfo.id + '_echo');
        return echo;
    }

    function isMainPageActive() {
        return getActivePageId() == 'Main';
    }

    function dateToHtmlString(d) {
        return d ? d.toJSON().slice(0, 10) : null;
    }

    function htmlStringToDate(s) {
        return s ? htmlStringToDateTime(s + 'T00:00:00') : null;
    }

    function htmlStringToDateTime(s) {
        return s ? new Date(s.substring(0, 4), parseInt(s.substring(5, 7)) - 1, s.substring(8, 10), s.substring(11, 13), s.substring(14, 16), 0, 0) : null;
    }

    function classNameOfColumnInGrid(dataView, field) {
        return 'rg_' + dataView._id + '_v_' + dataView._viewId + (dataView._groupExpression ? '_g_' + dataView._groupExpression.replace(/\W/g, '_') : '') + '_f_' + field.Name;
    }

    function classNameOfFirstScrollableColumnInGrid(dataView) {
        return 'rg_' + dataView._id + '_v_' + dataView._viewId + (dataView._groupExpression ? '_g_' + dataView._groupExpression.replace(/\W/g, '_') : '') + '_scroll_';
    }

    function fieldToColumns(field) {
        var columns = field.Columns;
        if (columns == 0 && field.Type == 'String')
            columns = Math.floor(field.Len);
        if (field.ItemsTargetController && !columns)
            columns = 80;
        else if (columns > 80)
            columns = 80;
        else if (!columns)
            if (field.Type == 'String') {
                columns = field.Rows > 1 ? 80 : 30;
                if (field.Len > 0 && field.Len < columns)
                    columns = field.Len;
            }
            else
                columns = 7;
        if (field.Type.match(/^Date/) && columns < 20)
            columns = field.DataFormatString == 'd' || field.DataFormatString == '{0:d}' ? 10 : columns;
        else if (field.Type == 'Guid' && columns < 36)
            columns = 36;
        return columns;
    }

    function fieldToMinWidth(field, elementWidth) {
        if (!elementWidth)
            elementWidth = displayDensity();
        var cols = field.cols != null ? field.cols : fieldToColumns(field),
            minCols = field.long ? cols * .5 : cols < 11 ? cols : (cols < 21 ? Math.ceil(cols * .5) : 10);
        return Math.ceil(elementWidth * (minCols <= 3 ? 1 : .55) * minCols);
    }

    function yardstick(listview) {
        var elementWidth = Math.ceil(displayDensity() * 1);
        $(listview || findActivePage('.app-listview')).each(function () {
            var view = $(this),
                viewParent = view.parent(),
                page = view.closest('.ui-page'), pageDisplay,
                //id = 'w' + Math.ceil((_screenWidth - (sidebarIsVisible() ? (appBars.left.visible ? appBars.left.width + 1 : 0) : 0)) / elementWidth),
                id = 'w' + Math.ceil(parseCss(page, 'width') / elementWidth),
                data = yardstickData[id],
                firstItem, cardItemWidth, listItemWidth, firstGridSpan, gridColumnPadding,
                widthClass, // = 'app-width',
                lastWidthClass = view.data('data-yardstick-class'),
                testListView = $body.find('#app-yardstick'),
                isGrid = view.is('.app-grid'),
                isEcho = viewParent.is('.app-echo-inner'),
                gridWidth,
                isEchoOrMap = isEcho || viewParent.is('.app-map-info'),
                listBreakpoint, cardBreakpoint;

            if (!data/* && !isEchoOrMap || isEcho && isGrid && !data*/) {
                if (!testListView.length)
                    testListView = $('<ul id="app-yardstick" class="app-listview"><li class="dv-item"><a><span>1</span></a></li><li><a class="dv-item">2</a></li><li><a class="dv-item">3</a></li></ul>').appendTo($body).listview();
                if (isEcho && isGrid)
                    viewParent = findScrollable(viewParent);
                testListView.addClass('app-onecolumnview').appendTo(viewParent).show();
                firstItem = testListView.find('li').first();

                pageDisplay = page.css('display');
                if (pageDisplay != 'block')
                    page.css('display', 'block');

                listItemWidth = firstItem.outerWidth();

                testListView.toggleClass('app-onecolumnview  app-cardview');
                cardItemWidth = firstItem.outerWidth();

                testListView.toggleClass('app-cardview app-grid');
                firstGridSpan = testListView.find('span').first();
                gridColumnPadding = parseCss(firstGridSpan, 'margin-left'); // firstGridSpan.outerWidth() - firstGridSpan.width();
                scrollbarInfo.gridColumnPadding = gridColumnPadding;
                gridWidth = firstItem.outerWidth();
                testListView.removeClass('app-grid');

                if (pageDisplay != 'block')
                    page.css('display', '');

                testListView.appendTo($body).hide();

                //listBreakpoint = 'xl';
                //if (listItemWidth < 480)
                //    listBreakpoint = 'tn';
                //else if (listItemWidth < 640)
                //    listBreakpoint = 'xxs';
                //else if (listItemWidth < 768)
                //    listBreakpoint = 'xs';
                //else if (listItemWidth < 992)
                //    listBreakpoint = 'sm';
                //else if (listItemWidth < 1199)
                //    listBreakpoint = 'md';
                //else if (listItemWidth < 1440)
                //    listBreakpoint = 'lg';
                listBreakpoint = toLogicalWidth(listItemWidth);

                //cardBreakpoint = 'xl';
                //if (cardItemWidth < 480)
                //    cardBreakpoint = 'tn';
                //else if (cardItemWidth < 640)
                //    cardBreakpoint = 'xxs';
                //else if (cardItemWidth < 768)
                //    cardBreakpoint = 'xs';
                //else if (cardItemWidth < 992)
                //    cardBreakpoint = 'sm';
                //else if (cardItemWidth < 1199)
                //    cardBreakpoint = 'md';
                //else if (cardItemWidth < 1440)
                //    cardBreakpoint = 'lg';

                cardBreakpoint = toLogicalWidth(cardItemWidth);


                data = { listBreakpoint: listBreakpoint, cardBreakpoint: cardBreakpoint, card: Math.floor(cardItemWidth / elementWidth), list: Math.floor(listItemWidth / elementWidth), columnPadding: gridColumnPadding, grid: {}, gridWidth: gridWidth };
                yardstickData[id] = data;
            }
            widthClass = 'app-listitem-' + (view.is('.app-cardview') ? data.cardBreakpoint : data.listBreakpoint);
            if (widthClass != lastWidthClass) {
                if (lastWidthClass)
                    view.removeClass(lastWidthClass);
                view.addClass('app-yardstick ' + widthClass).data('data-yardstick-class', widthClass);
            }
            if (isGrid) {
                var pageInfo = getPageInfo(isEcho ? findEcho(view).attr('data-for') : page.attr('id')),
                    dataView = pageInfo.dataView,
                    gridStyle = dataView.session('grid-style'),
                    gridIsFitted = dataGridIsFitted(dataView);
                if (!gridStyle || dataView.session('grid-style-changed') || gridIsFitted && (dataView.session('window-width') != _screen.width || dataView.session('grid-with-sidebar') != sidebarIsVisible())) {
                    dataView.session('grid-style-changed', null);
                    var fields = dataView._fields,
                        // itemMap = createItemMap(dataView),
                        allFields = dataView._allFields,
                        fieldList = [],
                        columns,
                        totalColumns = 0,
                        multiSelect = dataView.get_showMultipleSelection(),
                        availWidth = view.is(':visible') ? view.width() : data.gridWidth,
                        hasKey = dataView._hasKey(),
                        systemWidth = (hasKey ? 22 : 0) + (multiSelect ? (22 + 16) : 0) + scrollbarInfo.gridColumnPadding,
                        effectiveWidth = systemWidth,
                        effectiveFieldWidth,
                        minColumnWidth = /*(displayDensity() == 12 ? 6 : 5) */2 * elementWidth + data.columnPadding,
                        c,
                        gridSettings = dataView.gridSettings(),// dataView.viewProp('gridColumns'),
                        css = new Sys.StringBuilder();

                    $(fields).each(function (index) {
                        var originalField = this,
                            field = allFields[this.AliasIndex],
                            visible;

                        if (!originalField.Hidden && !field.GroupBy && !originalField.OnDemand && originalField.Type != 'DataView') {
                            columns = fieldToColumns(field);

                            effectiveFieldWidth = Math.ceil(Math.min(availWidth * .5, columns * elementWidth * (columns <= 3 ? 1 : .55))); //Math.min(availWidth * .5, columns * elementWidth); // 
                            if (gridSettings && gridSettings.width[field.Name])
                                effectiveFieldWidth = gridSettings.width[field.Name];
                            effectiveWidth += effectiveFieldWidth + scrollbarInfo.gridColumnPadding;

                            totalColumns += columns;

                            fieldList.push({
                                name: field.Name, className: classNameOfColumnInGrid(dataView, field), // String.format('gc_{0}_{1}_{2}', dataView._id, dataView._viewId, field.Name),
                                cols: columns, type: field.Type, ew: effectiveFieldWidth, long: field.ItemsDataController || field.Type == 'String' && field.Rows > 1
                            });
                        }
                    });

                    if (dataView) {
                        dataView.session('avail-width', availWidth);
                        var gridAvailWidth = dataView.session('grid-avail-width'),
                            physicalWidth = systemWidth, usePhysicalWidth,
                            hasCustomWidth,
                            scale;

                        if (dataView.tagged('grid-fit-none')) {
                            if (gridIsFitted)
                                dataGridIsFitted(dataView, false);
                            gridIsFitted = false;
                        }
                        if (gridSettings) {
                            for (var c in gridSettings.width)
                                hasCustomWidth = true;
                            if (hasCustomWidth) {
                                if (gridIsFitted)
                                    dataGridIsFitted(dataView, false); // dataView.viewProp('grid-is-fitted', false);
                                gridIsFitted = false;
                            }
                        }

                        if (gridAvailWidth != null && !gridIsFitted)
                            availWidth = gridAvailWidth;
                        else {
                            availWidth -= scrollbarInfo.gridColumnPadding + 1;
                            if (isEcho)
                                availWidth -= scrollbarInfo.width
                            // handle "auto" and "width" fitting here
                            if (gridIsFitted) {
                                if (availWidth < effectiveWidth) {
                                    scale = (availWidth - (multiSelect ? 22 : 0)) / effectiveWidth;
                                    $(fieldList).each(function (index) {
                                        var f = this,
                                            //minCols = f.cols < 11 ? f.cols : (f.cols < 21 ? Math.ceil(f.cols * .5) : 10),
                                            //minWidth = Math.ceil(elementWidth * (minCols <= 3 ? 1 : .55) * minCols);
                                            minWidth = fieldToMinWidth(f, elementWidth);
                                        f.ew = (f.ew + scrollbarInfo.gridColumnPadding) * scale - scrollbarInfo.gridColumnPadding;
                                        if (f.ew < minWidth) {
                                            f.ew = minWidth;
                                            usePhysicalWidth = true;
                                        }
                                        physicalWidth += f.ew + scrollbarInfo.gridColumnPadding;
                                    });
                                }
                                dataView.session('scroll-left', 0);
                            }
                            if (usePhysicalWidth)
                                availWidth = physicalWidth;
                            else if (!gridIsFitted)
                                availWidth = effectiveWidth;
                            dataView.session('grid-avail-width', Math.floor(availWidth));
                            dataGridIsFitted(dataView, gridIsFitted);
                            dataView.session('window-width', _screen.width);
                            dataView.session('grid-with-sidebar', sidebarIsVisible());
                        }
                    }

                    var firstField,
                        frozenWidth = 0,
                        frozenField = frozenFieldName(dataView),
                        isFrozen = frozenField != '_none_';

                    // create css rules
                    $(fieldList).each(function (index) {
                        c = this;
                        var w = c.ew; // Math.floor(c.cols / totalColumns * availWidth) - data.columnPadding;
                        if (c == firstField) {
                            // 22 is the width of "app-first::after" element, minus margin; it is also the width of "check" box
                            if (hasKey)
                                w -= 22;
                            if (multiSelect)
                                w -= 22 + data.columnPadding; // 54
                        }
                        if (frozenField != '_none_') {
                            frozenWidth += w + data.columnPadding;
                            if (frozenField == c.name || frozenField == '_first_')
                                frozenField = '_none_';
                        }

                        css.appendFormat('.{0} {{width:{1}px;max-width:{1}px}}', c.className, Math.floor(w));
                        css.appendLine();
                    });
                    var styleString = css.toString();
                    if (!gridStyle) {
                        gridStyle = createStyle(); // $('<style/>').appendTo($('head'));
                        dataView.session('grid-style', gridStyle);
                    }
                    gridStyle.text(styleString);
                    if (frozenWidth)
                        frozenWidth += 4;
                    dataView.session('grid-frozen-width', !isFrozen && !multiSelect ? 0 : (Math.floor(frozenWidth + (hasKey ? (22 + 4) : 4)) + (multiSelect ? (22 + (frozenWidth > 0 ? data.columnPadding : 4)) : 0)));

                }
            }
        });
    }

    function highlightSelection() {
        var pageInfo = getPageInfo();
        if (!pageInfo)
            return;
        var dataView = pageInfo.dataView,
            extension = dataView && dataView.extension();
        if (extension && dataView.get_isGrid()) {
            skipInfoView = true;
            extension.executeInContext('Eye', null, false);
        }
    }

    //function addRwd(element, width) {
    //    //if (width)
    //    //    element.addClass('app-width' + width);
    //    return element;
    //}

    function busyIndicator(show) {
        var menuButton = mobile._menuButton;
        if (arguments.length == 0)
            return menuButton.is('.app-transition');
        //if (menuButton && mobile.toolbar().is(':visible')) {
        //    if (show) 
        //        menuButton.removeClass('ui-icon-bars').addClass('ui-icon-refresh app-transition app-animation-spin');
        //    else
        //        menuButton.removeClass(transitionClasses).addClass(isNavigationRoot() ? 'ui-icon-bars' : 'ui-icon-back');
        //}
        if (menuButton && !show && mobile.toolbar().is(':visible') && !findActivePage().is('.app-page-modal')) {
            if (show)
                menuButton.removeClass('ui-icon-bars').addClass('app-transition');
            else
                menuButton.removeClass(transitionClasses).addClass(isNavigationRoot() ? 'ui-icon-bars' : 'ui-icon-back');
        }
    }

    function busyBeforeUnload() {
        busyIndicator(true);
        $window.one('beforeunload pagehide', function () {
            busyIndicator(false);
        });
    }

    function isNavigationRoot() {
        var activePageId = getActivePageId(),
            pages = mobile._pages;
        return activePageId == 'Main' || pages.length && activePageId == pages[0].id && pages[0].home;
    }

    function updateMenuButtonStatus() {
        var menuButton = mobile._menuButton,
            activePage = findActivePage(),
            activePageInfo,
            hasBack, backText;
        if (menuButton && mobile.toolbar().is(':visible') && !activePage.is('.app-page-modal')) {
            if (isNavigationRoot()/* && !advancedSearchPageIsActive()*/)
                menuButton.removeClass('ui-icon-back ui-icon-bars ' + transitionClasses).addClass('ui-icon-bars').attr({ 'data-action': '#app-btn-menu', title: resourcesMobile.Menu });
            else
                menuButton.removeClass('ui-icon-bars ' + transitionClasses).addClass('ui-icon-back').attr({ 'data-action': '#app-back', title: resourcesMobile.Back });
            hasBack = !menuButton.is('.ui-icon-bars');
            mobile.toolbar().toggleClass('app-has-back', hasBack);
            backText = mobile._backText;
            if (hasBack) {
                var prevNavPage = navigationHistory.stack[navigationHistory.activeIndex - 1],
                    pageId = prevNavPage && prevNavPage.hash,
                    prevPage = pageId ? getPageInfo(pageId.substring(1)) : null,
                    headerText = prevPage ? prevPage.headerText : prevNavPage && prevNavPage.title;
                activePageInfo = getPageInfo();
                if (!headerText || activePageInfo && activePageInfo.headerText == headerText) {
                    if (activePageInfo)
                        headerText = activePageInfo.backText;
                    if (!headerText)
                        headerText = resourcesMobile.Back;
                }
                backText.text(typeof headerText == 'string' ? headerText : headerText[0]).show();
            }
            else
                backText.hide();

            //mobile._toolbar[0].style.backgroundImage = menuButton.is('.ui-icon-bars') ? '' : 'none!important';
            //mobile._menuStrip.strip.css('visibility', menuButton.is('.ui-icon-bars') ? '' : 'hidden');
        }
    }

    function savePanelScrollTop(panel) {
        if (panel.length && panel.closest('.app-sidebar').length)
            contextPanelScrolling[getActivePageId() + '_' + panel.attr('id')] = panel.find('.ui-panel-inner').scrollTop();
    }

    function restorePanelScrollTop(panel) {
        //if (panel.length && panel.closest('.app-sidebar').length)
        panel.find('.ui-panel-inner').scrollTop(panel.length && panel.closest('.app-sidebar').length ? (contextPanelScrolling[getActivePageId() + '_' + panel.attr('id')] || 0) : 0);
    }

    function isMultiSelectCheckBoxClick(event) {
        var checkBox = $(event.target).closest('.ui-btn,.app-grid-header').find('.app-btn-check');
        return (checkBox.length > 0) && (lastTouchX(event.pageX) <= (checkBox.offset().left + checkBox.outerWidth() + 8));
    }

    function isActionColumnClick(event, dataView) {
        var result,
            echo,
            x = lastTouchX(event.clientX),
            y = lastTouchY(event.clientY),
            actionColumn = $(event.target).closest('.ui-btn').find('.app-action-column'),
            link;
        if (actionColumn.length)
            actionColumn.find('.app-action-column-button').each(function () {
                var btn = $(this),
                    btnOffset = btn.offset();
                if (x >= btnOffset.left - 4 && x <= btnOffset.left + btn.outerWidth() + 3 && y >= btnOffset.top - 6 && y <= btnOffset.top + btn.outerHeight() + 4) {
                    result = true;
                    btn.addClass('ui-btn-active');
                    setTimeout(function () {
                        btn.removeClass('ui-btn-active');
                        echo = findEcho(btn);
                        clearSelectionInEcho(echo);
                        dataViewUILinks(dataView).removeClass('app-selected ui-btn-active');
                        link = btn.closest('.ui-btn');
                        dataView.extension().tap(link.data('data-context'), 'none')
                        if (echo.length)
                            link.addClass('app-selected');
                        var context = [],
                            actionPath = btn.attr('data-action-path');
                        enumerateActions('ActionColumn', dataView, context, dataView.extension().commandRow());
                        $(context).each(function () {
                            var item = this;
                            if (item.path == actionPath) {
                                executeContextAction(item, link);
                                return false;
                            }
                        });
                        if (echo.length)
                            refreshEchoToolbarWithDelay(dataView, echo);
                        else
                            dataViewEchoChanged(dataView._id);
                    }, feedbackDelay);
                    return false;
                }
            });
        return result;
    }

    function isMoreButtonClick(e) {
        var moreButton = $(e.target).closest('.ui-btn').find('.app-btn-more'),
            x = lastTouchX(e.clientX),
            y = lastTouchY(e.clientY);
        if (!moreButton.length)
            return false;
        var buttonOffset = moreButton.offset();
        //alert(_lastTouch.x + ', ' + _lastTouch.y + ' : ' + buttonOffset.left + ', ' + buttonOffset.top + ' / ' + (buttonOffset.left + moreButton.outerWidth(true)) + ', ' + (buttonOffset.top + moreButton.outerHeight(true)));
        return (buttonOffset.left - 8 <= x) && (x <= buttonOffset.left + moreButton.outerWidth(true) + 8) &&
            (buttonOffset.top - 8 <= y) && (y <= buttonOffset.top + moreButton.outerHeight(true) + 8);
    }

    function findMoreButton(target) {
        return target.closest('.ui-btn').find('.app-btn-more');
    }

    function dataViewToClassNames(dataView) {
        return String.format('app-style-dv-{0} app-style-c-{1} app-style-cv-{1}-{2}', dataView._id, dataView._controller, dataView._viewId);
    }

    function dataViewUILinks(dataView) {
        return getPageInfo(dataView).page/* $('#' + dataView._id)*/.find('ul[data-role="listview"] li a');
    }

    function checkBoxState(state) {
        $(arguments).each(function (index) {
            if (index)
                if (state)
                    $(this).addClass('app-btn-check-selected').closest('.ui-btn').addClass('app-checked').parent().addClass('app-checked');
                else
                    $(this).removeClass('app-btn-check-selected').closest('.ui-btn').removeClass('app-checked').parent().removeClass('app-checked');
        });
    }

    function removeHighlightFromSelectedRow(listview) {
        if (listview.is('.app-cardcolumn'))
            listview = listview.parent();
        listview.find('a.app-selected').removeClass('app-selected ui-btn-active');
    }

    function toggleSelectedRows(dataView, keepSelection) {
        var selectedKeyList = dataView._selectedKeyList,
            selectAll = selectedKeyList.length == 0,
            listview = findScrollable().find('.app-style-dv-' + dataView._id), // find a listview for the given dataview on the current page
            echo = findEcho(listview),                                         // locate the echo if the listview is within the echo on the current page
            checkBoxes = listview.find('.dv-item .ui-btn:not(.app-calculated) .app-btn-check'), // checkboxes are cleared/set for the current visible listview (echo or see-all)
            gridHeaderCheckBoxes = listview.closest('.ui-page').find('.app-grid-header .app-btn-check, .dv-heading .app-btn-check'),
            stickyHeaderCheckBox = mobile.stickyHeaderBar().find('.app-grid-header .app-btn-check'),
            seeAllCheckboxes,
            args,
            link;

        if (selectAll && dataView._totalRowCount > maximumMultiSelectCount) {
            _app.alert(String.format(resources.Presenters.Charts.DataWarning, maximumMultiSelectCount), function () {
                if (echo.length)
                    mobile.contextScope(dataView._id);
                configureFilter({ mode: 'everything' });
                mobile.contextScope(null);
            });
            return;
        }

        function updateUI() {
            if (echo.length)
                refreshEchoToolbarWithDelay(dataView, echo);
        }

        selectedKeyList.splice(0, selectedKeyList.length);
        checkBoxState(selectAll, checkBoxes, gridHeaderCheckBoxes, stickyHeaderCheckBox);
        if (selectAll) {
            if (checkBoxes.length && !dataView.extension().commandRow()) {
                link = $(checkBoxes[0]).closest('.ui-btn');
                dataView.extension().tap(link.data('data-context'), 'none');
                if (echo.length)
                    link.addClass('app-selected');

            }
            if (dataView._keyFields.length == 1 && listview.find('.dv-load-at-top,.dv-load-at-bottom,.dv-action-see-all').length) {
                if (dataView._busy()) return;
                args = dataView._createArgsForListOfValues(dataView._keyFields[0].Name);
                args.request.MaximumValueCount = maximumMultiSelectCount;
                dataView._invoke('GetListOfValues', args, function (lov) {
                    dataView._busy(false);
                    $(lov).each(function () {
                        selectedKeyList.push(this.toString());
                    });
                    dataView.set_selectedValue(selectedKeyList.join(';'));
                    updateMultiSelectInstruction(dataView)
                    updateUI();
                });
            }
            else {
                listview.find('.dv-item .ui-btn:not(.app-calculated)').each(function () {
                    selectedKeyList.push(dataView._createRowKey($(this).data('data-context').row));
                });
                updateUI();
            }
        }
        else if (!keepSelection)
            dataView.extension().clearSelection(true);
        dataView.set_selectedValue(selectedKeyList.join(';'));
        if (echo.length) {
            checkBoxState(selectAll, getPageInfo(dataView).page.find('.app-wrapper .app-listview .app-btn-check, .dv-heading .app-btn-check'));
            updateUI();
        }
        else {
            getPageInfo(dataView).echoChanged = true;
            refreshContext();
        }
        updateMultiSelectInstruction(dataView);
    }

    function findGridHeaderCheckBoxes(listview) {
        return listview.closest('.ui-page').find('.app-grid-header .app-btn-check, .dv-heading .app-btn-check')
    }

    function findStickyHeaderBarCheckBox(dataView) {
        return stickyHeaderBar(getPageInfo(dataView).page).find('.app-grid-header .app-btn-check');
    }

    function multiSelectInstruction(dataView) {
        var selectedRowCount = dataView._selectedKeyList.length;
        return selectedRowCount ? (' ' + String.format((selectedRowCount > 1 ? resourcesMobile.ItemsSelectedMany : resourcesMobile.ItemsSelectedOne), selectedRowCount) + '.') : '';
    }

    function updateMultiSelectInstruction(dataView) {
        var selectedRowCount = dataView._selectedKeyList.length,
            pageInfo = getPageInfo(dataView),
            instructions = $.merge(pageInfo.page.find('.app-multi-select-instruction'),
                getEcho(dataView).find('.app-multi-select-instruction'));//$.merge(page.find('.app-multi-select-instruction'), $('#' + dataView._id + '_echo .app-multi-select-instruction'));
        if (getActivePageId() == dataView._id)
            $.merge(instructions, stickyHeaderBar(pageInfo.page).find('.app-multi-select-instruction'));
        instructions.text(multiSelectInstruction(dataView));
        if (selectedRowCount > 1)
            revealStickyHeaderInstruction();
    }

    function revealStickyHeaderInstruction(header) {
        if (!header)
            header = stickyHeaderBar();
        header.find('.app-bar-text-instruction-hidden').removeClass('app-bar-text-instruction-hidden');
    }

    function toggleRowSelection(dataView, link) {
        var extension = dataView.extension(),
            checkButton = link.find('.app-btn-check'),
            dataContext = link.data('data-context'),
            selectedKeyList = dataView._selectedKeyList,
            originalKeyCount = selectedKeyList.length,
            rowKey = dataContext ? dataView._createRowKey(dataContext.row) : dataView.get_selectedKey().join(';'),
            keyIndex = selectedKeyList.indexOf(rowKey),
            listview = link.closest('.ui-listview'),
            echo = findEcho(listview),
            gridHeaderCheckBoxes,
            stickyHeaderCheckBox = findStickyHeaderBarCheckBox(dataView),
            linkDataContext, selection,
            isSelected = link.is('.app-selected');

        gridHeaderCheckBoxes = findGridHeaderCheckBoxes(listview);

        if (keyIndex != -1) {
            selectedKeyList.splice(keyIndex, 1);
            checkBoxState(false, checkButton);
            if (isSelected) {
                removeHighlightFromSelectedRow(listview);
                if (originalKeyCount > 1)
                    dataView._clearSelectedKey();
                else
                    extension.clearSelection(true);
                selection = listview.find('.dv-item.app-checked .ui-btn').first();
                if (selection.length) {
                    extension.tap(selection.data('data-context'), 'none');
                    if (echo.length)
                        selection.addClass('app-selected');
                }
                else
                    if (selectedKeyList.length)
                        dataView.sync(selectedKeyList[0]);
            }
            if (echo.length)
                refreshEchoToolbarWithDelay(dataView, echo);
            else
                getPageInfo(dataView).echoChanged = true;
        }
        else {
            selectedKeyList.push(rowKey);
            checkBoxState(true, checkButton);
            removeHighlightFromSelectedRow(listview);
            if (dataContext)
                extension.tap(dataContext, 'none');
            if (echo.length)
                link.addClass('app-selected');
            else
                getPageInfo(dataView).echoChanged = true;
        }
        checkBoxState(selectedKeyList.length, gridHeaderCheckBoxes, stickyHeaderCheckBox)

        if (echo.length) {
            listview = findScrollable(dataView._id).find('.app-listview');
            if (listview.length) {
                linkDataContext = link.data('data-context');
                listview.find('.ui-btn').each(function () {
                    var link = $(this),
                        dataContext = link.data('data-context'),
                        isSameRow = 0;
                    if (linkDataContext) {
                        $(dataView._keyFields).each(function () {
                            var field = dataView.findField(this.Name);
                            if (linkDataContext.row && dataContext && dataContext.row && linkDataContext.row[field.Index] == dataContext.row[field.Index])
                                isSameRow++;
                        });
                        if (isSameRow == dataView._keyFields.length) {
                            checkBox = link.find('.app-btn-check');
                            if (keyIndex != -1) {
                                checkBoxState(false, checkBox);
                            }
                            else {
                                removeHighlightFromSelectedRow(listview);
                                checkBoxState(true, checkBox);
                                link.addClass('app-selected');
                            }
                            checkBoxState(listview, selectedKeyList.length, findGridHeaderCheckBoxes(listview))
                            return false;
                        }
                    }
                });
            }
        }


        dataView.set_selectedValue(selectedKeyList.join(';'));
        if (!originalKeyCount && selectedKeyList.length || originalKeyCount && !selectedKeyList.length)
            refreshContext();

        updateMultiSelectInstruction(dataView);
    }

    function createGridHeader(dataView, item) {
        var fields = dataView._fields,
            allFields = dataView._allFields,
            first = true,
            gridHeaderContainer = $('<div data-draggable="grid-header" class="app-grid-header app-grid-header-cv-' + dataView._id + '-' + dataView._viewId + '"></div>').appendTo(item).attr('data-for', dataView._id),
            scrollClassName = classNameOfFirstScrollableColumnInGrid(dataView),
            frozenField = frozenFieldName(dataView),
            requiresScrollableField = frozenField == '_none_',
            fieldCount = 0,
            columnSeparator,
            checkbox;
        if (dataView.get_showMultipleSelection()) {
            checkbox = $('<span class="app-btn-check"></span>').appendTo(gridHeaderContainer).attr('title', resourcesMobile.LookupSelectAction);
            //$(iconCheck).appendTo(checkbox);
            if (dataView._selectedKeyList.length)
                checkbox.addClass('app-btn-check-selected');
        }
        if (frozenField != '_none_' || checkbox)
            $('<span class="app-frozen-spacer ' + scrollClassName + 'frozen_"/>').appendTo(gridHeaderContainer);
        $(fields).each(function () {
            var originalField = this,
                field = allFields[originalField.AliasIndex],
                columnHeading,
                sortOrder, filterFunc, sortSymbol,
                fieldFilter, originalFilter,
                filterStatus;
            if (!originalField.Hidden && !field.GroupBy && !originalField.OnDemand && originalField.Type != 'DataView') {
                //if (!first)
                //    $('<span class="app-field-separator"/>').appendTo(gridHeaderContainer);
                columnHeading = $('<span data-draggable="grid-header-field"/>').addClass(classNameOfColumnInGrid(dataView, field)) //String.format('gc_{0}_{1}_{2} app-field app-field-{2}', dataView._id, dataView._viewId, field.Name))
                    /*.text(field.HeaderText)*/.attr('title', field.HeaderText).attr('data-field-name', field.Name)
                    .appendTo(gridHeaderContainer);
                if (field.Type.match(numericTypeRegex))
                    columnHeading.addClass('app-field-type-numeric');
                else if (field.Type == 'Boolean')
                    columnHeading.addClass('app-field-type-bool');
                sortOrder = sortExpression(dataView, field.Name);
                filterFunc = dataView.get_fieldFilter(field, true);

                if (sortOrder || filterFunc)
                    $('<b class="app-grid-header-text"/>').appendTo(columnHeading).text(field.HeaderText + ' ');
                else
                    columnHeading.text(field.HeaderText);
                if (sortOrder) {
                    materialIcon('material-icon-arrow-' + (sortOrder.match(/^asc/i) ? 'upward' : 'downward'), columnHeading);
                    ///$('<i class="glyphicon"></i>').appendTo(columnHeading).addClass('app-icon ui-icon-' + (sortOrder.match(/^asc/i) ? 'sort-by-attributes' : 'sort-by-attributes-alt')).attr('title', fieldSortOrderText(field, sortOrder));

                }

                if (filterFunc) {
                    //filterStatus = $('<span class="app-icon glyphicon glyphicon-filter"></span>').appendTo(columnHeading);
                    filterStatus = materialIcon('material-icon-filter-list', columnHeading);
                    $(dataView._filter).each(function () {
                        var ff = this;
                        if (ff.startsWith(field.Name + ':')) {
                            fieldFilter = ff;
                            return false;
                        }
                    });
                    if (fieldFilter && !isTouchPointer) {
                        originalFilter = dataView._filter;
                        dataView._filter = [fieldFilter];
                        filterStatus.attr('title', dataView.extension().filterStatus(true));
                        dataView._filter = originalFilter;
                    }
                }
                if (first) {
                    first = false;
                    appendMoreButton(dataView, gridHeaderContainer);
                }

                columnSeparator = $('<span class="app-field-separator" data-draggable="grid-header-separator"/>').appendTo(gridHeaderContainer);

                if (frozenField != '_none_') {
                    columnHeading.addClass('app-frozen');
                    if (field.Name == frozenField || frozenField == '_first_') {
                        requiresScrollableField = true;
                        frozenField = '_none_';
                    }
                    else
                        columnSeparator.addClass('app-frozen');
                }
                else if (requiresScrollableField) {
                    columnHeading.addClass(scrollClassName + ' app-scroll');
                    requiresScrollableField = false;
                }

                fieldCount++;
            }
        });
        return gridHeaderContainer;
    }

    function createCheckboxMarkup(dataView, row, rowLabels, link) {
        if (dataView.get_showMultipleSelection()) {
            var span = $('<span class="app-btn-check"></span>').appendTo(link).attr('title', resourcesMobile.LookupSelectAction),
                rowKey;
            //$(iconCheck).appendTo(span);
            if (!rowLabels) {
                rowKey = dataView._createRowKey(row);
                if (dataView._selectedKeyList.indexOf(rowKey) != -1) {
                    span.addClass('app-btn-check-selected');
                    link.addClass('app-checked').parent().addClass('app-checked');
                }
            }
        }
    }

    function toHyperlink(field, row) {
        var hyperlinkFormatString = field.HyperlinkFormatString,
            result;
        if (hyperlinkFormatString)
            result = field._dataView._parseLocation(hyperlinkFormatString, row);
        return result;
    }

    function setSmartValue(container, field, value, text, doReset) {
        if (doReset)
            switch (field.Type) {
                case 'Date':
                case 'DateTime':
                    container.removeAttr('data-smart-type data-smart-value data-smart-text');
                    break;
            }
        if (!settings.ui.smartDates || value == null || field.is('smart-dates-disabled'))
            return;
        var set, startMonitor;
        switch (field.Type) {
            case 'Date':
            case 'DateTime':
                set = refreshSmartValue(container, field.Type, value, text, new Date());
                if (set) {
                    startMonitor = true;
                    container.attr({
                        'data-smart-type': field.Type,
                        'data-smart-value': JSON.stringify(value),
                        'data-smart-text': text
                    });
                }
                break;
            default:
                if (field._smartSize) {
                    set = _app.sizeToText(value);
                    container.text(set);
                }
                break;
        }
        if (set && startMonitor && !_window.smartValueInterval)
            _window.smartValueInterval = setTimeout(function () {
                refreshSmartValues();
                _window.smartValueInterval = setInterval(refreshSmartValues, 60 * 1000);
            }, 60000 - new Date().getSeconds() * 1000);
        //_window.smartValueInterval = setInterval(refreshSmartValues, 60 * 1000);
        return set;
    }

    function refreshSmartValues(spans) {
        if (!spans || !spans.length)
            spans = $('[data-smart-value]');
        var now = new Date();
        spans.each(function (s) {
            var span = spans.eq(s),
                type = span.attr('data-smart-type'),
                value = JSON.parse(span.attr('data-smart-value')),
                text = span.attr('data-smart-text');

            switch (type) {
                case 'Date':
                case 'DateTime':
                    value = new Date(value);
                    break;
            }
            refreshSmartValue(span, type, value, text, now);
        });
    }

    function refreshSmartValue(span, type, value, text, now) {
        if (value) {
            switch (type) {
                case 'Date':
                case 'DateTime':
                    var smartDate = toSmartDate(value, now);
                    if (!!smartDate) {
                        span.text(smartDate)
                        return true;
                    }
                    else {
                        span.removeAttr('data-smart-type').removeAttr('data-smart-value').removeAttr('data-smart-text').text(text);
                        return false;
                    }
                //break;
            }
        }
    }

    function toSmartDate(value, now) {
        if (value == null)
            return null;
        var dayNames = dateTimeFormat.AbbreviatedDayNames,
            resourcesDates = resourcesMobile.Dates,
            diff = now - value,
            days = diff / 86400000;

        if (days >= 8 || days < -14) { // use 8 instead of 7 to allow for "today" and "yesterday" 
            if (value.getYear() == now.getYear())
                return String.format('{0:' + dateTimeFormat.MonthDayPattern.replace(/M+/, 'MMM') + '}', value) + smartTime(value);
            return null;
        }

        var nowDate = new Date(now).setHours(0, 0, 0, 0),
            valueDate = new Date(value).setHours(0, 0, 0, 0),
            dateDiff = (nowDate - valueDate) / 86400000;

        // past days
        if (dateDiff > 1)
            return resourcesDates.Last + ' ' + dayNames[value.getDay()] + smartTime(value);
        if (dateDiff == 1)
            return resourcesDates.Yesterday + smartTime(value);
        // today
        if (dateDiff == 0) {
            if (doHideTime(value))
                return resourcesDates.Today;

            var min = diff / 1000 / 60,
                hours = min / 60;
            min %= 60;

            // past
            if (diff > 0) {
                if (hours > 1)
                    return String.format('{0:' + dateTimeFormat.ShortTimePattern + '}', value);
                if (hours == 1)
                    return resourcesDates.OneHour;
                if (min > 2)
                    return String.format(resourcesDates.MinAgo, Math.floor(min));
                if (min > 1)
                    return resourcesDates.AMinAgo;
                return resourcesDates.JustNow;
            }

            // future
            if (hours <= -1)
                return String.format('{0:' + dateTimeFormat.ShortTimePattern + '}', value);
            if (min <= -59)
                return resourcesDates.InHour;
            if (min < -2)
                return String.format(resourcesDates.InMin, -Math.floor(min));
            if (min < -1)
                return resourcesDates.InAMin;
            return resourcesDates.Now;
        }
        else {
            // future days
            if (dateDiff == -1)
                return resourcesDates.Tomorrow + smartTime(value);
            if (dateDiff >= -7)
                return dayNames[value.getDay()] + smartTime(value);
            return resourcesDates.Next + ' ' + dayNames[value.getDay()] + smartTime(value);
        }
        //return null;
    }

    // TESTING smart dates
    //    var now = new Date(),
    //        date = new Date();
    //    date.setDate(date.getDate() - 15);
    //    for (var i = 0; i < 500; i++) {
    //        if (date.getDate() != now.getDate())
    //            date.setHours(date.getHours() + 6);
    //        else
    //        {
    //            if (Math.abs(date.getHours() - now.getHours()) > 2)
    //                date.setMinutes(date.getMinutes() + 30);
    //            else if (date.getHours() == now.getHours() && Math.abs(date.getMinutes() - now.getMinutes()) < 3)
    //                date.setSeconds(date.getSeconds() + 15);
    //            else
    //                date.setMinutes(date.getMinutes() + 1);
    //        }
    //        console.log('Date: ' + date + ' | ' + (toSmartDate(date, now) || date));
    //    }

    function doHideTime(value) {
        var hour = value.getHours(),
            minute = value.getMinutes(),
            second = value.getSeconds();
        return (hour == 0 && minute == 0 && second == 0);
    }

    function smartTime(value) {
        if (!doHideTime(value)) {
            var seconds = value.getSeconds(),
                minutes = value.getMinutes(),
                hours = value.getHours();

            if (hours || minutes || seconds)
                if (seconds == 0)
                    return ', ' + String.format('{0:' + dateTimeFormat.ShortTimePattern + '}', value);
                else
                    return ', ' + String.format('{0:' + dateTimeFormat.LongTimePattern + '}', value);
        }
        return '';
    }

    function createRowMarkup(dataView, row, rowNumber, link, rowLabels) {
        var fields = dataView._fields,
            allFields = dataView._allFields,
            scrollClassName = classNameOfFirstScrollableColumnInGrid(dataView),
            fieldLabel,
            frozenField = frozenFieldName(dataView),
            requiresScrollableField = frozenField == '_none_',
            columnSeparator,
            first = true,
            fieldCount = 0;
        if (frozenField != '_none_' || dataView.get_showMultipleSelection())
            $('<span class="app-frozen-spacer ' + scrollClassName + 'frozen_"/>').appendTo(link);
        link.attr('data-draggable', 'data-item');
        createCheckboxMarkup(dataView, row, rowLabels, link);
        $(fields).each(function (index) {
            var originalField = this,
                field = allFields[originalField.AliasIndex],
                fieldClass = field.itemColumnClass || classNameOfColumnInGrid(dataView, field), // String.format('gc_{0}_{1}_{2}', dataView._id, dataView._viewId, field.Name),
                span,
                v, hyperlink, isNull,
                items = originalField.Items;
            if (!originalField.Hidden && !field.GroupBy && !originalField.OnDemand && originalField.Type != 'DataView') {
                span = $('<span data-draggable="data-item"></span>').appendTo(link).addClass(fieldClass + ' app-field app-field-' + field.Name);
                if (!field.itemColumnClass)
                    field.itemColumnClass = fieldClass;
                var originalValue = v = row[rowLabels ? originalField.Index : field.Index];
                if (v == null) {
                    isNull = true;
                    span.addClass('app-null');
                }
                else
                    hyperlink = toHyperlink(originalField, row);
                v = field.text(v, field.TextMode != 3);
                if (first)
                    appendMoreButton(dataView, link, frozenField != '_none_');
                if (field.Type.match(numericTypeRegex))
                    span.addClass('app-field-type-numeric');
                if (rowLabels) {
                    fieldLabel = rowLabels ? rowLabels[index] : null;
                    if (fieldLabel) {
                        v = row[originalField.Index];
                        v = String.localeFormat(originalField.DataFormatString || '{0:n0}', v);
                        span.text(v);
                        $('<div class="app-static-text"></div>').text(fieldLabel).insertBefore(span.contents());
                        span.attr('title', field.HeaderText + '\n' + fieldLabel + ' ' + v);
                    }
                }
                else {
                    if (field.Type == 'Boolean') {
                        span.addClass('app-field-type-bool');
                        //if (!isNull && items && items.length >= 2 && items[items.length - 1][1] == v)
                        //    $('<span class="app-icon glyphicon glyphicon-check"/>').appendTo(span);
                        //else
                        //    span.html('&nbsp;');
                        materialIcon('material-icon-' + (!isNull && items && items.length >= 2 && items[items.length - 1][1] == v ? 'check-box' : 'check-box-outline-blank'), span);
                    }
                    else
                        textOrHtml(field, v, span, true);
                    span.attr('title', field.HeaderText + ':\n' + (field.Type == 'Boolean' ? v : toTooltipText(span)));
                    if (hyperlink)
                        span.attr('data-href', hyperlink);
                }
                setSmartValue(span, field, originalValue, v);
                if (first && rowNumber != null)
                    $('<span class="app-item-number"/>').insertBefore(span.contents()).text(rowNumber + '.');

                if (rowLabels)
                    columnSeparator = $('<span class="app-field-separator"/>').appendTo(link);

                if (frozenField != '_none_') {
                    span.addClass('app-frozen');
                    if (field.Name == frozenField || frozenField == '_first_') {
                        requiresScrollableField = true;
                        frozenField = '_none_';
                    }
                    else if (rowLabels)
                        columnSeparator.addClass('app-frozen');
                }
                else if (requiresScrollableField) {
                    span.addClass(scrollClassName);
                    requiresScrollableField = false;
                }

                if (field.TextMode == 2)
                    span.addClass('app-field-data app-field-data-rtf');

                fieldCount++;
                first = false;
            }
        })
    }

    function htmlToText(html) {
        var converter = _app._htmlConverter;
        if (!converter)
            converter = _app._htmlConverter = $('<p/>');
        return converter.html(html.replace(/></g, '> <')).text();
    }

    function createCardMarkup(dataView, row, map, rowNumber, item, link, isList, standalone) {
        var allFields = dataView._allFields,
            isLink = link.is('a'),
            heading = $('<h3>').appendTo(link),
            headingField = allFields[map.heading],
            v, actions = [];
        if (isLink)
            createCheckboxMarkup(dataView, row, null, link);

        // thumb
        if (map.thumb != null) {
            v = row[map.thumb];
            if (v && v.toString().match(/^null/))
                item.addClass('ui-li-has-thumb');
            else
                var blobHref = dataView.resolveClientUrl(dataView.get_appRootPath()),
                    blobField = allFields[map.thumb],
                    thumb = $('<img class="ui-li-thumb"/>').appendTo(link).attr({
                        src: String.format('{0}blob.ashx?{1}=t|{2}{3}', blobHref, blobField.OnDemandHandler, v, blobField.OnDemandStyle == 2 ? '&_nocrop' : '')
                    }); //.attr('title', blobField.HeaderText);
        }
        // heading
        v = row[map.heading];
        v = headingField.text(v);
        if (isLink)
            link.attr('title', v);
        if (headingField.HtmlEncode)
            heading.text(v);
        else
            heading.html(v);
        heading.addClass('app-field app-field-' + headingField.Name).attr('title', headingField.HeaderText + ':\n' + heading.text())
        if (rowNumber)
            $('<span class="app-item-number"/>').insertBefore(heading.contents()).text(rowNumber + '. ');
        heading.contents().wrap('<span class="app-field-data"/>');
        //if (isList)
        //    $('<span class="app-item-label"/>').insertBefore(heading.contents()).text(headingField.HeaderText);
        // aside
        // descriptive fields
        if (map.desc.length) {
            var descPara = $('<p class="app-para"/>').appendTo(link),
                lastParaElem = descPara,
                descColumn,
                paraCount = 1,
                itemValue;
            $(map.desc).each(function (index) {
                var fieldIndex = this,
                    field = allFields[fieldIndex],
                    label = map.descLabels[index],
                    //labelRwdWidth = map.descLabelsRwd[index],
                    para = map.descPara[index],
                    column = map.descColumn[index], columnWidth,
                    fieldContents,
                    headerText = field.HeaderText,
                    span,
                    isNull, hyperlink;
                if (para) {
                    if (!lastParaElem.is('.app-para')) {
                        descPara = $('<p class="app-para"/>').appendTo(link);
                        if (!descColumn)
                            descPara.insertAfter(lastParaElem);
                        lastParaElem = descPara;
                        paraCount++;
                    }
                    descColumn = null;
                }
                if (column) {
                    if (!descColumn)
                        item.addClass('app-has-column');
                    descColumn = $('<span class="app-column"/>').appendTo(link).addClass(descColumn ? '' : 'app-column-first');
                    columnWidth = (100) / map.descColumnCount + '%'; // map.descColumnWidth[index] / map.descColumnTotalWidth * 100 - 1 + '%';
                    descColumn.css({ minWidth: columnWidth, maxWidth: columnWidth });
                }

                v = row[fieldIndex];
                isNull = v == null;
                //span = addRwd($('<span class="app-item-desc"/>').appendTo(desc), map.descRwd[index]).addClass('app-field app-field-' + field.Name);
                span = $('<span class="app-item-desc"/>').insertAfter(lastParaElem).addClass('app-field app-field-' + field.Name);
                if (descColumn)
                    span.appendTo(descColumn);
                lastParaElem = span;
                v = field.text(v);
                if (isList) {
                    itemValue = $('<span class="app-field-data"/>').appendTo(span);
                    if (field.TextMode == 2)
                        itemValue.addClass('app-field-data-rtf');
                    textOrHtml(field, v, itemValue);

                }
                else
                    if (field.TextMode == 2)
                        span.text(htmlToText(v));
                    else if (field.HtmlEncode || field.TextMode == 3)
                        span.text(v);
                    else
                        span.html(v);
                if (isList && fieldIndex == map.heading) {
                    span.addClass('app-item-heading');
                    if (rowNumber)
                        $('<span class="app-item-number"/>').insertBefore(itemValue.contents()).text(rowNumber + '. ');
                }
                fieldContents = span.contents();
                span.attr('title', field.HeaderText + ':\n' + toTooltipText(span))
                if (!isNull) {
                    if (map.descOriginal[index] != null)
                        field = allFields[map.descOriginal[index]];
                    hyperlink = toHyperlink(field, row);
                    if (hyperlink)
                        fieldContents = fieldContents.wrap('<span/>').parent().attr('data-href', hyperlink);
                }

                if (label != null) {
                    if (settings.ui.list.labels.display == 'DisplayedAbove' || isList)
                        $('<span class="app-field-label-before"/>').insertBefore(fieldContents.first()).text(headerText);
                    if (settings.ui.list.labels.display == 'DisplayedBelow')
                        $('<span class="app-field-label-after"/>').insertAfter(fieldContents.last()).text(headerText);
                }
                if (isNull)
                    fieldContents.wrap('<span class="app-null"/>');
                else if (!isList)
                    fieldContents.wrap('<span class="app-field-data"/>');
                setSmartValue(isList ? fieldContents : fieldContents.parent(), field, row[fieldIndex], v);

            });
            if (paraCount > 1)
                item.addClass('app-para-multi');
        }
        if (isLink) {
            var extension = dataView.extension(),
                oldCommandRow = extension._commandRow,
                columnActionContainer, itemContentContainer,
                actionGroups = dataView.get_actionGroups('ActionColumn', true),
            /*columnWidth, */actionCount = 0, density = displayDensity();

            if (actionGroups.length && standalone != true) {
                //var group = dataView.get_actionGroups('ActionColumn', true);
                //columnWidth = actionGroups[0].maxTextLength * .5 + 'em';
                //itemContentContainer = $('<span style="display:table-cell"/>');
                //link.contents().appendTo(itemContentContainer);
                //itemContentContainer.appendTo(link);
                columnActionContainer = $('<span class="app-action-column"/>').appendTo(link); //.insertBefore(heading);//.insertBefore(itemContentContainer)
                //    .css({ maxWidth: columnWidth, minWidth: columnWidth });

                var padding = parseCss(link, 'padding-left'),
                    group = actionGroups[0],
                    groupText = group.groupText,
                    maxTextWidth = group.groupTextMaxWidth, sampleButton;
                if (groupText && !maxTextWidth) {
                    maxTextWidth = 0;
                    sampleButton = $('<span class="app-action-column"><span class="app-action-column-button"/></span>').appendTo($body).find('span');
                    $(groupText).each(function () {
                        sampleButton.text(this);
                        maxTextWidth = Math.max(maxTextWidth, sampleButton.outerWidth());
                    });
                    sampleButton.parent().remove();
                    group.groupTextMaxWidth = maxTextWidth;
                }
                columnActionContainer.css({ left: padding, maxWidth: maxTextWidth });

                padding += maxTextWidth + density; // actionGroups[0].maxTextLength * density * .75;
                link.css('padding-left', padding / density + 'em');


                extension._commandRow = row;


                $(dataView.actionGroups('ActionColumn')).each(function () {
                    $(this.Actions).each(function (index) {
                        var action = this;
                        actionCount++;

                        $('<span class="app-action-column-button"/>').appendTo(columnActionContainer)
                            .text(action.HeaderText)
                            .attr({ 'title': action.Description, 'data-action-scope': 'ActionColumn', 'data-action-path': action.Path });
                    });
                });
                //columnActionContainer.css({ marginTop: '-' + actionCount / 2 * 2.5 + 'em' });
                extension._commandRow = oldCommandRow;
            }

            if (map.aside != null) {
                item.addClass('app-li-has-aside');
                var aside = $('<p class="ui-li-aside"/>').appendTo(link),
                    asideField = allFields[map.aside];
                v = row[map.aside];
                v = asideField.text(v);
                if (asideField.HtmlEncode)
                    aside.text(v);
                else
                    aside.html(v);
                aside.addClass('app-field app-field-' + asideField.Name).attr('title', asideField.HeaderText + ':\n' + aside.text());
                setSmartValue(aside, asideField, row[map.aside], v);
                if (map.asideLabel)
                    $('<span class="app-field-label"/>').insertBefore(aside.contents()).text(asideField.HeaderText);
            }
            // count
            if (map.count != null && (aside == null || map.desc.length)) {
                var count = $('<span class="ui-li-count"/>').appendTo(link),
                    countField = allFields[map.count];
                v = row[map.count];
                v = countField.text(v);
                if (countField.HtmlEncode)
                    count.text(v);
                else
                    count.html(v);
                count.addClass('app-field app-field-' + countField.Name).attr('title', countField.HeaderText + ':\n' + count.text());
                setSmartValue(count, countField, row[map.count], v);
                if (map.countLabel)
                    $('<span class="app-field-label"/>').insertBefore(count.contents()).text(countField.HeaderText);

            }


            //var originalContent = $('<span style="display:table-cell"/>');
            //link.contents().appendTo(originalContent);
            //originalContent.appendTo(link);

            //$('<span style="width:5em;display:table-cell;margin-top:.5em;padding-right:1em;vertical-align:middle"><span style="font-size:11px;text-transform:uppercase;display:inline-block;border:solid 1px #38c;color:#38c;font-weight:bold;border-radius:3px;padding:.25em .5em;white-space:nowrap">Approve</span></span>').insertBefore(originalContent);

            appendMoreButton(dataView, link);
        }
    }

    function createCard(dataView, listview, displayContextLabel) {
        var selector = '.app-listview li a.app-selected,.app-wrapper .app-map', //'.app-listview li a.app-selected:first,.app-wrapper .app-map',
            dataViewId = dataView._lookupInfo ? dataView._id : dataView._parentDataViewId || dataView._id,
            selection = getPageInfo(dataViewId).page/* $('#' + dataViewId)*/.find(selector),
            item,
            cardDataView = _app.find(dataViewId),
            dataContext, row,
            mapInfo;
        if (!selection.length) {
            selection = $('#' + dataView._id + '_echo .app-echo-inner .app-selected');
            dataViewId = dataView._id;
            cardDataView = dataView;
        }
        if (!selection.length) {
            dataViewId = dataView._filterSource;
            selection = getPageInfo(dataViewId).page/* $('#' + dataViewId)*/.find(selector);
            cardDataView = _app.find(dataViewId);
        }
        if (selection.length) {
            item = $('<li class="app-li-card">');
            if (listview)
                item.appendTo(listview);
            if (!selection.is('.app-selected')) {
                mapInfo = selection.data('data-map');
                if (mapInfo)
                    row = cardDataView.extension().commandRow();
            }
            else {
                dataContext = selection.data('data-context')
                if (dataContext)
                    row = dataContext.row;
            }
            if (row) {
                createCardMarkup(cardDataView, row, cardDataView.extension().itemMap(), null, item, item);
                if (displayContextLabel != false) {
                    contextDataView = _app.find(dataViewId);
                    $('<span class="app-li-corner">').appendTo(item.addClass('app-li-has-corner')).text(contextDataView.get_view().Label);
                }
                if (selection.parent().is('.app-li-has-aside'))
                    item.addClass('app-li-has-aside');
            }
        }
        return item;
    }

    function createPageHeaderImage(dataView, page, row) {
        var headerImageField = dataView._headerImageField,
            imageFormat = 't',
            pageInfo;
        if (headerImageField) {
            var v = row[headerImageField.Index],
                isOriginal = headerImageField.tagged('header-image-original');
            if (typeof v == 'string' && !v.match(/^null\|/)) {
                if (headerImageField.tagged('header-image-original'))
                    imageFormat = toLogicalWidth(parseCss(page, 'width'));
                pageInfo = getPageInfo(dataView);
                pageInfo.dataImage = String.format('{0}blob.ashx?{1}={2}|{3}&_nocrop', dataView.resolveClientUrl(dataView.get_appRootPath()), headerImageField.OnDemandHandler, imageFormat, headerImageField.format(row[headerImageField.Index]));
                pageInfo.dataImageOriginal = isOriginal;
            }
        }
    }

    function createPageHeaderIcon(dataView, page, header) {
        var icon = dataView.tagged(materialIconRegex);
        if (!icon && dataView._lookupInfo)
            icon = ['', 'material-icon-playlist-add-check'];
        if (icon) {
            header.find('.app-icon').remove();
            materialIcon(icon[1], header.addClass('app-has-icon'));
            var modalTitle = page.find('.app-page-modal-title');
            if (modalTitle.length)
                materialIcon(icon[1], modalTitle.addClass('app-has-icon'));
            page.addClass('app-has-icon');
            materialIcon(icon[1], header).addClass('app-icon-background');
        }
    }

    function pageHeaderText(text, header) {
        var lastText,
            headerPage,
            headerIsVisible,
            line1, line2, t1, t2 = '', modalText;

        function showPageHeader() {
            if (header.length > 1)
                header = header.first();
            header.show().next().show();
            var wrapper = headerPage.find('.app-wrapper'), //header.parent(),
                fixedPageHeader = headerPage.find('.app-page-header-fixed'); // wrapper.prev();
            if (!fixedPageHeader.is('.app-page-header'))
                fixedPageHeader = $('<div class="app-page-header app-page-header-fixed"></div>').insertBefore(wrapper);

            fixedPageHeader.html(header.html()).css('top', parseCss(wrapper, 'top'));
            fixedPageHeader.toggleClass('app-has-action-bar', header.is('.app-has-action-bar'));
            fixedPageHeader.toggleClass('app-has-icon', header.is('.app-has-icon'));

            var dataImage = pageInfo && pageInfo.dataImage;
            if (dataImage) {
                fixedPageHeader.addClass('app-has-image');
                header.addClass('app-has-image');
                var fixedPageImage = fixedPageHeader.prev();
                if (!fixedPageImage.is('.app-page-header-image'))
                    fixedPageImage = $('<div class="app-page-header-image"></div>').insertBefore(fixedPageHeader);
                fixedPageImage.css('background-image', 'url("' + dataImage + '")');
                if (pageInfo.dataImageOriginal)
                    fixedPageImage.addClass('app-page-header-image-original');
            }
        }

        function hidePageHeader() {
            header.hide().next().hide();
        }

        if (!header) {
            headerPage = findActivePage();
            if (!headerPage)
                return;
            header = headerPage.find('.app-page-header');
        }
        else
            headerPage = header.first().closest('.ui-page');
        var isModal = headerPage.is('.app-page-modal'),
            headerPageId = headerPage.attr('id'),
            pageInfo = getPageInfo(headerPageId);
        line1 = header.find('h1');
        line2 = header.find('h2');
        headerIsVisible = headerPage.attr('data-page-header') != 'false';
        //var count = header.attr('data-count');
        if (typeof text == 'boolean') {
            if (text && headerIsVisible)
                showPageHeader();// header.show();
            else {
                hidePageHeader();
                //headerPage.attr('data-page-header', 'false');
            }
        }
        else {
            lastText = header.data('data-text');
            if (text) {
                if (lastText && typeof lastText != 'string' && typeof text == 'string') {
                    lastText[1] = text;
                    text = lastText;
                }
                header.data('data-text', text);
            }
            else
                text = lastText;
            var currentNode = menu.currentNode;
            if (headerPageId == 'Main' && currentNode) {
                if (currentNode.showPageHeaderDescription)
                    text = [text, currentNode.description];
                if (currentNode.icon && currentNode.showPageHeaderIcon && !header[0].className.match(/\bapp\-has\-icon\b/)) {
                    materialIcon(currentNode.icon, header.addClass('app-has-icon'));
                    materialIcon(currentNode.icon, header).addClass('app-icon-background');
                }
            }
            if (text)
                if (typeof text == 'string')
                    t1 = text.trim();
                else {
                    t1 = text[0].trim();
                    t2 = text[1].trim();
                }
            if (header.attr('data-locked') != 'true') {
                //line1.text(t1);
                if (line1.length) {
                    line1[0].innerText = t1;
                    if (t1)
                        modalText = t1;
                }
                //if (t2) {
                //    var navStack = $mobile.navigate.history.stack;
                //    var s = '';
                //}
                //line2.text(t2);
                if (line2.length) {
                    line2[0].innerText = t2;
                    if (t2)
                        modalText += ' / ' + t2;
                    if (!t2)
                        line2[0].innerHTML = '';//'&nbsp;';
                }
                if (t1)
                    if (isModal) {
                        var modalTitle = headerPage.find('.app-page-modal-title'),
                            modalText = modalTitle.find('.app-text').text(t1);
                        if (t2 && !modalTitle.next().is('.app-bar-actions'))
                            $('<span/>').appendTo(modalText).text(t2);
                    }
                    else {
                        var titlePlaceholder = headerPage.find('.app-page-header-placeholder');
                        if (titlePlaceholder.length) {
                            var staticTitle = titlePlaceholder.find('.app-text').text(t1);
                            if (t2)
                                $('<span/>').appendTo(staticTitle).text(t2);
                        }
                    }
                if (pageInfo && t1) {
                    pageInfo.headerText = t2 ? [t1, t2] : t1;
                    pageInfo.text = t1;
                }
            }
            //if (count)
            //    text = String.format('{0} ({1})', text, count);
            if ((text == mobile.title() && (getActivePageId() != 'Main' || menu.currentNode && !menu.currentNode.showPageHeaderTitle) && !isModal || !headerIsVisible) && !headerPage.is('.app-page-header-show')) {
                hidePageHeader();
                if (headerIsVisible)
                    headerPage.attr('data-page-header', 'false');
            }
            else
                showPageHeader();
            return text;
        }
    }

    function configurePopupListview(popup, menu) {
        var w = Math.ceil(_screen.width * .9);
        if (!menu && usePopupPanel())
            popup.css({ maxWidth: _screen.width - 1, minWidth: _screen.width - 1 });
        else {
            if (w > 800)
                w = 800;
            popup.css({ maxWidth: w });
        }
    }

    function pageTransitions(enable) {
        var style = $settings('ui.transitions.style')
        if (!arguments.length)
            return style;
        if (enable)
            $settings('ui.transitions.style', $settings('ui.transitions.currentStyle'))
        else {
            $settings('ui.transitions.currentStyle', style)
            $settings('ui.transitions.style', 'none')
        }
    }

    // ------------------------------------
    // Advanced Search API event handlers
    // ------------------------------------

    $(document).on('searchperform.dataview.app', function (e) {
        var dataView = e.dataView,
            survey = e.survey,
            filterBy = survey.context.field,
            searchOnStart = survey.context.start,
            data = dataView.data(),
            quickFind = data.QuickFind,
            searchInDataView = survey.context.id,
            args;
        if ('QuickFind' in data) {
            var selectedSuggestion = findActivePage('li.app-selected').data('text');
            if (selectedSuggestion != null) {
                var complexParam = quickFind ? quickFind.match(/(\"?(\S+)\:)\S*/) : null;
                data.QuickFind = complexParam ? ('"' + complexParam[2] + ':' + selectedSuggestion.substring(1)) : selectedSuggestion;
            }
        }
        args = _app.search('parse', { id: searchInDataView, data: data, field: filterBy, showErrors: true });
        if (!args.errors.length) {
            mobile.pageInfo(dataView)._canceled = true;
            pageTransitions(false);
            $settings('ui.transitions.style', 'none');
            whenPageShown(function () {
                pageTransitions(true);
                _app.search('execute', args);
            });
        }
        else
            e.preventDefault();
    }).on('searchgenerate.dataview.app', function (e) {
        _app.search('generate', { id: e.survey.context.id, survey: e.survey });
    }).on('searchreset.dataview.app', function (e) {
        _app.confirm(resourcesMobile.ResetSearchConfirm, function () {
            _app.search('reset', { id: e.survey.context.id });
        });
        return false;
    }).on('searchcalculate.dataview.app', function (e) {
        var trigger = e.rules.trigger(),
            triggerMatch,
            dataView = e.dataView,
            survey = e.survey,
            data = dataView.data(),
            field, fieldName, fieldValue, searchInDataView,
            newValue = data[trigger];
        if (trigger) {
            // toggle basket mode for a question when operation is $in or $notin
            if (trigger.match(/_op$/)) {
                fieldName = trigger.substring(0, trigger.length - 3); // remove "_op"
                fieldValue = data[fieldName];
                field = dataView.findField(fieldName);
                if (field) {
                    var itemsTargetController = field.ItemsTargetController,
                        targetControllerChanged,
                        itemsStyle = field.ItemsStyle,
                        styleChanged;
                    if (field.lov('static'))
                        field.ItemsStyle = field.Extended.itemsStyle;
                    else
                        field.ItemsStyle = newValue && newValue.match(/^(=|<>|\$in|\$notin)$/) && field.FilterType == 'Text' && field.Extended.autoComplete != false ? 'AutoComplete' : null;
                    field.ItemsTargetController = (newValue == '$in' || newValue == '$notin') ? '_basket' : null;
                    targetControllerChanged = field.ItemsTargetController != itemsTargetController;
                    styleChanged = field.ItemsStyle != itemsStyle;
                    if (targetControllerChanged) {
                        fieldValue = data[fieldName];
                        if (itemsTargetController) {
                            field.Items = [];
                            if (fieldValue != null) {
                                fieldValue = _app.csv.toArray(fieldValue);
                                if (fieldValue.length)
                                    fieldValue = fieldValue[0];
                            }
                        }
                        else if (fieldValue != null) {
                            field.Items = [[fieldValue, fieldValue]];
                            if (field.is('lookup-distinct'))
                                field.Items[0].push(null);
                        }
                    }
                    if (styleChanged || targetControllerChanged)
                        _app.input.execute({ values: [{ name: fieldName, value: fieldValue }] });
                }
                return;
            }
            searchInDataView = survey.context.id;
            // add condition to match
            triggerMatch = trigger.match(/^_Match(\d+)_addCondition$/);
            if (triggerMatch) {
                setTimeout(function () {
                    _app.search('addCondition', { id: searchInDataView, match: parseInt(triggerMatch[1]), condition: data[trigger] });
                });
                return;
            }
            // change match filter type
            triggerMatch = trigger.match(/^_Match(\d+)(_filters)?$/);
            if (triggerMatch) {
                setTimeout(function () {
                    var index = parseInt(triggerMatch[1]);
                    _app.search('changeMatch', { id: searchInDataView, match: index, type: data['_Match' + index], filters: data['_Match' + index + '_filters'] });
                });
                return;
            }
            // add a match
            if (trigger == '_Match_addGroup') {
                setTimeout(function () {
                    _app.search('addGroup', { id: searchInDataView, type: data[trigger] });
                });
                return;
            }
        }
    }).on('quickfindshow.dataview.app', function (e) {
        _app.search('toggle', e.survey.context.id);
        return false;
    }).on('quickfindautocomplete.dataview.app', function (e) {
        var inputData = e.inputData;//,
        //activePageId = getActivePageId();
        //clearTimeout(_window._quickFindAutoCompleteTimeout);
        //_window._quickFindAutoCompleteTimeout = setTimeout(function () {
        //if (activePageId == getActivePageId())
        _app.search('autoComplete', { id: mobile.dataView().survey().context.id, dataInput: dataInputOf(inputData.input/*.closest('[data-input]')*/), value: inputData.value, keyboard: inputData.keyboard });
        //}, 100);
    }).on('vclick', '.app-bar-history', function (e) {
        var li = $(e.target).closest('li'),
            t = li.data('text');
        if (t != null) {
            $(document.activeElement).blur();
            //_input.execute({ values: [{ name: 'QuickFind', value: t }] });
            li.closest('ul').find('.app-selected').removeClass('app-selected');
            li.addClass('app-selected');
            setTimeout(function () {
                //li.removeClass('app-selected');
                _app.action({ path: 'form/submit' });
            }, feedbackDelay);
        }
        return false;
    });

    _app.search = function (method, options) {

        // Sample Search Model
        //var sampleModel = [
        //    {
        //        type: '$matchany',
        //        fields: [
        //            { field: 'field1', operator: '=', value: 48 },
        //            { field: 'field2', operator: '$contains' },
        //            { field: 'field3', operator: '$isblank' }
        //        ]
        //    },
        //    {
        //        type: '$matchall',
        //        matches: [
        //            { field: 'field1', operator: '=', value: 48 },
        //            { field: 'field2', operator: '$contains' },
        //            { field: 'field3', operator: '$isblank' }
        //        ]
        //    }
        //];

        var mode, newMode,
            dataView;
        if (!method || typeof method !== 'string')
            method = 'show';
        // identify the data view in the argument
        if (!options)
            dataView = mobile.contextDataView();
        else if (typeof options == 'string')
            dataView = _app.find(options);
        else if (options._controller)
            dataView = options;
        else
            dataView = _app.find(options.id);

        function maxWidth() {
            return displayDensity() == 12 || _screen.width < 480 ? 'xs' : '';
        }

        function createMatchField(match, f) {
            var searchOptions = f._dataView._allFields[f.OriginalIndex].SearchOptions,
                mf = { field: f.Name, operator: searchOptions ? searchOptions[0] : '=' }
            match.fields.push(mf);
        }

        function canSearch(f) {
            return f.is('search-mode') != 'forbidden' && !f.OnDemand && f.AllowQBE != false && f.Type != 'DataView';
        }

        function enumerateAvailableFields(match) {
            var allFields = dataView._allFields,
                matchFields = match.fields,
                matchAvailable = match.available;
            // ensure that we have some conditions if search mode is not specified for any of the fields
            if (!matchFields.length)
                $(dataView._fields).each(function () {
                    var f = this;
                    if (canSearch(f)) {
                        f = allFields[f.AliasIndex];
                        if (matchFields.length == 3)
                            return false;
                        else
                            createMatchField(match, f);
                    }
                });
            // enumerate unused searchable or unhidden fields
            var matchFieldMap = {};
            matchFields.forEach(function (mf) {
                matchFieldMap[mf.field] = true;
            });
            allFields.forEach(function (f) {
                var searchMode = f.is('search-mode'), fieldName;
                if (searchMode && searchMode != 'forbidden' || !searchMode && !f.Hidden && canSearch(f)) {
                    f = allFields[f.AliasIndex];
                    fieldName = f.Name;
                    if (!matchFieldMap[fieldName] && matchAvailable.indexOf(fieldName == -1))
                        match.available.push(fieldName);
                }
            });
        }

        function generateMatch(filterBy, id, type) {
            var match = { id: id, type: type || '$matchall', filters: '$showfilters', fields: [], available: [] },
                matchMap,
                filterByField = filterBy ? dataView._allFields[dataView.findField(filterBy).AliasIndex] : null;

            dataView._allFields.forEach(function (f) {
                var searchMode = f.is('search-mode');
                if (filterBy && filterByField == f || !filterBy && (searchMode == 'required' || searchMode == 'suggested') && canSearch(f)) {
                    f = f._dataView._allFields[f.AliasIndex];
                    createMatchField(match, f);
                }
            });
            if (!filterBy)
                enumerateAvailableFields(match);
            return match;
        }

        function generateModel(data, filterBy) {
            var model = [],
                matchCount = 1,
                match, matchName = '_Match1', condition,
                matchType = data[matchName],
                allFields = dataView._allFields;
            if (filterBy)
                model.push(generateMatch(filterBy, 1));
            else {
                if (matchType)
                    while (matchType) {
                        match = { id: matchCount, type: matchType, filters: '$showfilters', fields: [], available: [] };
                        var matchFieldMap = {}, fieldName;
                        allFields.forEach(function (f) {
                            if (canSearch(f)) {
                                f = allFields[f.AliasIndex];
                                fieldName = f.Name;
                                condition = data['_Match' + matchCount + '_' + fieldName + '_op'];
                                if (condition && !matchFieldMap[fieldName]) {
                                    match.fields.push({ field: fieldName, operator: condition });
                                    matchFieldMap[fieldName] = true;
                                }
                            }
                        });
                        enumerateAvailableFields(match);
                        model.push(match);
                        matchType = data['_Match' + (++matchCount).toString()];
                    }
                else
                    model.push(generateMatch(null, 1));
            }
            return model;
        }

        function parse() {
            var allFields = dataView._allFields,
                data = options.data,
                filterBy = options.field,
                result = { id: options.id, data: data, field: filterBy, start: options.start, filter: [], find: data.QuickFind, errors: [] },
                resultFilter = result.filter,
                matches = [], conditions = [], n, lastMatchGroup;
            for (n in data)
                if (n.match(/^_match\d+$/i))
                    matches.push(n);
                else
                    conditions.push(n);
            if (!matches.length)
                matches.push('');

            // TODO: detect QuickFind request and copy it to the result.find property

            matches.forEach(function (matchGroup, groupIndex) {
                var test = new RegExp('^(' + (matchGroup ? matchGroup + '_' : '') + '.+?)_op$'),
                    matchType = data[matchGroup] || '$matchall';

                if (!matchGroup && !filterBy)
                    // inject "implied" equal operations into "data" for field values when match groups are not detected
                    allFields.forEach(function (f) {
                        f = allFields[f.AliasIndex];
                        var fieldName = f.Name;
                        if (data[fieldName] != null && data[fieldName + '_op'] == null)
                            data[fieldName + '_op'] = '=';
                    });

                conditions.forEach(function (condition) {
                    var m = condition.match(test), op, opName, opCount = 1, v, v2,
                        requiresValues, fieldName, conditionName, field;
                    if (m) {
                        opName = m[0];
                        while (data[opName] != null) {
                            op = data[opName];
                            opName = m[0] + (++opCount).toString();
                        }
                        if (op) {
                            requiresValues = filterOperatorRequiresValues(op);// op.match(/^(=|<>|<|>|<=|>=|(\$(between|in|notin|beginswith|doesnotbeginwith|contains|doesnotcontain|endswith|doesnotendwith)))$/);
                            conditionName = m[1];
                            v = data[conditionName];
                            v2 = data[conditionName + '_v2'];
                            fieldName = matchGroup ? conditionName.substring(matchGroup.length + 1) : conditionName;
                            field = dataView.findField(fieldName);
                            // analyze variables and create a filter condition
                            if (field && (!filterBy || allFields[field.OriginalIndex].Name == filterBy) && (!requiresValues || (v != null || v2 != null))) {
                                if (requiresValues) {
                                    if (op == '$between') {
                                        if (v == null) {
                                            op = '<=';
                                            v = v2;
                                        }
                                        else if (v2 == null)
                                            op = '>=';
                                        else if (v2 < v)
                                            v2 = [v, v = v2][0];
                                    }
                                    else
                                        if (v == null)
                                            v = v2;

                                    if (op == '$in' || op == '$notin') {
                                        v = _app.csv.toArray(v.toString());
                                        v.forEach(function (s, index) {
                                            v[index] = dataView.convertFieldValueToString(field, s)
                                        });
                                        v = v.join('$or$');
                                    }
                                    else {
                                        v = dataView.convertFieldValueToString(field, v);
                                        if (op == '$between')
                                            v = v + '$and$' + dataView.convertFieldValueToString(field, v2);
                                    }
                                }
                                else
                                    v = '';
                                if (op.match(/^\$/))
                                    op += '$';
                                if (lastMatchGroup != matchGroup) {
                                    if (!filterBy) {
                                        var matchTypeInfo = matchType.match(/(match|donotmatch)(all|any)/);
                                        if (matchTypeInfo)
                                            resultFilter.push('_' + matchTypeInfo[1] + '_:$' + matchTypeInfo[2] + '$')
                                    }
                                    lastMatchGroup = matchGroup;
                                }
                                resultFilter.push(field.Name + ':' + op + v);
                            }
                        }
                    }
                });

            });
            if (!filterBy) {
                var searchDataView = mobile.dataView();
                if (searchDataView != dataView)
                    searchDataView._allFields.forEach(function (f) {
                        if (f.Extended && f.Extended.required) {
                            var op = data[f.Name + '_op'];
                            if (op && filterOperatorRequiresValues(op) && data[f.Name] == null)
                                result.errors.push({ field: f.Name, error: resourcesValidator.Required });
                        }
                    });
            }

            if (options.showErrors && result.errors.length)
                _input.focus({ fieldName: result.errors[0].field, message: result.errors[0].error });
            return result;
        }

        function execute() {
            var dataViewId = options.id,
                //dataView = _app.find(dataViewId),
                data = options.data,
                start = options.start,
                filterBy = options.field,
                newFilter = options.filter;

            // TODO: process "filter" argument here
            if (filterBy) {
                dataView.removeFromFilter(dataView._allFields[dataView.findField(filterBy).AliasIndex]);
                newFilter.forEach(function (filterText) {
                    dataView._filter.push(filterText);
                });
                applyDataFilter(dataView);
            }
            else {
                if (!options.keepFilter)
                    dataView.clearFilter();
                newFilter = newFilter.length ? newFilter : null;
                dataView.viewProp('advancedSearchFilter', newFilter);
                dataView.viewProp('useAdvancedSearch', newFilter != null)
                if ('QuickFind' in data) {
                    var query = data.QuickFind;
                    if (query == null && start)
                        dataViewSyncCallback(dataViewId);
                    else
                        quickFind(dataView, query);
                    notifyDataFilterChanged(dataView);
                }
                else
                    applyDataFilter(dataView);
            }
        }

        function addCondition() {
            var searchDataView = mobile.dataView(),
                context = searchDataView.survey().context,
                newSurvey = JSON.parse(context.base),
                model = context.model,
                match = model[options.match - 1];
            // add new field condition in the match
            match.available.splice(match.available.indexOf(options.condition), 1);
            createMatchField(match, dataView.findField(options.condition));
            // generate survey
            options.survey = newSurvey;
            generate(model, searchDataView.data());
            // refresh the current survey dataview
            _app.survey('refresh', newSurvey, function (newForm) {
                resetPageHeight();
                if (!isTouchPointer)
                    newForm.find('[data-control="label"][data-field="_Match' + options.match + '_' + options.condition + '"]').trigger('vclick');
            });
        }

        function addGroup() {
            var searchDataView = mobile.dataView(),
                context = searchDataView.survey().context,
                newSurvey = JSON.parse(context.base),
                model = context.model;
            // add new match of the specified type to the model
            model.push(generateMatch(null, model.length + 1, options.type));
            // generate survey
            options.survey = newSurvey;
            generate(model, searchDataView.data());
            // refresh the current survey dataview
            _app.survey('refresh', newSurvey, function (newForm) {
                resetPageHeight();
                focusMatch(newForm, model.length);
            });
        }

        function enumerateFieldsForTopValues() {
            var list = [],
                allFields = dataView._allFields;
            allFields.forEach(function (f) {
                if (f.is('search-option-top-values'))
                    list.push(f);
            });
            if (!list.length)
                allFields.forEach(function (f) {
                    var aliasField = allFields[f.AliasIndex];
                    if (f.ItemsDataController && list.length < 3 && aliasField.Type == 'String' && !(f.AllowAutoComplete == false || f.AllowMultipleValues == false))
                        list.push(aliasField);
                });
            return list;
        }

        function changeMatch() {
            var searchDataView = mobile.dataView(),
                context = searchDataView.survey().context,
                newSurvey = JSON.parse(context.base),
                model = context.model,
                match = model[options.match - 1],
                showFilters = options.filters, n, data;
            match.type = options.type;
            // reset context for auto-complete fields based all/any type of matching
            match.fields.forEach(function (cf) {
                var f = searchDataView.findField('_Match' + match.id + '_' + cf.field);
                if (f.Extended && f.Extended.context) {
                    f.ContextFields = match.type.match(/any/) ? null : f.Extended.context;
                    f._dataView.sessionRemove(lovKey(f)/*f.Name + '_listOfValues_'*/);
                }
            });
            // restracture the fields of the match to reflect the condition filter type (standard or top 5/10)
            if (showFilters && showFilters != match.filters) {
                match.filters = showFilters;
                data = searchDataView.data();
                // clear match data
                for (var n in data) {
                    if (n.startsWith('_Match' + match.id + '_'))
                        delete data[n];
                }
                delete data['_Match' + match.id];
                // restructure the fields of the match
                if (showFilters == '$showfilters') {
                    var newMatch = generateMatch();
                    match.fields = newMatch.fields;
                }
                else {
                    match.fields = [];
                    enumerateFieldsForTopValues().forEach(function (f) {
                        match.fields.push({ field: f.Name, operator: '$in' });
                    });
                }
                // generate survey
                options.survey = newSurvey;
                generate(model, data);
                // refresh the current survey dataview
                _app.survey('refresh', newSurvey, function (newForm) {
                    resetPageHeight();
                    focusMatch(newForm, match.id);
                });
            }
        }

        function focusMatch(newForm, id) {
            if (!isTouchPointer)
                newForm.find('[data-field="_Match' + id + '"]').closest('[data-container]').next().find('[data-control="label"]').first().trigger('vclick');
        }

        function reset() {
            var context = mobile.dataView().survey().context,
                newSurvey = JSON.parse(context.base);
            // generate survey
            options.survey = newSurvey;
            generate(context.model = [generateMatch(null, 1)], {});
            // refresh the current survey dataview
            _app.survey('refresh', newSurvey, function (newForm) {
                resetPageHeight();
                focusMatch(newForm, 1);
            });
        }

        function generate(model, data) {
            var survey = options.survey,
                surveyContext = survey.context,
                allFields = dataView._allFields,
                fieldsForTopValues = enumerateFieldsForTopValues(),
                filterBy = surveyContext.field,
                filterByOp, filterByVal,
                layout = [],
                questions = [];
            if (!data)
                data = dataView.data(filterBy ? 'filter' : 'search');

            if (!surveyContext.base)
                surveyContext.base = JSON.stringify(survey);
            if (!model)
                model = generateModel(data, filterBy);
            surveyContext.model = model;

            // convert $in and $notin to "=" for Numeric and Data types
            if (filterBy) {
                filterByOp = data[filterBy + '_op'];
                filterByVal = data[filterBy];
                if (filterBy && (filterByOp == '$in' || filterByOp == '$notin') && dataView.findField(filterBy).FilterType != 'Text') {
                    data[filterBy + '_op'] = '=';
                    data[filterBy] = filterByVal instanceof Array ? filterByVal[0] : filterByVal;
                }
            }

            layout.push('<div data-layout="form" data-layout-size="tn">');
            layout.push('<div data-container="' + (filterBy ? 'simple' : 'collapsible') + '" data-wrap="false" data-header-text="none">');


            model.forEach(function (match) {
                var matchPrefix = filterBy ? '' : ('_Match' + match.id),
                    matchFilters = match.filters;

                // match controls

                if (!filterBy) {

                    layout.push('<div data-container="row" style="padding:1em">');
                    layout.push('<span data-control="field" data-field="' + matchPrefix + '" data-size="auto" style="font-weight:bold;">[_Match]</span>');
                    if (fieldsForTopValues.length)
                        layout.push('<span data-control="field" data-field="' + matchPrefix + '_filters" data-size="auto" style="text-transform:lowercase">[_Match_Filters]</span>');
                    layout.push('</div>');

                    questions.push({
                        name: matchPrefix, required: true, value: data[matchPrefix] || match.type, text: false, placeholder: 'add matching group', causesCalculate: true,
                        items: {
                            list: [
                                { value: '$matchall', text: resourcesMobile.MatchAll },
                                { value: '$matchany', text: resourcesMobile.MatchAny },
                                { value: '$donotmatchall', text: resourcesMobile.DoNotMatchAll },
                                { value: '$donotmatchany', text: resourcesMobile.DoNotMatchAny }
                            ]
                        },
                        options: {
                            lookup: {
                                openOnTap: true,
                                nullValue: false
                            }
                        }
                    });
                    if (fieldsForTopValues.length)
                        questions.push({
                            name: matchPrefix + '_filters', required: true, value: data[matchPrefix + '_filters'] || match.filters, text: false, placeholder: 'filters', causesCalculate: true,
                            items: {
                                list: [
                                    { value: '$showfilters', text: resourcesMobile.WithSpecifiedFilters },
                                    { value: '$showtop5', text: resourcesMobile.WithSelectedValues5 },
                                    { value: '$showtop10', text: resourcesMobile.WithSelectedValues10 }
                                ]
                            },
                            options: {
                                lookup: {
                                    openOnTap: true,
                                    nullValue: false
                                }
                            }
                        });
                }

                // questions included in the match
                match.fields.forEach(function (mf, index) {
                    var f = dataView.findField(mf.field),
                        originalField = allFields[f.OriginalIndex],
                        fieldName = f.Name,
                        filterType = f.FilterType,
                        dataType = filterType.toLowerCase(),
                        filterConfig = resourcesDataFilters[filterType],
                        qName = matchPrefix ? (matchPrefix + '_' + fieldName) : fieldName,
                        mfOperator = data[qName + '_op'] || mf.operator,
                        q = {
                            name: qName, type: dataType, text: f.HeaderText, placeholder: filterConfig.Kind.toLowerCase(), format: f,
                            value: data[qName], extended: { required: allFields[f.OriginalIndex].is('search-mode') == 'required' },
                            visibleWhen: '[' + (dataType == 'date' ? '"=","<>","<",">","<=",">=","$between","$in","$notin"' : '"$isnotempty","$isempty"') + '].indexOf( $row.' + qName + '_op) ' + (dataType == 'date' ? '!' : '=') + '= -1'
                        },
                        q_v2,
                        q_op = {
                            name: qName + '_op', text: f.HeaderText, required: true, items: { list: [] },
                            value: mfOperator,
                            causesCalculate: true,
                            options: {
                                openOnTap: true,
                                lookup: {
                                    autoCompleteAnywhere: true,
                                    nullValue: false,
                                    autoAdvance: 'row'
                                }
                            }
                        },
                        q_op2,
                        isStaticLov = f.lov('static');

                    if (matchFilters == '$showfilters') {
                        layout.push('<div data-container="row" style="padding-left:3em">');
                        layout.push(String.format('<span data-control="label" data-field="{0}" data-size="' + (filterBy ? 'fit' : 'auto') + '">{1}</span>', qName, f.HeaderText));
                        layout.push(String.format('<span data-control="field" data-field="{0}_op" data-size="auto" style="text-transform:lowercase">{0}_op</span>', qName));
                        if (dataType != 'boolean')
                            layout.push(String.format('<span data-control="field" data-field="{0}" data-size="auto" data-focus="true" data-visibility="f:{0}">[{0}]</span>', qName));
                        if (dataType == 'date')
                            layout.push(String.format('<span data-control="field" data-field="{0}_op2" data-size="auto" data-focus="true" data-visibility="f:{0}_op2">{0}_op</span>', qName));
                        if (dataType != 'boolean' && !f.lov('static'))
                            layout.push(String.format('<span data-control="text" data-visibility="f:{0}_v2">{1}</span><span data-control="field" data-field="{0}_v2" data-size="auto" data-visibility="f:{0}_v2">[{0}]</span>', qName, labelAnd));
                        layout.push('</div>');

                    }
                    else {
                        if (index == 0)
                            layout.push('<div data-container="row" style="padding-left:3em">');
                        layout.push('<span style="display:inline-block;vertical-align:top">');
                        layout.push(String.format('<span data-control="label" data-field="{0}" data-size="auto">{1}</span>', qName, f.HeaderText));
                        layout.push(String.format('<span data-control="field" data-field="{0}" data-size="auto" data-focus="true" data-visibility="f:{0}">[{0}]</span>', qName));
                        layout.push('</span>');
                        if (index == match.fields.length - 1)
                            layout.push('</div>');
                    }

                    // create op and op2 inputs

                    function enumerateFunctions(filterConfig, qOp) {
                        var funcCount = 0,
                            requiresSeparator,
                            list = qOp.items.list;
                        filterConfig.List.forEach(function (filterDef) {
                            if (!filterDef)
                                requiresSeparator = true;
                            else {
                                var filterFunc = filterDef.Function,
                                    searchOptions = originalField.SearchOptions;
                                if (filterFunc) {
                                    if ((!searchOptions || searchOptions.indexOf(filterFunc) != -1) && (dataType == 'text' && !(originalField.AllowAutoComplete == false || originalField.AllowMultipleValues == false) || !filterFunc.match(/^\$(in|notin)$/))) {
                                        if (requiresSeparator) {
                                            list.push({ value: '$separator' });
                                            requiresSeparator = false;
                                        }
                                        if (!isStaticLov || ['=', '<>', '$isnotempty', '$isempty'].indexOf(filterFunc) != -1) {
                                            list.push({ value: filterFunc, text: filterDef.Text });
                                            funcCount++;
                                        }
                                    }
                                }
                                else if (filterDef.List) {
                                    q_op2 = {
                                        name: qName + '_op2', text: f.HeaderText, value: data[qName + '_op2'],
                                        items: { list: [] }, placeholder: filterConfig.Text.toLowerCase(),
                                        options: {
                                            openOnTap: true,
                                            lookup: {
                                                autoCompleteAnywhere: true,
                                                nullValue: false
                                            },
                                            clearOnHide: true
                                        },
                                        visibleWhen: '$row.' + qName + '_op=="all-dates-in-period"'
                                    }
                                    if (enumerateFunctions(filterDef, q_op2))
                                        list.push({ value: 'all-dates-in-period', text: filterDef.Text });
                                }
                            }
                        });
                        return funcCount;
                    }

                    enumerateFunctions(filterConfig, q_op);
                    questions.push(q_op);
                    if (q_op2)
                        questions.push(q_op2);

                    // additional configuration of the condition questions based on the type of the data type.

                    if (dataType == 'date')
                        q.options = {
                            smartDatesDisabled: true,
                            clearOnHide: true
                        };

                    if (dataType == 'text') {
                        var allowAutoComplete = originalField.AllowAutoComplete != false,
                            lookupAllowed = mfOperator.match(/^(=|<>|\$in|\$notin)$/) != null && allowAutoComplete;
                        q.items = {
                            controller: dataView._controller,
                            view: dataView._viewId,
                            dataValueField: fieldName,
                            dataTextField: fieldName,
                            style: lookupAllowed ? 'AutoComplete' : null,
                            disabled: !lookupAllowed
                        };
                        q.context = [];
                        match.fields.forEach(function (cf) {
                            if (mf != cf)
                                q.context.push(String.format('{1}={0}_{1}', matchPrefix, cf.field));
                        });
                        q.extended.context = q.context.join(',');
                        if (!allowAutoComplete)
                            q.extended.autoComplete = false;
                        if (match.type.match(/any/))
                            q.context = null;

                        if (filterBy) {
                            q.extended.filter = dataView.get_filter();
                            q.extended.search = dataView._combinedFilter([]);
                        }

                        q.options = {
                            lookup: {
                                distinct: dataView._fields[0] != f /*index > 0*/ || !!allFields[f.OriginalIndex].ItemsStyle,
                                acceptAnyValue: true,
                                multiple: (data[qName] instanceof Array) || !!mfOperator.match(/\$(in|notin)/),
                                autoCompleteAnywhere: lookupAllowed && originalField.AutoCompleteAnywhere == true
                            },
                            clearOnHide: true
                        };
                    }
                    if (dataType == 'number') {
                        q.options = {
                            clearOnHide: true
                        };
                    }

                    if (dataType == 'boolean') {
                        q_op.required = false;
                        q_op.options.lookup.autoCompleteAnywhere = false;
                        q_op.items.list.splice(0, 0, { value: null, text: resourcesData.AnyValue });
                        q_op.placeholder = filterConfig.Kind.toLowerCase();
                    }
                    else {
                        questions.push(q);
                        if (f.lov('static')) {
                            var staticItemsStyle = f.ItemsStyle;
                            q.extended.itemsStyle = staticItemsStyle;
                            q.placeholder = resourcesDataFilters['Text'].Kind.toLowerCase();
                            q.items = {
                                style: staticItemsStyle,
                                list: []
                            };
                            f.Items.forEach(function (item) {
                                q.items.list.push({ value: item[0], text: item[1] });
                            });
                            //q.items = {
                            //    controller: dataView._controller,
                            //    view: dataView._viewId,
                            //    dataValueField: fieldName,
                            //    dataTextField: fieldName,
                            //    style: 'DropDownList'
                            //}
                            q.options.lookup = {
                                nullValue: false,
                                openOnTap: true
                            }
                        }
                        else {
                            q_v2 = {
                                name: qName + '_v2', type: dataType, text: f.HeaderText, format: f, placeholder: filterConfig.Kind.toLowerCase(),
                                visibleWhen: '$row.' + qName + '_op=="$between"', value: data[qName + '_v2'],
                                options: {
                                    smartDatesDisabled: true,
                                    clearOnHide: true
                                }
                            };
                            questions.push(q_v2);
                        }
                    }


                    if (matchFilters != '$showfilters' && q.items && q.options) {
                        q.items.style = 'CheckBoxList';
                        q.options.lookup = {
                            distinct: true,
                            anyValue: true,
                            top: parseInt(matchFilters.substring('$showtop'.length))
                        };
                    }
                });

                // "add condition" controls
                if (!filterBy && match.available.length && matchFilters == '$showfilters') {
                    layout.push('<div data-container="row" style="padding-left:3em">');
                    layout.push('<span data-control="field" data-field="' + matchPrefix + '_addCondition" data-size="auto">[_AddCondition]</span>');
                    layout.push('</div>');
                    var qAddCondition = {
                        name: matchPrefix + '_addCondition', text: false, placeholder: resourcesGrid.AddConditionText.toLowerCase(), causesCalculate: true, //required: true, value: '$addcondition',
                        items: { list: [] },
                        options: {
                            lookup: {
                                nullValue: false,
                                openOnTap: true,
                                autoCompleteAnywhere: true
                            }
                        }
                    };
                    match.available.forEach(function (fieldName) {
                        var f = dataView.findField(fieldName);
                        f = allFields[f.AliasIndex];
                        qAddCondition.items.list.push({ value: f.Name, text: f.HeaderText });
                    });
                    questions.push(qAddCondition);
                }
            });

            // "add matching group" controls
            if (!filterBy) {
                layout.push('<div data-container="row" style="padding:1em">');
                layout.push('<span data-control="field" data-field="_Match_addGroup" data-size="auto">[_addGroup]</span>');
                layout.push('</div>');

                questions.push({
                    name: '_Match_addGroup', text: false, placeholder: resourcesMobile.AddMatchingGroup.toLowerCase(), causesCalculate: true,
                    items: {
                        list: [
                            { value: '$matchall', text: resourcesMobile.MatchAll },
                            { value: '$matchany', text: resourcesMobile.MatchAny },
                            { value: '$donotmatchall', text: resourcesMobile.DoNotMatchAll },
                            { value: '$donotmatchany', text: resourcesMobile.DoNotMatchAny }
                        ]
                    },
                    options: {
                        lookup: {
                            nullValue: false,
                            openOnTap: true
                        }
                    }
                });
            }

            layout.push('</div>'); // collapsible
            layout.push('</div>'); // form

            survey.questions = questions;
            survey.layout = layout.join('\r\n');

            if (!survey.options)
                survey.options = {
                    discardChangesPrompt: false,
                    modal: {
                        always: true,
                        max: maxWidth(),
                        fitContent: true,
                        dock: 'top',
                        autoGrow: true
                    },
                    materialIcon: 'search'
                };

            if (filterBy) {
                survey.submitText = resourcesMobile.Apply;
                var surveyOptions = survey.options;
                surveyOptions.modal = {
                    always: true,
                    max: 'xxs',
                    fitContent: true,
                    autoGrow: true
                }
                //surveyOptions.contentStub = false;
                surveyOptions.materialIcon = 'filter-list';
                survey.text2 = 'Filter';
                survey.text = dataView.get_view().Label;
            }
            else {
                if (!survey.text) {
                    survey.text = dataView.get_view().Label;
                    survey.text2 = resourcesMobile.AdvancedSearch;
                }
                var buttons = survey.buttons;
                if (!buttons)
                    buttons = survey.buttons = [];
                buttons.push(
                    {
                        id: 'resetSearch',
                        text: resourcesGrid.ResetAdvancedSearch,
                        icon: 'material-icon-clear-all',
                        click: 'searchreset.dataview.app',
                        key: 'Ctrl+R'
                    });
                if (dataView.get_showQuickFind() != false)
                    buttons.push({}, {
                        id: 'showQuickFind',
                        //icon: 'material-icon-keyboard-return',
                        scope: 'context',
                        text: resourcesMobile.ShowLess,// resourcesGrid.HideAdvancedSearch,
                        click: 'quickfindshow.dataview.app'
                    });
            }
            return survey;
        }

        function quickFindAutoComplete() {
            var qry = options.value || '',
                complexParamIterator = /(\"?(\S+)\:)\S*/g,
                paramMatch = complexParamIterator.exec(qry),
                paramDef, paramFirstFieldName,
                searchData, dataItems, searchDataChanged,
                qryIsBlank = qry == '',
                qryRegex = qryIsBlank ? null : new RegExp(RegExp.escape(qry.toString()), 'i'),
                qryStartsRegex = qryIsBlank ? null : new RegExp('^' + RegExp.escape(qry.toString()), 'i'),
                history = dataView.viewProp('quickFindHistory') || [], list,
                dataInput = options.dataInput,
                searchRow = dataInput.closest('[data-container="row"]'),
                historyRow = searchRow.next(),
                ul, maxItemCount = 6, suggestedCount = maxItemCount,
                fieldNameFilters = [],
                hintList = [], keyboard = options.keyboard,
                allFields = dataView._allFields;

            dataInput.closest('.app-bar-search').toggleClass('app-null', qryIsBlank).find('input');

            list = [];
            if (keyboard)
                history.forEach(function (t) {
                    if (!qryRegex || t.toString().match(qryRegex))
                        list.push(t);
                });
            else
                list = history.splice(qryIsBlank ? 0 : 1);
            if (qry) {
                while (paramMatch) {
                    paramDef = paramMatch[1];
                    if (fieldNameFilters.indexOf(paramMatch[2]) == -1)
                        fieldNameFilters.push(paramMatch[2]);
                    paramMatch = complexParamIterator.exec(qry);
                }
                if (fieldNameFilters.length) {
                    fieldNameFilters.forEach(function (sample) {
                        var hint = [], reducedSample = sample.replace(/\s/g, '').toLowerCase();
                        allFields.forEach(function (f) {
                            var aliasField = allFields[f.AliasIndex],
                                headerText = aliasField.HeaderText || aliasField.Label || ''
                            if (f.AllowQBE && !f.Hidden && headerText.replace(/\s/g, '').toLowerCase().startsWith(reducedSample)) {
                                hint.push('"' + headerText + '"');
                                if (!paramFirstFieldName)
                                    paramFirstFieldName = aliasField.Name;
                            }
                        });
                        if (hint.length)
                            hintList.push('"' + sample + ':" = ' + hint.join(', '));
                    });
                }
                if (paramDef) {
                    qry = qry.substring(paramDef.length);
                    qryRegex = qry.length ? new RegExp(RegExp.escape(qry.toString()), 'i') : null;
                    qryStartsRegex = qry.length ? new RegExp('^' + RegExp.escape(qry.toString()), 'i') : null;
                }
            }
            if (list.length < maxItemCount && qryRegex && !dataView.tagged('search-suggestions-none') && keyboard) {
                suggestedCount = list.length;
                searchData = dataView.viewProp('searchData');
                if (!searchData)
                    searchData = {};
                if (!dataInput.data('scannedDataItems')) {
                    dataItems = $('#' + dataView._id).find('li.dv-item a');
                    if (!dataItems.length)
                        dataItems = $('[data-for="' + dataView._id + '"]').find('li.dv-item a');
                    dataItems.each(function () {
                        var item = $(this),
                            dataContext = item.data('data-context');
                        if (dataContext)
                            dataView._fields.forEach(function (f) {
                                var fieldValueList;
                                f = allFields[f.AliasIndex];
                                if (f.AllowQBE && f.Type == 'String') {
                                    if (!fieldValueList) {
                                        fieldValueList = searchData[f.Name];
                                        if (!fieldValueList)
                                            searchData[f.Name] = fieldValueList = [];
                                    }
                                    var v = dataContext.row[f.Index], t;
                                    if (v != null) {
                                        t = f.format(v)
                                        if (fieldValueList.indexOf(t) == -1) {
                                            fieldValueList.push(t);
                                            searchDataChanged = true;
                                        }
                                    }
                                }
                            });
                    });
                    if (searchDataChanged)
                        dataInput.data('scannedDataItems', true);
                    dataView.viewProp('searchData', searchData);
                }
                //$(searchDataList).each(function () {
                //    var t = this.toString();
                //    if (t.match(qryRegex) && list.indexOf(t) == -1 && list.indexOf('"' + t + '"') == -1)
                //        list.push(t);
                //    if (list.length == maxItemCount) return false;
                //});
                var startsWithList = [], containsList = [], resultIndex = 0;
                for (var fieldName in searchData)
                    if (fieldName != '_list' && (!paramFirstFieldName || fieldName == paramFirstFieldName)) {
                        searchData[fieldName].forEach(function (t) {
                            if (t.match(qryStartsRegex) && startsWithList.indexOf(t) == -1 && startsWithList.indexOf('"' + t + '"') == -1)
                                startsWithList.push(t);
                        });
                    }
                startsWithList.sort();
                if (startsWithList.length < maxItemCount) {
                    for (var fieldName in searchData)
                        if (fieldName != '_list' && (!paramFirstFieldName || fieldName == paramFirstFieldName)) {
                            searchData[fieldName].forEach(function (t) {
                                if (t.match(qryRegex) && containsList.indexOf(t) == -1 && containsList.indexOf('"' + t + '"') == -1)
                                    containsList.push(t);
                            });
                        }
                    containsList.sort();
                }
                containsList = startsWithList.concat(containsList);
                while (resultIndex < containsList.length && list.length < maxItemCount) {
                    var sample = containsList[resultIndex++];
                    if (list.indexOf(sample) == -1)
                        list.push(sample);
                }
            }

            if (list.length || hintList.length) {
                if (!historyRow.is('.app-bar-history'))
                    historyRow = $('<div data-container="row" class="app-bar-history"></div>').insertAfter(searchRow);
                historyRow.show().empty();
                ul = $('<ul/>').appendTo(historyRow);
                if (hintList.length)
                    $('<li class="app-hint"/>').text(hintList.join('; ')).appendTo(ul);
                $(list).each(function (index) {
                    if (index == maxItemCount) return false;
                    var t = this,
                        isSearchItem = index >= suggestedCount,
                        m = qryRegex ? t.match(qryRegex) : null,
                        li = $('<li/>').attr('data-text', isSearchItem ? ('"' + t + '"') : t).appendTo(ul);
                    if (m) {
                        $('<span/>').appendTo(li).text(t.substring(0, m.index));
                        $('<b/>').appendTo(li).text(t.substring(m.index, m.index + qry.length));
                        $('<span/>').appendTo(li).text(t.substring(m.index + qry.length));
                    }
                    else
                        li.text(t);
                    $('<i class="app-icon material-icon"/>').appendTo(li).text(isSearchItem ? 'search' : 'history');
                });
                resetPageHeight();
            }
            else if (historyRow.length) {
                historyRow.remove();
                resetPageHeight();
            }
        }

        // -------------------------------------
        // identify search mode
        // -------------------------------------
        if (method == 'mode') {
            mode = dataView.viewProp('searchMode');
            return mode || 'quickfind';
        }
        // -------------------------------------
        // toggle search mode
        // -------------------------------------
        if (method == 'toggle') {
            mode = _app.search('mode', dataView);
            if (mode == 'quickfind')
                mode = 'advanced';
            else
                mode = 'quickfind';
            // assign mode and continue running in that mode
            dataView.viewProp('searchMode', mode);
            //pageTransitions(false);
            //$settings('ui.transitions.style', 'none');
            //whenPageShown(function () {
            //    pageTransitions(true);
            //});
        }
        // -------------------------------------
        // try locating possible search targets
        // -------------------------------------
        if (method == 'enumerate') {
            var context = [],
                searchCallback,
                scrollable = findScrollable(findActivePage()),
                scrollableOffset = scrollable.offset();

            // find every echo in the visible range
            scrollable.find('.app-echo').each(function () {
                var echo = $(this),
                    dataView = $app.find(echo.attr('data-for')),
                    totalRowCount = dataView._totalRowCount,
                    echoOffset = echo.offset();
                // note that the first echo on the summary page has negative margin that equals 49. The wrapper starts at 50. Therefore we need ">= scrollableOffset.top - 1"
                if (totalRowCount != -1 && echoOffset.top >= scrollableOffset.top - 1 && echoOffset.top <= scrollableOffset.top + scrollable.height() - 1)
                    context.push({
                        text: dataView.get_view().Label, icon: 'search', desc: htmlToText(dataView.extension().instruction(false)), count: totalRowCount, callback: function () {
                            _app.search('show', dataView);
                        }
                    });
            });
            if (context.length) {
                searchCallback = function () {
                    if (context.length == 1)
                        context[0].callback();
                    else {
                        context.splice(0, 0, { text: labelSearch });
                        showContextPanel(context, '#app-panel-search-menu', { position: 'right' });
                    }
                };
            }
            if (!searchCallback) {
                // try locating search in  the current context
                mobile.navContext(context);
                $(context).each(function () {
                    var item = this;
                    if (item.icon == 'search') {
                        searchCallback = function () {
                            item.callback(item.context);
                        };
                        return false;
                    }

                });
            }
            if (searchCallback)
                setTimeout(searchCallback);
            return searchCallback != null;
        }
        // ------------------------------------------
        // handle various methods of Search API
        // -----------------------------------------
        if (method == 'generate')
            _app.survey('show', generate());
        if (method == 'parse')
            return parse();
        if (method == 'execute') {
            if (!options.filter)
                options = search('parse', options);
            execute(options)
        }
        if (method == 'addCondition')
            addCondition();
        if (method == 'changeMatch')
            changeMatch();
        if (method == 'addGroup')
            addGroup();
        if (method == 'reset')
            reset();
        if (method == 'autoComplete')
            quickFindAutoComplete();
        if (!(method == 'show' || method == 'toggle')) return;



        // ------------------------------------------
        // search the explicitly specified data view
        // -----------------------------------------
        var searchOnStart = dataView.get_searchOnStart(),
            activePage = findActivePage();
        if (searchOnStart) {
            dataView._totalRowCount = 0;
            if (getActivePageId() != dataView._id)
                refreshEchoToolbar(dataView);
            else
                refreshContext(false, 0);
            //dataView._totalRowCount = -1;
            dataView._requiresContextRefresh = true;
            dataView.set_searchOnStart(false);
        }
        mode = dataView.viewProp('searchMode') || 'quickfind';
        if (!options) options = {};
        var activeSearchView = mobile.contextDataView(),
            surveyContext = { id: dataView._id, start: searchOnStart, search: true, field: options.field };
        if (activeSearchView && activeSearchView != dataView && _app.read(activeSearchView, '_survey.context.search')) {
            mobile.pageInfo().deleted = true;
            surveyContext = activeSearchView.survey().context;
            searchOnStart = surveyContext.start;
        }

        if (searchOnStart) {
            if (method != 'toggle') {
                newMode = dataView.tagged('search-on-start-simple') ? 'quickfind' : 'advanced';
                if (mode != newMode)
                    dataView.viewProp('searchMode', newMode);
                mode = newMode;
            }
            whenPageShown(function () {
                var pageInfo = mobile.pageInfo(),
                    context = pageInfo.dataView.survey().context;
                whenPageCanceled(function () {
                    if (context && !pageInfo._canceled)
                        dataViewSyncCallback(context.id);
                });
            });
        }

        if (mode == 'advanced' || options.field /*|| searchOnStart && mode == 'advanced' && method != 'toggle'*/) {
            var survey = {
                controller: dataView._controller + '._search',
                parent: dataView._id,
                context: surveyContext,
                dynamic: false
            };
            survey.submit = 'searchperform.dataview.app';
            survey.submitText = labelSearch;
            survey.submitIcon = 'material-icon-search';
            survey.create = 'searchgenerate.dataview.app';
            survey.calculate = 'searchcalculate.dataview.app';
            survey.tryLoad = !surveyContext.field;
            _app.survey(survey);
            iyf();
        }
        else {
            var quickFindValue = dataView.extension().quickFind();
            if (quickFindValue == '')
                quickFindValue = null;
            whenPageShown(function () {
                _app.search('autoComplete', { id: dataView._id, dataInput: findActivePage().find('[data-field="QuickFind"]'), value: quickFindValue });
            });
            _app.survey({
                parent: dataView._id,
                controller: dataView._id + '-' + 'quickfind',
                context: surveyContext,
                topics: [
                    {
                        questions: [{ name: 'QuickFind', text: false, placeholder: 'Search in ' + dataView.get_view().Label, value: quickFindValue }]
                    }
                ],
                options: {
                    modal: {
                        fitContent: true,
                        always: true,
                        max: activePage.is('.app-page-modal') && !activePage.is('.app-page-modal-dock') ? '' : maxWidth(),
                        title: false,
                        tapOut: true,
                        dock: 'top'
                    },
                    actionButtons: false,
                    discardChangesPrompt: false,
                    contentStub: false
                },
                layout: '<div class="app-container-search" data-container="simple" data-header-text="none" data-wrap="true">' +
                '<div data-container="row" class="app-bar-search' + (quickFindValue == null ? ' app-null' : '') + '" data-density="' + (isTouchPointer ? 'comfortable' : 'relaxed') + '"><i class="app-icon material-icon material-icon-search" title="' + labelSearch + '">search</i>' +
                '<span data-control="field" data-field="QuickFind" data-notify="quickfindautocomplete.dataview.app" data-spell-check="false">[Query]</span>' +
                '<i class="app-icon material-icon material-icon-cancel" title="' + resourcesMobile.ClearText + '">cancel</i><i class="app-icon material-icon material-icon-more app-btn-more" title="' + resourcesMobile.ShowMore + '"/></div>' +
                '</div>',
                submitText: 'Search',
                submit: 'searchperform.dataview.app'
            });
        }
    }

    function showFile(name, data, type) {
        if (navigator.msSaveBlob)
            return navigator.msSaveBlob(new Blob(["\ufeff", data], { type: 'data:attachment/text' }), name);
        var a = $('<a style="display: none;"/>').appendTo($body),
            url = window.URL.createObjectURL(new Blob(["\ufeff", data], { type: type || 'text/csv' }));
        a.attr({ download: name, href: url })[0].click();
        a.remove();
        window.URL.revokeObjectURL(url);
    }

    _app.import = function (method, options) {

        function getExtension(fileName) {
            return fileName.match(/\.(\w+)$/)[1].toLowerCase();
        }

        function toError(item) {
            // index: state.index, type: 'submit', command: 'Insert', values: values 
            var errors = _app.import.state.queues.errors,
                row = options.data[item.index - 1], k,
                ar;
            if (!errors.length) {
                ar = [resourcesMobile.Line, resourcesMobile.Error];
                for (k in row)
                    ar.push(k);
                errors.push(_app.csv.toString(ar));
            }
            ar = [item.index + 1, item.error];
            for (k in row)
                ar.push(row[k]);

            errors.push(_app.csv.toString(ar));
        }

        function findColumnValue(columnName, field) {
            var data, i,
                list = options.data,
                dataFormatString = field.DataFormatString;
            for (i = 0; i < Math.min(list.length, 100); i++) {
                data = list[i];
                if (data)
                    data = data[columnName];
                if (data) break;
            }
            if (data && field.Type.match(/^Date/) && typeof data == 'number')
                data = dataFormatString ? String.format(dataFormatString, excelDateToJavaScriptDate(data)) : data.toString();
            return data;
        }

        function fixdata(data) {
            var o = "", l = 0, w = 10240;
            for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
            o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
            return o;
        }

        function nextColumn(col) {
            var lastLetter = col[col.length - 1];
            if (lastLetter == 'Z') {
                if (col.length - 1 > 0)
                    col = nextColumn(col.substring(0, col.length - 1)) + 'A';
                else
                    col = 'AA';
            }
            else
                col = col.substring(0, col.length - 1) + String.fromCharCode(col.charCodeAt(col.length - 1) + 1);
            return col;
        }

        function ImportError(message) {
            this.message = message;
        }

        function upload() {
            var dataView = options.dataView,
                view = options.view,
                parentDataView = dataView.get_parentDataView();
            whenPageShown(iyf);
            _app.survey({
                text: dataView.get_view().Label,
                text2: resourcesActions.Scopes.ActionBar.Import.HeaderText,
                parent: dataView._id,
                context: { id: dataView._id, controller: dataView._controller, view: view },
                controller: 'import_from_file',
                topics: [
                    {
                        description: resourcesImport.SelectFile,
                        wrap: true,
                        questions: [
                            { name: 'file', text: false, type: 'blob' }
                        ]
                    }
                ],
                options: {
                    materialIcon: 'file-upload',
                    discardChangesPrompt: false,
                    modal: {
                        fitContent: true,
                        max: 'xs',
                        always: true
                    }
                },
                submitText: resourcesMobile.Submit,
                submit: function (e) {
                    var dataView = e.dataView,
                        data = dataView.data(),
                        importContext = dataView.survey().context;


                    function focusOnFile() {
                        if (!isTouchPointer)
                            _input.focus({ fieldName: 'file' });
                    }
                    if (!data.file) {
                        e.preventDefault();
                        _app.alert(resourcesMobile.Files[isTouchPointer ? 'Tap' : 'Drop'], focusOnFile);
                    }
                    else {
                        if (!_app.import('supports', { name: data.file[0].name })) {
                            e.preventDefault();
                            _app.alert(String.format(resourcesImport.NotSupported, data.file[0].name), focusOnFile);
                        }
                        else
                            // continue to close the Submit Import File window until the previous page is displayed
                            whenPageShown(function () {
                                _app.import('parse', {
                                    file: data.file[0], callback: function (objArray) {
                                        _app.import('map', { data: objArray, name: data.file[0].name, context: importContext });
                                    }
                                });
                            });
                    }
                }
            });
        }

        function parse() {
            try {
                var rawData = reader.result,
                    fileData;
                if (getExtension(options.file.name) == 'csv')
                    fileData = $.csv.toObjects(rawData);
                else {
                    fileData = [];
                    var arr = fixdata(rawData),
                        w = XLSX.read(btoa(arr), { type: 'base64' });
                    var ws = w.Sheets[w.SheetNames[0]],
                        wsRef = ws['!ref'], // A1:K80 - example of !ref
                        wsRefInfo = wsRef ? wsRef.match(/(([A-Z]+)(\d+))\:(([A-Z]+)(\d+))/) : null,
                        firstCol, lastCol, col,
                        firstRow, lasRow, row,
                        columns = [],
                        dictionary = [];

                    if (!wsRefInfo)
                        throw new ImportError(resourcesData.NoRecords);
                    firstCol = wsRefInfo[2];
                    lastCol = wsRefInfo[5];
                    firstRow = parseInt(wsRefInfo[3]);
                    lastRow = parseInt(wsRefInfo[6]);
                    if (firstRow < lastRow) {
                        row = firstRow + 1;
                        // create a dictionary of column names
                        col = firstCol;
                        while (col != lastCol) {
                            columns.push(col);
                            col = nextColumn(col);
                        }
                        columns.push(col);

                        // create a dictionary of field names
                        columns.forEach(function (col) {
                            var cell = ws[col + firstRow];
                            dictionary.push(cell ? cell.v : null);
                        });
                        while (row <= lastRow) {
                            var obj = {};
                            fileData.push(obj);
                            columns.forEach(function (col, index) {
                                var cell = ws[col + row],
                                    name = dictionary[index];
                                if (name)
                                    obj[name] = cell ? cell.v : null;
                            });
                            row++;
                        }
                    }
                }

                if (fileData.length) {
                    mobile.busy(false);
                    if (options.callback)
                        options.callback(fileData)
                }
                else
                    throw new ImportError(resourcesData.NoRecords);
            }
            catch (ex) {
                mobile.busy(false);
                $app.alert(ex.message);
            }
        }

        function map(metadata) {
            var context = options.context;
            if (!arguments.length) {
                _app.execute({
                    controller: context.controller, view: context.view || 'createForm1', requiresData: false, success: function (result) {
                        map(result);
                    }
                });
                return;
            }
            var dataView = $app.find(context.id),
                filterFields = (dataView._filterFields || '').split(','),
                fields = metadata.fields,
                loweredImportColumns = [], importColumns = [], columnName, notMappedFields = [],
                viewLabel = dataView.get_view().Label,
                questions = [], questionMap = {};
            for (columnName in options.data[0]) {
                loweredImportColumns.push(columnName.toLowerCase());
                importColumns.push(columnName);
            }
            context.importColumns = importColumns.slice(0);

            // try exact match to the header text or field name
            fields.forEach(function (field) {
                var originalField = field;
                field = fields[field.AliasIndex];
                if (!originalField.Hidden && !field.OnDemand && !originalField.ReadOnly && originalField.Type != 'DataView') {
                    //field = dataView._allFields[field.AliasIndex];
                    var name = field.Name,
                        text = field.HeaderText,
                        q = {
                            name: name, text: text, causesCalculate: true,
                            items: { style: 'DropDownList', list: [{ value: null, text: resourcesImport.NotMatched }] },
                            value: null, columns: 30, placeholder: resourcesImport.NotMatched, required: !field.AllowNulls && !field.HasDefaultValue
                        },
                        colIndex = loweredImportColumns.indexOf(text.toLowerCase()),
                        filterFieldsIndex = filterFields.indexOf(originalField.Name);
                    if (filterFieldsIndex != -1) {
                        if (filterFieldsIndex > 0)
                            return;
                        delete q.items;
                        var contextDataView = dataView.context(),
                            headerField = contextDataView.headerField(),
                            contextObj = dataView.context('data');
                        q.value = headerField ? headerField.format(contextObj[headerField.Name]) : nullValueInForms;
                        q.readOnly = true;
                        context.masterKey = [];
                        filterFields.forEach(function (fieldName) {
                            context.masterKey.push({ field: fieldName, newValue: contextObj[fieldName], modified: true });
                        });

                    }
                    else {
                        if (colIndex == -1)
                            colIndex = loweredImportColumns.indexOf(name.toLowerCase());
                        if (colIndex == -1)
                            notMappedFields.push(field);
                        else {
                            name = importColumns[colIndex];
                            q.value = name;
                            q.items.list.push({ value: name, text: name });
                            loweredImportColumns.splice(colIndex, 1);
                            importColumns.splice(colIndex, 1);
                        }
                    }
                    questions.push(q);
                    questionMap[q.name] = q;
                }
            });

            function doMatchColumn(f, matchedColumn) {
                var q = questionMap[f.Name];
                q.value = matchedColumn;
                q.items.list.push({ value: matchedColumn, text: matchedColumn });
                importColumns.splice(importColumns.indexOf(matchedColumn), 1);
            }

            if (notMappedFields.length) {
                // partial mapping of columns to field headers and names
                var i = 0, matchedField, matchedColumn;
                while (i < importColumns.length) {
                    matchedColumn = importColumns[i];
                    matchedField = null;
                    $(notMappedFields).each(function (index) {
                        var f = this;
                        if (f.HeaderText.indexOf(matchedColumn) != -1 || f.Name.indexOf(matchedColumn) != -1) {
                            matchedField = f;
                            notMappedFields.splice(index, 1);
                            return false;
                        }
                    });
                    if (matchedField)
                        doMatchColumn(matchedField, matchedColumn);
                    else
                        i++;
                }
                if (notMappedFields.length) {
                    // partial mapping of field headers and names to columns
                    notMappedFields.forEach(function (f) {
                        matchedColumn = null;
                        $(importColumns).each(function () {
                            var c = this;
                            if (c.indexOf(f.HeaderText) != -1 || c.indexOf(f.Name) != -1) {
                                matchedColumn = c.toString(); // indexOf will not work correctly otherwise
                                return false;
                            }
                        });
                        if (matchedColumn)
                            doMatchColumn(f, matchedColumn)
                    });
                }
            }

            // Add the remaining unmatched import columns to each question
            questions.forEach(function (q) {
                importColumns.forEach(function (c) {
                    if (q.items)
                        q.items.list.push({ value: c, text: c });
                });
                var value = q.value,
                    field;
                if (value) {
                    field = metadata.map[q.name];
                    q.footer = findColumnValue(value, field);
                }
            });

            context.availableColumns = importColumns;
            context.metadata = metadata;

            _app.survey({
                controller: 'import_map',
                text: viewLabel,
                text2: resourcesActions.Scopes.ActionBar.Import.HeaderText,
                description: String.format(resourcesImport.FileStats, options.data.length, options.name),
                questions: questions,
                options: {
                    modal: {
                        max: 'xs',
                        fitContent: true,
                        always: true
                    },
                    ///discardChangesPrompt: false,
                    materialIcon: 'settings_input_component'
                },
                context: context,
                submit: function (e) {
                    options.fieldMap = e.dataView.data();
                    for (var k in options.fieldMap)
                        if (e.dataView.findField(k).ReadOnly)
                            delete options.fieldMap[k];
                    e.dataView.tag('discard-changes-prompt-none');
                    whenPageShown(function () {
                        whenPageShown(function () {
                            var pageInfo = mobile.pageInfo();
                            whenPageCanceled(function () {
                                if (!pageInfo._canceled)
                                    pageInfo.dataView.survey().cancel();
                            });
                            executeImportStep('init')
                        });
                        _app.survey({
                            controller: 'import_status',
                            options: {
                                modal: {
                                    max: 'xxs',
                                    fitContent: true,
                                    always: true,
                                    buttons: {
                                        more: false,
                                        fullscreen: false
                                    }
                                },
                                contentStub: false
                            },
                            questions: [],
                            layout: String.format('<div style="padding:1em"><div>{0} <b>{1}</b> {2} <b>{3}</b>...</div><div class="app-import-status">&nbsp;<br/>&nbsp;<br/>&nbsp;<br/>&nbsp;</div></div>', resourcesImport.Importing, options.name, resourcesImport.Into, viewLabel),
                            submit: false,
                            cancel: function () {
                                _app.import.state = null;
                            }
                        });
                    });
                },
                submitText: resourcesImport.StartImport,
                calculate: function (e) {
                    var dataView = e.dataView,
                        fields = dataView._fields,
                        //triggeredBy = e.rules.arguments().Trigger,
                        survey = dataView.survey(),
                        context = survey.context,
                        availableColumns = context.importColumns.slice(0),
                        data = dataView.data();

                    fields.forEach(function (f) {
                        if (f.ReadOnly) return;
                        var mappedColumn = data[f.Name],
                            footer = f.FooterText;
                        if (mappedColumn != null) {
                            availableColumns.splice(availableColumns.indexOf(mappedColumn), 1);
                            f.FooterText = findColumnValue(mappedColumn, metadata.map[f.Name]);
                        }
                        else
                            f.FooterText = null;
                        if (footer != f.FooterText)
                            setTimeout(function () {
                                _app.input.execute({ values: [{ name: f.Name, value: data[f.Name] }] });
                            });
                    });

                    fields.forEach(function (f) {
                        if (f.ReadOnly) return;
                        var items = f.Items,
                            mappedColumn = data[f.Name];
                        f.ItemCache = null;
                        items.splice(1);
                        if (mappedColumn != null)
                            items.push([mappedColumn, mappedColumn]);
                        availableColumns.forEach(function (col) {
                            items.push([col, col]);
                        });
                    });

                }
            });
        }

        function now() {
            return new Date().getTime();
        }

        function excelDateToJavaScriptDate(serial) {
            // http://stackoverflow.com/questions/16229494/converting-excel-date-serial-number-to-date-using-javascript
            var utc_days = Math.floor(serial - 25568);
            var utc_value = utc_days * 86400;
            var date_info = new Date(utc_value * 1000);

            var fractional_day = serial - Math.floor(serial) + 0.0000001;

            var total_seconds = Math.floor(86400 * fractional_day);

            var seconds = total_seconds % 60;

            total_seconds -= seconds;

            var hours = Math.floor(total_seconds / (60 * 60));
            var minutes = Math.floor(total_seconds / 60) % 60;

            return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate(), hours, minutes, seconds);
        }


        function executeImportStep() {
            var state = _app.import.state,
                message;
            if (arguments[0] == 'init') {
                _app.import.state = state = options;
                var metadata = state.context.metadata,
                    fields = state.fields = {},
                    fieldMap = state.fieldMap,
                    columnMap = state.columnMap = {};
                // create column mapping
                for (var k in fieldMap) {
                    var columnName = fieldMap[k];
                    if (columnName)
                        columnMap[columnName] = k;
                }
                // process metadata
                state.duplicate = { test: [], accept: [] };
                metadata.fields.forEach(function (f) {
                    fields[f.Name] = f;
                    var tag = f.Tag;
                    if (tag) {
                        if (tag.match(/\bimport-duplicate-test\b/))
                            state.duplicate.test.push(metadata.fields[f.AliasIndex]);
                        if (tag.match(/\bimport-duplicate-accept\b/))
                            state.duplicate.accept.push(f.Name);
                    }
                });
                // setup queues
                state.status = findActivePage('.app-import-status');
                state.dataView = _app.find(state.context.id);
                state.index = 0;
                state.count = 0;
                state.lookupCache = {};
                state.queues = {
                    lookup: [],     // lookups waiting to be resolved
                    nextLookup: 0,  // index of the next lookup to be processed
                    test: [],       // duplicate testing
                    submit: [],     // ready to be send out
                    errors: []      // the list of failed rows
                }
                state.started = now();
                state.mode = 'scan';
            }
            else if (state) {
                var queues = state.queues,
                    started = now(),
                    data = state.data,
                    importController = state.context.controller,
                    importView = state.context.view;
                // perform one iteration of data scan 
                if (state.mode == 'scan') {
                    var columnMap = state.columnMap,
                        obj;
                    if (data.length) {
                        //message = 'Scanning records...';
                        while (state.index < data.length) {
                            obj = data[state.index++];
                            var values = [],
                                v, k, f, fieldName, fieldValue,
                                lookupField, lookupRequests = [], args, errors = [], testFilter = [],
                                duplicateTest = state.duplicate.test;
                            for (k in columnMap) {
                                fieldValue = obj[k];
                                f = state.fields[columnMap[k]];
                                if (f && options.fieldMap[f.Name] == k) {
                                    fieldName = f.Name;
                                    lookupField = f.OriginalIndex != f.Index ? state.fields[state.context.metadata.fields[f.OriginalIndex].Name] : null;
                                    if (fieldValue == null) {
                                        if (lookupField)
                                            f = lookupField;
                                        values.push({ field: f.Name, newValue: fieldValue, modified: true });
                                        if (duplicateTest.indexOf(f) != -1)
                                            errors.push(fieldName + ': ' + resourcesValidator.RequiredField);

                                    }
                                    else {
                                        if (lookupField) {
                                            fieldName = lookupField.Name;
                                            if (fieldValue === '')
                                                fieldValue = null;
                                            else {
                                                var lookupController = lookupField.ItemsDataController,
                                                    lookupView = lookupField.ItemsDataView,
                                                    lookupDataTextField = lookupField.ItemsDataTextField,
                                                    lookupDataValueField = lookupField.ItemsDataValueField,
                                                    lookupEntryKey = lookupController + '_' + lookupView + '_' + lookupDataValueField + '_' + lookupDataTextField,
                                                    lookupCacheEntry = state.lookupCache[lookupEntryKey],
                                                    lookupCacheValue, lookupRequestDef;
                                                if (!lookupCacheEntry)
                                                    lookupCacheEntry = state.lookupCache[lookupEntryKey] = {};
                                                lookupCacheValue = lookupCacheEntry[fieldValue];
                                                if (lookupCacheValue && lookupCacheValue.v != null)
                                                    fieldValue = lookupCacheValue.v;
                                                else if (lookupDataValueField) {
                                                    args = { controller: lookupController, view: lookupView, filter: [{ field: lookupDataTextField, value: fieldValue }] };
                                                    args.fieldFilter = [lookupDataValueField, lookupDataTextField];
                                                    lookupRequestDef = { valueIndex: values.length, args: args, entryKey: lookupEntryKey };
                                                    lookupRequests.push(lookupRequestDef);
                                                    if (lookupCacheValue)
                                                        lookupRequestDef.resolve = true;
                                                    else
                                                        lookupCacheValue = lookupCacheEntry[fieldValue] = { v: null };
                                                    fieldValue = null;
                                                }
                                            }
                                        }
                                        else {
                                            if (fieldValue === '')
                                                fieldValue = null;
                                            else if (typeof fieldValue == 'number' && f.Type.match(/^Date/))
                                                fieldValue = excelDateToJavaScriptDate(fieldValue);
                                            else if (typeof fieldValue == 'string' && fieldValue && f.Type != 'String') {
                                                var fv = { NewValue: fieldValue },
                                                    error = state.dataView._validateFieldValueFormat(state.fields[fieldName], fv);
                                                if (error)
                                                    errors.push(f.HeaderText + ': ' + error);
                                                else {
                                                    fieldValue = fv.NewValue;
                                                    if (typeof fieldValue == 'number' && f.Type.match(/^Date/))
                                                        fieldValue = new Date(fieldValue);
                                                }
                                            }
                                        }
                                        values.push({ field: fieldName, newValue: fieldValue, modified: true });
                                        if (duplicateTest.indexOf(f) != -1)
                                            testFilter.push({ field: f.Name, value: obj[k] });

                                    }
                                }
                            }
                            var masterKey = state.context.masterKey,
                                item = { index: state.index, type: 'submit', command: 'Insert', values: values };
                            if (masterKey)
                                masterKey.forEach(function (fv) {
                                    values.push(fv);
                                });
                            if (errors.length) {
                                item.error = errors.join('\n');
                                toError(item);
                            }
                            else if (testFilter.length) {
                                if (lookupRequests.length)
                                    item.requests = lookupRequests;
                                item.filter = testFilter;
                                queues.test.push(item);
                            }
                            else if (lookupRequests.length) {
                                item.type = 'lookup';
                                item.requests = lookupRequests;
                                queues.lookup.push(item);
                            }
                            else
                                queues.submit.push(item);
                            if (now() - started > 8)
                                break;
                        }
                    }
                    state.mode = 'send';
                }
                else
                    // perform one iteration of import/lookup 
                    if (state.mode == 'send') {
                        if (!state.busy) {

                            function fail(error) {
                                var state = _app.import.state;
                                state.busy = false;
                                state.mode = 'error';
                                state.error = error.get_message();
                            }

                            if (queues.submit.length) {
                                // submit insert/update commands
                                state.busy = true;
                                var insertRequests = [], noValuesCount = 0;
                                $(queues.submit).each(function (index) {
                                    if (index > 9) return false;
                                    var r = this, i, values = [], fv, hasValues;
                                    for (i = 0; i < r.values.length; i++) {
                                        fv = r.values[i];
                                        if (fv) {
                                            values.push(fv);
                                            if (fv.newValue != null)
                                                hasValues = true;
                                        }
                                    }
                                    if (hasValues)
                                        insertRequests.push({ command: r.command, controller: importController, view: importView, values: values, _src: r }); // submit request context
                                    else
                                        noValuesCount++;
                                });
                                queues.submit.splice(0, insertRequests.length + noValuesCount);
                                state.count += noValuesCount;
                                if (insertRequests.length) {
                                    state.message = resourcesImport.InsertingRecords;
                                    _app.execute({
                                        batch: insertRequests,
                                        done: function (result) {
                                            var state = _app.import.state;
                                            state.busy = false;
                                            state.count += insertRequests.length;
                                            insertRequests.forEach(function (ir, index) {
                                                var r = result[index];
                                                if (r.errors.length) {
                                                    ir._src.error = r.errors.join('\n');
                                                    toError(ir._src);
                                                }
                                            });
                                        },
                                        fail: fail
                                    });
                                }
                                else
                                    state.busy = false;
                            }
                            else if (queues.test.length) {
                                // test for duplicates
                                state.busy = true;
                                state.message = resourcesImport.TestingRecords;
                                var testRequests = [],
                                    accept = state.duplicate.accept;
                                $(queues.test).each(function (index) {
                                    if (index > 9) return false;
                                    var r = this;
                                    testRequests.push({ controller: importController, view: importView, filter: r.filter, requiresRowCount: false, fieldFilter: ['_pk_only'], _trc: r }); // _trc = test request context
                                });
                                queues.test.splice(0, testRequests.length);
                                _app.execute({
                                    batch: testRequests,
                                    done: function (result) {
                                        var state = _app.import.state;
                                        state.busy = false;
                                        result.forEach(function (r, index) {
                                            var data = r[importController],
                                                test = testRequests[index]._trc;
                                            if (data.length == 0)
                                                if (test.requests) {
                                                    test.requests.forEach(function (r) {
                                                        r.resolve = false; // do not resolve previously cashed lookups here
                                                    });
                                                    queues.lookup.push(test);
                                                }
                                                else
                                                    queues.submit.push(test);
                                            else if (accept.length)
                                                if (data.length == 1) {
                                                    test.command = 'Update';
                                                    var values = test.values, pk, vCount = 0;
                                                    values.forEach(function (fv, index) {
                                                        if (accept.indexOf(fv.field) == -1)
                                                            values[index] = null;
                                                        else
                                                            vCount++;
                                                    });
                                                    if (vCount) {
                                                        var lookupRequests = test.requests;
                                                        for (pk in data[0])
                                                            values.push({ field: pk, oldValue: data[0][pk], modified: false });
                                                        if (lookupRequests) {
                                                            var i = 0;
                                                            while (i < lookupRequests.length) {
                                                                var lr = lookupRequests[i];
                                                                lr.resolve = false; // do not resolve previously cashed lookups here
                                                                if (values[lr.valueIndex])
                                                                    i++;
                                                                else
                                                                    lookupRequests.splice(i, 1);
                                                            }
                                                        }
                                                        if (lookupRequests && lookupRequests.length)
                                                            queues.lookup.push(test);
                                                        else
                                                            queues.submit.push(test);
                                                    }
                                                }
                                                else {
                                                    test.error = resourcesImport.Duplicates + ': ' + data.length;
                                                    toError(test);
                                                }
                                        });
                                    }
                                });
                            }
                            else if (queues.nextLookup < queues.lookup.length) {
                                // resolve lookup values
                                state.busy = true;
                                var lookupRequests = [],
                                    resolveRequests = [],
                                    startLookupIndex = queues.nextLookup,
                                    endLookupIndex,
                                    lookupIndex,
                                    processedLookupCount = 10;
                                while (processedLookupCount-- > 0) {
                                    lookupIndex = queues.nextLookup++;
                                    queues.lookup[lookupIndex].requests.forEach(function (r) {
                                        r.args._ilc = { lookupIndex: lookupIndex, valueIndex: r.valueIndex, entryKey: r.entryKey }; // "_ilc" = "import lookup context"
                                        if (r.resolve)
                                            resolveRequests.push(r.args);
                                        else
                                            lookupRequests.push(r.args);
                                    });
                                    if (lookupIndex == queues.lookup.length - 1)
                                        break;
                                }
                                endLookupIndex = queues.nextLookup - 1;
                                state.message = resourcesImport.ResolvingReferences;

                                function performResolveRequests() {
                                    // resolve lookups that have their values figures by other server requests in the same batch 
                                    resolveRequests.forEach(function (r) {
                                        var lookup = queues.lookup[r._ilc.lookupIndex],
                                            lookupCacheValue = state.lookupCache[r._ilc.entryKey][r.filter[0].value];
                                        if (lookupCacheValue.v != null)
                                            lookup.values[r._ilc.valueIndex].newValue = lookupCacheValue.v;
                                    });
                                    for (var i = startLookupIndex; i <= endLookupIndex; i++) {
                                        var lookup = queues.lookup[i];
                                        if (lookup.error)
                                            toError(lookup);
                                        else
                                            queues.submit.push(lookup);
                                    }
                                }

                                if (lookupRequests.length)
                                    _app.execute({
                                        batch: lookupRequests,
                                        done: function (result) {
                                            var state = _app.import.state,
                                                queues = state.queues;
                                            state.busy = false;
                                            result.forEach(function (r, index) {
                                                var lr = lookupRequests[index],
                                                    obj = r[lr.controller],
                                                    lookupIndex = lr._ilc.lookupIndex,
                                                    lookup = queues.lookup[lookupIndex],
                                                    lookupCacheValue = state.lookupCache[lr._ilc.entryKey][lr.filter[0].value];
                                                if (obj && obj.length)
                                                    lookupCacheValue.v = lookup.values[lr._ilc.valueIndex].newValue = obj[0][r.primaryKey[0].Name];
                                                else
                                                    lookup.error = String.format('{0}: {1} = "{2}"', resourcesMobile.DidNotMatch, r.map[lr.filter[0].field].Label, lr.filter[0].value);
                                            });
                                            performResolveRequests();
                                        },
                                        fail: fail
                                    });
                                else {
                                    state.busy = false;
                                    performResolveRequests();
                                }
                            }
                            else if (queues.test.length) {
                                state.mode = 'done';
                            }
                            // stop making server calls and keep scanning if there is more data to process
                            if (state.index < data.length)
                                state.mode = 'scan';
                            else if (!queues.submit.length && queues.nextLookup >= queues.lookup.length && !queues.test.length && !state.busy)
                                state.mode = 'done';
                        }
                    }
                    else if (state.mode == 'error') {
                        message = state.error;
                    }
                // update status and continue processing
                var nt = now(),
                    t = new Date(now() - state.started);
                state.status.html(String.format('{0:N1}% {1}<br/>{2}...<br/>{3}: {4}<br/>{5}: {6}',
                    state.count / data.length * 100, resourcesImport.Complete, state.message || resourcesImport.TestingRecords, resourcesImport.Expected,
                    t < 60000 ? resourcesMobile.Dates.InAMin : toSmartDate(new Date(nt + Math.round(t / (state.count || 1) * (data.length - state.count))), new Date(nt)),
                    resourcesImport.Remaining, data.length - state.count));
                if (state.mode == 'done') {
                    mobile.pageInfo()._canceled = true;
                    var dataView = state.dataView;
                    goBack(function () {
                        if (queues.errors.length)
                            showFile('errors_' + options.name + '.csv', queues.errors.join('\r\n'));
                        setTimeout(function () {
                            _app.alert(String.format('{0} <b>{1}</b> {2} <b>{3}</b>.', resourcesImport.Done, options.name, resourcesImport.Into, dataView.get_view().Label), function () {
                                dataViewSyncCallback(options.context.id)
                            });
                        });
                    });
                    state = null;
                }
            }
            if (state && state.mode != 'error')
                requestAnimationFrame(executeImportStep);
        }


        // dispatch the method 
        if (method == 'upload')
            upload();
        else if (method == 'supports') {
            extension = options.name.match(/\.(\w+)$/);
            return extension && !!extension[1].match(/^(csv|xlsx|xls)/i);
        }
        else if (method == 'parse') {
            mobile.busy(true);
            $('.app-glass-pane').addClass('app-glass-pane-reject')
            //$('<span>Loading...</span>').appendTo(); ^^^
            var reader = new FileReader(),
                f = options.file;
            if (getExtension(f.name) == 'csv')
                reader.readAsText(f);
            else
                reader.readAsArrayBuffer(f);
            reader.onload = function () {
                try {
                    if ($.csv)
                        parse();
                    else
                        $.getScript(__baseUrl + 'js/lib/import.min.js', parse)
                }
                catch (er) {
                    mobile.busy(false);
                    $app.alert(er.message);
                }
            }
            reader.onerror = function (er) {
                mobile.busy(false);
                $app.alert(er.message);
            }
        }
        else if (method == 'map')
            map();
    };

    function taskAssistant(dataView, content) {
        var context = [],
            page,
            tabs,
            pageInfo = getPageInfo(dataView),
            dedicatedPage = !dataView,
            taskList, cardItem,
            separateTasksFromNavigation = false,
            mode, modeIcon = 'eye';


        function createTaskList() {
            if (dedicatedPage || context.length > 0 && !dataView.get_useCase()) {
                if (dedicatedPage)
                    content.parent().addClass('app-page-tasks');
                taskList = $('<ul data-role="listview" data-inset="true" data-shadow="false" class="app-listview app-listview-static"/>').appendTo(content);
                if (dataView)
                    cardItem = createCard(dataView, taskList, dedicatedPage);
            }
        }

        function createSettingsOption() {
            if (dedicatedPage) {
                if (context.length)
                    context.push({});
                context.push({
                    text: resourcesMobile.Settings, icon: 'gear', callback: function () {
                        mobile.contextScope('_taskAssistant');
                        configureSettings();
                    }
                });
            }
        }

        if (!dataView)
            dataView = pageInfo && pageInfo.dataView;
        if (!content) {
            content = mobile.content('taskassistant');
            page = content.closest('.ui-page');
            page.find('.app-page-header').remove();
            page.addClass('app-page-tasks app-page-scrollable');
            content.find('ul[data-role="listview"]').listview('destroy').remove();
            mobile.tabs('destroy', { container: page });
            //resetInvisiblePageHeight(page);
        }
        // render context links
        if (dataView) {
            mobile.contextScope(dataView._id);
            context.isTaskAssistant = dedicatedPage;
            mobile.navContext(context, !dedicatedPage);
            mobile.contextScope(null);
            if (context.length && context[0].icon == iconBack)
                context = context.splice(1);
            createTaskList();
            if (dedicatedPage) {
                if (dataView.inserting()) {
                    mode = 'Entering';
                    modeIcon = 'material-icon-add'
                }
                else if (dataView.editing()) {
                    mode = 'Editing';
                    modeIcon = 'material-icon-edit';
                }
                else if (dataView._lookupInfo)
                    mode = 'Lookup';
            }
            //if (false/*!dedicatedPage || !mode*/)
            //    mobile.renderContext(taskList, context, function (option) {
            //        var allow = option.navigateTo == 'detail';
            //        if (allow)
            //            separateTasksFromNavigation = true;
            //        return allow;
            //    });
            if (dedicatedPage) {
                if (separateTasksFromNavigation)
                    $('<li data-role="list-divider">').appendTo(taskList);
                var resumeItem = $('<li>').appendTo(taskList).attr('data-icon', modeIcon);
                resumeLink = $('<a/>').appendTo(resumeItem).text(resourcesMobile['Resume' + (mode || (dataView.get_isForm() ? 'Viewing' : 'Browsing'))]);
                $('<p class="app-item-desc"/>').appendTo(resumeLink).text(pageInfo.text);

                createSettingsOption();

                separateTasksFromNavigation = true;
                mobile.renderContext(taskList, context, function (option) {
                    if (separateTasksFromNavigation) {
                        separateTasksFromNavigation = false;
                        $('<li data-role="list-divider"/>').appendTo(taskList);
                    }
                    return !option.navigateTo && (option.callback || option.href) && option.icon != 'dots' && (!option.command || !option.command.match(/^(Eye|SideBar)$/));
                });
            }
        }
        if (dedicatedPage && !dataView) {
            createSettingsOption();
            createTaskList();
            mobile.renderContext(taskList, context);
        }
        // bind event handlers for tasks
        if (taskList) {
            taskList.listview().on('vclick', function (event) {
                var link = $(event.target).closest('a').andSelf('a'),
                    action = link.data('context-action'),
                    stack = $mobile.navigate.history.stack;
                if (link.length)
                    callWithFeedback(link, function () {
                        if (getActivePageId() == 'taskassistant') {
                            //pageChangeCallback = function () {
                            //}
                            stack[stack.length - 1].transition = 'none';
                            //$body.one('pagecontainershow', function () {
                            //    restoreScrolling(findActivePage());
                            //    setTimeout(function () {
                            //        executeContextAction(action);
                            //    }, 100);
                            //});
                            goBack(function () {
                                //restoreScrolling(findActivePage());
                                setTimeout(function () {
                                    executeContextAction(action);
                                }, feedbackDelay);
                            });
                            //goBack();
                        }
                        else
                            executeContextAction(action);
                    });
                return false;
            });
            taskList.find('.ui-btn-icon-right').toggleClass('ui-btn-icon-right ui-btn-icon-left');
            yardstick(taskList);
        }

        // create tabs for task assistant
        if (dedicatedPage && taskList && taskList.find('li').first().length) {
            var tabs = [
                { text: resourcesMenu.Tasks, content: $('#taskassistant ul[data-role="listview"]') },
                { text: resourcesMobile.Recent, content: $() },
                { text: resourcesMobile.Favorites, content: $() }
            ];
            mobile.tabs('create', { tabs: tabs, className: 'ui-header-fixed app-tabs-tasks', id: 'tasks', scope: 'user', placeholder: content });

            //$(document).one('pagecontainershow', function () {
            //    fitTabs();
            //});
            whenPageShown(fitTabs);
            $mobile.changePage('#taskassistant', {
                changeHash: true, transition: 'none'/*settings.pageTransition == 'none' ? 'none' : 'slidedown'*/
            });
        }
        if (!dedicatedPage && cardItem && !cardItem.next().length)
            taskList.off().listview('destroy').remove();

    }

    function disposeListViews(content) {
        content.find('.app-listview a').removeData();
        content.find('ul[data-role="listview"]').listview('destroy').remove();
    }

    function dataViewSyncCallback(id) {
        var dv = $app.find(id);
        dv._requiresContextRefresh = true;
        mobile.notify({ dataView: dv, text: resourcesMobile.Refreshed });
        dv.sync();
    }

    function enumerateDataViewOptions(dataView, options) {
        var isFitted,
            viewStyle;
        if (typeof dataView == 'string')
            dataView = _app.find(dataView);

        viewStyle = dataView.extension().viewStyle();

        options.push({});

        // add 'Fit to Width' option
        if (viewStyle == 'Grid' && !dataView.tagged('grid-fit-none')) {
            isFitted = dataView.viewProp('grid-is-fitted') != false;
            options.push({
                text: resourcesMobile.FitToWidth, icon: isFitted ? 'check' : false, callback: function () {
                    var gs = dataView.gridSettings();// dataView.viewProp('gridColumns');
                    if (gs) {
                        gs.width = {};
                        dataView.gridSettings(gs);
                    }
                    dataGridIsFitted(dataView, !isFitted, true);
                    gridStyleChanged(dataView);
                    yardstick();
                    restoreGridScrolling();
                    setupGridHeaderStyle();
                    syncEmbeddedViews();
                    //invalidateEmbeddedEcho(dataView._id);
                }
            });
        }
        if (viewStyle.match(/Grid|List|Cards/) && !dataView.tagged('multi-select-none') && (!dataView._lookupInfo || dataView._lookupInfo.multiSelect))
            options.push({
                text: resourcesMobile.MultiSelection, icon: dataView.multiSelect() ? 'check' : false, callback: function () {
                    dataView.multiSelect(!dataView.multiSelect());
                    gridStyleChanged(dataView);
                    dataView.sync();
                }
            });
        options.push({ text: resourcesPager.Refresh, icon: 'refresh', context: dataView._id, callback: dataViewSyncCallback });

    }

    $(document).on('vclick', '.app-bar-actions h3, .app-echo-toolbar h3', function (e) {
        var echo = $(this).closest('.app-echo'),
            dataViewId = echo.length ? echo.attr('data-for') : getPageInfo().id,
            link = $(e.target).closest('h3'),
            linkOffset = link.offset(),
            options = [],
            oldScope = mobile.contextScope(),
            isMainPage,
            viewSelectorEvent;
        link.addClass('app-selected');
        //callWithFeedback(link, function () {
        isMainPage = isMainPageActive();
        mobile.contextScope(dataViewId);
        enumerateViewOptions(options, false, true/* isMainPage || !isMainPage && container.is('.app-echo-toolbar') || !$('#app-sidebar:visible').length*/);
        //if (options.length && options[options.length - 1].text)
        //    options.push({});
        //enumerateDataViewOptions(dataView, options);
        viewSelectorEvent = $.Event('viewselector.dataview.app');
        viewSelectorEvent.items = options;
        viewSelectorEvent.dataView = _app.find(dataViewId);
        $(document).trigger(viewSelectorEvent);

        mobile.contextScope(oldScope);

        showListPopup({ anchor: link, items: options, iconPos: 'left', dropDown: !isTouchPointer, y: linkOffset.top + link.outerHeight(), y2: linkOffset.top });
        //});
        return false;
    }).on('vclick', '.app-bar-actions .ui-btn, .app-echo-toolbar .ui-btn', function (e, feedback) {
        var echo = $(this).closest('.app-echo'),
            dataViewId = echo.length ? echo.attr('data-for') : getPageInfo().id,
            link = $(e.target).closest('a'),
            linkOffset = link.offset(),
            option = link.data('data-context');

        function buttonClicked() {
            var group = option.context && option.context.group,
                context = [],
                dataView;
            if (group) {
                dataView = getPageInfo(dataViewId).dataView;
                enumerateActions(group.Id, dataView, context, dataView.extension().commandRow());
                showListPopup({
                    items: context, iconPos: 'left', defaultIcon: 'carat-r', scope: dataView._id,
                    anchor: link,
                    y: linkOffset.top + link.outerHeight(true) / 4 * 3, y2: linkOffset.top,
                    dropDown: !isTouchPointer
                });
            }
            else
                option.callback(option.context);
        }
        if (option) {
            if (link.length && !mobile.busy())
                if (feedback != false)
                    callWithFeedback(link, buttonClicked);
                else
                    buttonClicked();
            return false;
        }
    });

    function clearSelectionInEcho(echo) {
        echo.find('.app-echo-inner .app-selected').removeClass('app-selected');
    }


    function createEcho(id, container) {
        var echo = $('<div class="app-echo"></div>').appendTo(container).attr({ 'id': id + '_echo', 'data-for': id }),
            echoHeader,
            inner,
            skipClick,
            dataView = _app.find(id),
            toolbar,
            pageInfo = getPageInfo(id);
        pageInfo.echoChanged = true;
        toolbar = $(
            '<div class="app-echo-toolbar">' +
            '<h3></h3>' +
            '<a class="ui-btn ui-btn-inline ui-corner-all ui-icon-dots ui-btn-icon-notext app-btn-more"/>' +
            '<div class="app-echo-controls"></div>' +
            '<span class="app-echo-see-all"/>' +
            //'<span></span>' +
            //'<a class="ui-btn ui-btn-inline ui-corner-all ui-icon-carat-r ui-btn-icon-notext"/>' +
            //'</span>' +
            '</div>').appendTo(echo)/*.on('vclick', 'a', function (event) {
                var link = $(event.target);
                if (clickable(link) && !mobile.busy())
                    callWithFeedback(link, function () {
                        if (link.is('.ui-icon-carat-r'))
                            mobile.changePage(id);
                        else if (link.is('.ui-icon-dots')) {
                            //var options = [];
                            //mobile.contextScope(id);
                            //mobile.navContext(options);
                            //showListPopup({ anchor: link, items: options, scope: id });
                            mobile.showContextMenu({
                                scope: id
                            });
                        }
                    });
                return false;
            })*/;
        echoHeader = toolbar.find('h3');
        if (!dataView.get_showViewSelector())
            echoHeader.addClass('app-hidden');
        toolbar.find('.ui-icon-dots').attr('title', labelMore).css('visibility', 'hidden');
        toolbar.find('.ui-icon-carat-r').attr('title', resourcesMobile.SeeAll).toggleClass('ui-icon-recycle'/*'ui-icon-refresh app-animation-spin'*/).prev().hide();
        materialIcon('material-icon-chevron-right', toolbar.find('.app-echo-see-all').html(resourcesMobile.SeeAll));
        toolbar.find('.app-echo-controls');
        if (!dataView.get_showActionBar())
            toolbar.hide();
        $('<div class="app-echo-instruction"></div>').appendTo(echo).hide();

        function handleSeeAllClick(event) {
            var target = $(event.target),
                link = target.closest('a'),
                seeAllButton = link.find('.app-btn-next'),
                appInfo = link.find('.app-info'),
                echoId = id + '_echo',
                x = lastTouchX(event.pageX);

            function createPagingOptions(action) {
                var startIndex = parseInt(appInfo.attr('data-start-index')),
                    endIndex = parseInt(appInfo.attr('data-end-index')),
                    rowIndex = action == 'next' ? endIndex + 1 : startIndex - 1,
                    pageIndex = 0;
                if (rowIndex < 0)
                    rowIndex = 0;
                pageIndex = Math.floor(rowIndex / dataView.extension().pageSize());
                return { action: action, rowIndex: rowIndex, pageIndex: pageIndex, ensurePageIndex: Math.max(action == 'next' ? pageIndex + 1 : pageIndex - 1, 0), pageY: link.offset().top };
            }

            if (seeAllButton.length && x >= seeAllButton.offset().left && x < seeAllButton.offset().left + seeAllButton.outerWidth() + 4)
                target = seeAllButton;
            else {
                seeAllButton = link.find('.app-btn-prev');
                if (seeAllButton.length && x >= seeAllButton.offset().left && x < seeAllButton.offset().left + seeAllButton.outerWidth())
                    target = seeAllButton;
                else {
                    link.find('.app-btn-see-all').addClass('ui-btn-active');
                    target = link;
                }
            }
            if (!target.is('.app-btn-disabled')) {
                link.removeClass('ui-btn-active');
                callWithFeedback(target, function () {
                    target.removeClass('ui-btn-active');
                    setTimeout(function () {
                        if (target.is('.app-btn-next'))
                            refreshEcho(echoId, createPagingOptions('next'));
                        else if (target.is('.app-btn-prev'))
                            refreshEcho(echoId, createPagingOptions('prev'));
                        else {
                            useFullscreenWhenSeeAll = true;
                            mobile.changePage(id);
                        }
                    }, 25);
                });
            }
        }

        inner = $('<div class="app-echo-inner"></div>').appendTo(echo).on('vclick taphold', function (event) {
            var target = $(event.target),
                link = target.closest('a'),
                seeAllButton,
                activePageId,
                pageInfo,
                dataView, extension,
                multiSelect,
                dataContext,
                eventType = event.type,
                isClick = eventType != 'taphold' && !event.ctrlKey,
                isSeeAll = link.is('.dv-action-see-all'),
                isSelected, clickHandler;
            if (target.closest('.app-presenter').length && !isSeeAll)
                return;
            if (skipClick) {
                skipClick = false;
                return;
            }
            if (link.length && !link.is('.app-divider') && clickable(target, eventType) && (!isSeeAll || isClick) && !mobile.busy()) {
                if (isSeeAll)
                    handleSeeAllClick(event);
                else {
                    if (target.is('[data-href]'))
                        return;
                    mobile.contextScope(id);
                    pageInfo = getPageInfo(id);
                    dataView = pageInfo.dataView;
                    extension = dataView.extension();
                    dataContext = link.data('data-context');
                    isSelected = link.is('.app-selected');
                    if (dataView._hasKey()) {
                        if (isActionColumnClick(event, dataView))
                            return false;
                        multiSelect = dataView.get_showMultipleSelection()
                        if (isClick && multiSelect && isMultiSelectCheckBoxClick(event))
                            toggleRowSelection(dataView, link);
                        else {
                            clearSelectionInEcho(echo);
                            if (isClick)
                                link.addClass('app-selected');
                            else
                                if (isSelected)
                                    link.removeClass('app-selected');
                                else
                                    link.addClass('app-selected');
                            dataViewUILinks(dataView).removeClass('app-selected');
                            if (isClick) {
                                if (multiSelect)
                                    link.find('.app-btn-check').addClass('app-btn-check-selected');
                                extension.tap(dataContext, 'none');
                                checkIfMultiSelect(dataView, link);
                                if (isMoreButtonClick(event))
                                    showRowContext(findMoreButton(target));
                                else
                                    extension.tap(dataContext);
                            }
                            else {
                                if (isSelected)
                                    extension.clearSelection();
                                else
                                    extension.tap(dataContext, 'none');
                                if (eventType == 'taphold')
                                    skipClick = true; // tap hold will generate a double click
                            }
                            callWithFeedback(target);
                        }
                        refreshEchoToolbarWithDelay(dataView, echo);
                    }
                    else
                        mobile.infoView(dataView, true, dataContext.row);
                    mobile.contextScope(null);
                }
            }
            if (!target.closest('.app-grid-header').length)
                return false;
        }).on('contextmenu', function (event) {
            return handleFieldContextMenu(getPageInfo(id).dataView, event);
        });
        $('<div class="app-echo-footer"></div>').appendTo(echo).on('vclick', function () {
            var target = $(event.target),
                link = target.closest('a');
            if (link.length && link.is('.dv-action-see-all'))
                handleSeeAllClick(event);
            return false;
        });
        $('<div class="app-echo-empty"></div>').appendTo(inner).text(loadingStatusText);
        adjustEchoDensity(echo);
        toolbar.find('h3').text(getPageInfo(id).text);
        if (!isTouchPointer)
            echo.find('.app-echo-inner').attr('tabindex', 0);
        if (dataView._hidden)
            echo.hide();
        return echo;
    }


    function fetchEchos(force, fetchTimeout, selector) {
        var echo, pageId, pageInfo, echoRefreshTimeout = 0;
        if (force)
            findActivePage('.app-echo-toolbar').each(function () {
                echo = $(this).parent();
                pageId = echo.attr('data-for');
                pageInfo = getPageInfo(pageId);
                if (pageInfo.echoId && !pageInfo.dataView._busy())
                    refreshEcho(pageInfo.echoId);
            });
        else
            if (skipTap || isInTransition || touchScrolling || notifyBar && notifyBar.data('busy')) {
                clearTimeout(fetchEchosTimeout);
                fetchEchosTimeout = setTimeout(function () {
                    fetchEchos(force, fetchTimeout);
                }, 50);
            }
            else {
                mobile.callWhenVisible(selector || '.app-echo', function (echo) {
                    setTimeout(function () {
                        pageId = echo.attr('data-for');
                        pageInfo = getPageInfo(pageId);
                        if (pageInfo && pageInfo.dataView && !pageInfo.dataView._busy() && !pageInfo.dataView.get_isForm())
                            if (!pageInfo.echoInitialized) {
                                pageInfo.echoId = echo.attr('id');
                                if (mobile.pageInit(pageInfo.id, false))
                                    refreshEcho(pageInfo.id + '_echo');
                            }
                            else if (pageInfo.echoChanged)
                                refreshEcho(pageInfo.echoId);
                    }, fetchTimeout == null ? echoRefreshTimeout : fetchTimeout);
                    echoRefreshTimeout += 50;
                });
                findActivePage('.app-echo-controls.app-stale').each(function () {
                    var echo = findEcho($(this).removeClass('app-stale')),
                        id = echo.attr('id'),
                        pageInfo = getPageInfo(id.substring(0, id.length - 5));
                    refreshEchoToolbar(pageInfo.dataView, echo);
                });
            }
    }

    function adjustEchoDensity(echo) {
        //var displayDensity = $settings('ui.displayDensity.value');
        //if (displayDensity != 'Condensed' && displayDensity != 'Tiny') {
        //    if (displayDensity == 'Comfortable' && Math.min(_screen.width, _screen.height) <= 414)
        //        echo.addClass('app-density-compact');
        //    else if (displayDensity == 'Compact' && Math.min(_screen.width, _screen.height) <= 320)
        //        echo.addClass('app-density-condensed');
        //}
    }

    function updateViewTitle(container, dataView, pageInfo) {
        var title = container.find('h3').empty().text(dataView.get_view().Label || pageInfo.text),
            totalRowCount = dataView._totalRowCount;
        if (container.length && totalRowCount > 0) {
            $('<span> (</span>').appendTo(title);
            $('<span class="app-echo-count"></span>').appendTo(title).text(totalRowCount);
            $('<span>)</span>').appendTo(title);
            if (!isTouchPointer)
                title.attr('title', title.text());
        }
        return title;
    }

    function gridScrollingFrozenStyle(dataView) {
        var styleName = classNameOfFirstScrollableColumnInGrid(dataView),
            frozenStyle = dataView.session(styleName);
        if (!frozenStyle) {
            frozenStyle = createStyle();
            frozenStyle.text('.' + styleName + 'frozen_{display:none!important}');
            dataView.session(styleName, frozenStyle);
        }
        return frozenStyle;
    }

    function dataGridIsFitted(dataView, value, persist) {
        if (arguments.length >= 2) {
            dataView.session('grid-is-fitted', value);
            if (persist)
                dataView.viewProp('grid-is-fitted', value ? null : false);
        }
        else {
            var gridIsFitted = dataView.session('grid-is-fitted'),
                w;
            if (gridIsFitted != null && dataView.session('window-width') != _screen.width)
                gridIsFitted = null;
            if (gridIsFitted == null) {
                gridIsFitted = dataView.viewProp('grid-is-fitted');
                if (gridIsFitted == null)
                    gridIsFitted = !dataView.tagged('grid-fit-none');
                dataView.session('grid-is-fitted', gridIsFitted)
            }
            return gridIsFitted;
        }
    }

    function setupGridScrollbarSize(dataView, scrollbar) {
        var availWidth = dataView.session('grid-avail-width'),
            scrollbarParent,
            gridIsFitted = dataGridIsFitted(dataView); // dataView.viewProp('grid-is-fitted');
        if (availWidth != null) {
            //scrollbar.find('.app-hscrollbar-inner').width( gridIsFitted ? 1 : (availWidth/* + scrollbarInfo.gridColumnPadding*/));
            scrollbar.find('.app-hscrollbar-inner').width(availWidth);
            if (scrollbarInfo.height && findEcho(scrollbar).length) {
                scrollbarParent = scrollbar.parent();
                if (scrollbarParent.parent().width() >= availWidth)
                    scrollbarParent.hide();
                else
                    scrollbarParent.show();
            }
        }
    }

    function setupGridScrollbar(dataView, container) {
        var availWidth = dataView.session('grid-avail-width'),
            scrollbar = container.find('.app-hscrollbar');
        if (!findEcho(container).length)
            scrollbar.css('margin-right', scrollbarInfo.width);
        setupGridScrollbarSize(dataView, scrollbar);
        restoreGridScrolling(container);
    }

    function setupGridHeaderStyle(container) {
        var reset;
        if (!container) {
            container = findActivePage();
            reset = true;
        }
        container.find('.app-grid-header').each(function () {
            var gridHeader = $(this),
                gridHeaderHeight = gridHeader.height(),
                firstField = gridHeader.find('[data-field-name]').first(),
                dataViewId,
                dataView,
                headerStyle, headerStyleText;
            if (gridHeaderHeight && firstField.length) {
                dataViewId = gridHeader.attr('data-for'),
                    dataView = _app.find(dataViewId),
                    headerStyle = dataView.session('grid-header-style');
                if (!headerStyle) {
                    headerStyle = createStyle();
                    dataView.session('grid-header-style', headerStyle);
                }
                if (reset || dataView.session('reset-grid-header')) {
                    headerStyle.text('').data('text', '');
                    dataView.session('reset-grid-header', null);
                }
                headerStyleText = '.app-grid-header-cv-' + dataView._id + '-' + dataView._viewId + ' > span {height:' + (gridHeader.height() - parseFloat(firstField.css('padding-top')) * 2) + 'px}';
                if (headerStyle.data('text') != headerStyleText)
                    headerStyle.data('text', headerStyleText).text(headerStyleText);
            }
        });
    }

    function gridScrollStyle(dataView, scrollLeft, animate, smooth) {
        var scrollStyle = dataView.session('scroll-style'),
            scrollClassName = classNameOfFirstScrollableColumnInGrid(dataView),
            time = +new Date(),
            smoothingTime = 32 * 12;

        function doFrozenSpacerRefresh() {
            refreshFrozenSpacerInGrid(dataView, scrollLeft)
        }


        function changeStyle() {
            dragMan.scrollingAnimationFrame = null;

            if (animate)
                scrollLeft = -1 * dataView.session('scroll-left');

            var
                lastScrollLeftVarName = scrollClassName + '-last-scroll-left',
                lastScrollLeft = dataView.session(lastScrollLeftVarName),
                margin = dataView.session('scroll-left-margin') || 0,
                delta = Math.abs(Math.abs(scrollLeft) - Math.abs(lastScrollLeft));
            if (!animate || lastScrollLeft == null || delta != 0) {
                if (smooth && (scrollLeft < (lastScrollLeft || 0)))
                    doFrozenSpacerRefresh();
                scrollStyle.html('.' + scrollClassName + '{margin-left:' + (scrollLeft ? (scrollLeft + margin + 'px!important') : 'inherit') + ';transition:margin-left ' + (smooth ? smoothingTime + 'ms ease-out' : ('0 linear')) + '}');
                dataView.session(lastScrollLeftVarName, scrollLeft);
                if (smooth)
                    setTimeout(function () {
                        doFrozenSpacerRefresh();
                        gridScrollStyle(dataView, scrollLeft);
                    }, smoothingTime + 64);
                else
                    doFrozenSpacerRefresh();
            }
            if (animate)
                dragMan.scrollingAnimationFrame = requestAnimationFrame(changeStyle);
        }


        if (!scrollStyle) {
            scrollStyle = createStyle();
            dataView.session('scroll-style', scrollStyle);
        }
        if (arguments.length >= 2)
            if (animate) {
                if (dragMan.scrollingAnimationFrame) return;
                //if (dragMan.scrollingAnimationFrame)
                //    cancelAnimationFrame(dragMan.scrollingAnimationFrame);
                dragMan.scrollingAnimationFrame = requestAnimationFrame(changeStyle);
            }
            else
                changeStyle();
        return scrollStyle;
    }
    function handleGridScrolling() {
        var hscrollbar = $(this);
        if (hscrollbar.data('ignore-scrolling'))
            return;
        var
            dataView = _app.find(hscrollbar.attr('data-view')),
            scrollLeft = -hscrollbar.scrollLeft()/* + scrollbarInfo.width*/;
        gridScrollStyle(dataView, scrollLeft);
        scrollLeft = hscrollbar.scrollLeft();
        dataView.session('scroll-left', scrollLeft);
        refreshFrozenSpacerInGrid(dataView, scrollLeft);
    }

    function refreshFrozenSpacerInGrid(dataView, scrollLeft) {
        var frozenStyle = gridScrollingFrozenStyle(dataView),
            display = scrollLeft ? 'inline-block' : 'none',
            gridFrozenWidth = dataView.session('grid-frozen-width') || 0;
        if (frozenStyle && (frozenStyle.data('display') != display || frozenStyle.data('width') != gridFrozenWidth)) {
            frozenStyle.html('.' + classNameOfFirstScrollableColumnInGrid(dataView) + 'frozen_{display:' + display + '!important;width:' + gridFrozenWidth + 'px}');
            frozenStyle.data('display', display).data('width', gridFrozenWidth);
            return true;
        }
    }

    function resetGridScrolling(dataView) {
        dataView.session('scroll-left', 0);
        var scrollStyle = dataView.session('scroll-style');
        if (scrollStyle) {
            scrollStyle.remove();
            dataView.session('scroll-style', null);
        }
    }

    function restoreGridScrolling(container, resetScrollStyle) {
        if (!container)
            container = findActivePage();
        container.find('.app-hscrollbar').each(function () {
            var hscrollbar = $(this),
                dataView = _app.find(hscrollbar.attr('data-view')),
                scrollLeft = dataView ? dataView.session('scroll-left') : null,
                grid = hscrollbar.closest('.app-grid');
            gridScrollingFrozenStyle(dataView); // ensure the frozen spacer style
            if (!grid.length)
                grid = findActivePage('.app-grid');
            if (dataView.session('grid-avail-width') < grid.width() || resetScrollStyle) {
                scrollLeft = 0;
                dataView.session('scroll-left', scrollLeft);
            }
            setupGridScrollbarSize(dataView, hscrollbar);
            if (scrollLeft != null) {
                hscrollbar.data('ignore-scrolling', scrollLeft > 0).scrollLeft(scrollLeft);
                if (resetScrollStyle)
                    gridScrollStyle(dataView, scrollLeft, false);
                else
                    refreshFrozenSpacerInGrid(dataView, scrollLeft);
                setTimeout(function () {
                    hscrollbar.removeData('ignore-scrolling');
                }, 100);
            }
        });
    }

    function createListOfAggregates(dataView, container, aggregates) {
        var extension = dataView.extension(),
            aggregateLabels = extension.aggregateLabels(),
            aggregateContainer = $('<div class="app-bar-aggregate-list"></div>').appendTo(container);
        $(dataView._fields).each(function (index) {
            var originalField = this,
                field = dataView._allFields[originalField.AliasIndex],
                l = aggregateLabels[index],
                v, a, av;
            if (l) {
                v = aggregates[originalField.Index];
                v = String.localeFormat(originalField.DataFormatString || '{0:n0}', v);
                a = $('<a class="ui-btn ui-inline app-calculated app-btn-static"/>').appendTo(aggregateContainer);
                $('<span class="app-calculated-label"/>').text(field.HeaderText).appendTo(a);
                av = $('<span class="app-calculated-value"/>').text(v).appendTo(a);
                $('<div class="app-static-text"></div>').text(l).insertBefore(av.contents());
                a.attr({ 'title': field.HeaderText + '\n' + l + ' ' + v, 'data-tooltip-location': 'above' });
            }
        });
    }

    function checkStartCommand(dataView, immediately) {
        if (!dataView._checkedStartCommand) {
            dataView._checkedStartCommand = true;
            var lastCommandName = dataView.get_lastCommandName(),
                lastCommandArgument = dataView.get_lastCommandArgument();

            function doCheck() {
                var startContext = [];
                mobile.navContext(startContext);
                $(startContext).each(function () {
                    var item = this;
                    if (item.command == lastCommandName && (!lastCommandArgument || lastCommandArgument == item.argument)) {
                        item.callback(item.context);
                        return false;
                    }
                });
            }

            if (lastCommandName)
                if (immediately)
                    doCheck();
                else
                    whenPageShown(doCheck);
        }
    }

    function refreshEcho(id, options) {
        if (touchScrolling)
            return;
        var echo = $('#' + id),
            isEmbedded;
        if (!echo.length)
            return;
        isEmbedded = echo.is('.app-echo-embedded');
        echo.removeClass('app-density-condensed app-density-compact');
        var scrollable = findScrollable(echo),// echo.parent(),
            scrollTop = scrollable.scrollTop(),
            echoHeight = echo.outerHeight(),
            inner = echo.find('.app-echo-inner').show(),
            footer = inner.next().hide(),
            pageId = echo.attr('data-for'),
            pageInfo = getPageInfo(pageId),
            dataView = pageInfo.dataView,
            styleExpressions = enumerateConditionalStyleExpressions(dataView),
            totalRowCount = dataView._totalRowCount,
            extension = dataView.extension(),
            pageIndex = options ? options.pageIndex : (extension.currentPageIndex() || 0),
            pageSize = extension.pageSize(),
            firstRowIndex = pageIndex * pageSize,
            lastRowIndex,
            newFirstRowIndex,
            rows = extension.visibleDataRows(pageIndex),
            extraRows,
            list, item, link,
            itemHeight, maxVisibleColumns,
            showRowNumber = dataView.get_showRowNumber() == true,
            toolbar = $(echo).find('.app-echo-toolbar'),
            controls = toolbar.find('.app-echo-controls'),
            seeAlso = toolbar.find('.app-echo-see-all'),
            //seeAlsoButton = seeAlso.find('.ui-btn'),
            title,
            instructionElem = inner.prev(),
            instruction = extension.instruction(false),
            viewStyle = extension.viewStyle(),
            map = extension.itemMap(viewStyle == 'List'),
            screenHeight = $mobile.getScreenHeight(),
            maxHeight = scrollable.height() * .55, //.618,
            lastScroll,
            selectedRowIndex,
            maxRowCount,
            itemsPerList, itemsPerListMiddle,
            seeAllLink,
            stub,
            selectedHorizontalOffset,
            selectedRow,
            hasSelection = dataView.get_selectedKey().length > 0,
            autoSelect,
            overflowIsHidden, textInput,
            aggregates = extension.aggregates(),
            presenters, skipStandardViewStyles;

        if (!dataView._checkedAutoSelect) {
            dataView._checkedAutoSelect = true;
            if (extension._autoSelect) {
                autoSelect = extension._autoSelect;
                extension._autoSelect = null;
                if (autoSelect && !mobile.busy()) {
                    pageInfo.echoChanged = true;
                    mobile.contextScope(dataView._id);
                    extension.tap(autoSelect.row, autoSelect.action);
                    dataView._selectedKeyList = [dataView._createRowKey(autoSelect.row)];
                    mobile.contextScope(null);
                    hasSelection = true;
                }
            }
        }
        checkStartCommand(dataView, true);


        if (!echo.is(':visible')) {
            pageInfo.echoChanged = true;
            return;
        }
        pageInfo.echoChanged = false;


        function createAggregates() {
            if (aggregates) {
                createListOfAggregates(dataView, footer.show().empty(), aggregates);
                if (findActivePage('.app-echo:visible').length == 1 && echo.prev().is('.app-page-header,.app-tabs'))
                    maxHeight -= footer.outerHeight();
            }
        }

        function identifySelectedRow() {
            // identify the selected row 
            $(rows).each(function (index) {
                var row = this;
                if (dataView.rowIsSelected(row)) {
                    selectedRowIndex = index;
                    if (!extension.commandRow()) {
                        //extension.clearSelection();
                        extension.tap(row, 'none');
                        extension.currentPageIndex(pageIndex);
                    }
                    return false;
                }
            });
            maxRowCount = rows.length;
        }

        function scrollToSelectedRow() {
            var firstPageRowIndex,
                latPageRowIndex;
            if (options) {
                selectedRowIndex = null;
                // page to the row specified in options
                if (options.action == 'prev') {
                    firstRowIndex = options.rowIndex - itemsPerList + 1;
                    if (firstRowIndex < 0)
                        firstRowIndex = 0;
                    lastPageRowIndex = options.rowIndex % pageSize;
                    firstPageRowIndex = lastPageRowIndex - itemsPerList + 1;
                    if (firstPageRowIndex > 0)
                        rows = rows.slice(firstPageRowIndex, lastPageRowIndex + 1);
                    else {
                        rows = rows.slice(0, lastPageRowIndex + 1);
                        if (options.pageIndex) {
                            extraRows = extension.visibleDataRows(options.pageIndex - 1);
                            if (extraRows)
                                rows = extraRows.slice(extraRows.length + firstPageRowIndex).concat(rows);
                        }
                    }
                }
                else {
                    firstRowIndex = options.rowIndex;
                    firstPageRowIndex = options.rowIndex % pageSize;
                    rows = rows.slice(firstPageRowIndex, firstPageRowIndex + itemsPerList + 1);
                    if (rows.length < itemsPerList) {
                        extraRows = extension.visibleDataRows(options.pageIndex + 1);
                        if (extraRows)
                            rows = rows.concat(extraRows);
                    }
                }
                identifySelectedRow();
                //maxCount = pageSize;
            }
            else if (selectedRowIndex != null && itemsPerList < totalRowCount) {
                // make the selected row displayed in the middle
                itemsPerListMiddle = Math.floor(itemsPerList / 2);
                newFirstRowIndex = firstRowIndex + selectedRowIndex - itemsPerListMiddle + 1;
                if (totalRowCount - (firstRowIndex + selectedRowIndex) < itemsPerListMiddle)
                    newFirstRowIndex -= itemsPerListMiddle - (totalRowCount - (firstRowIndex + selectedRowIndex));
                if (newFirstRowIndex < 0)
                    newFirstRowIndex = 0;
                if (newFirstRowIndex != firstRowIndex)
                    if (newFirstRowIndex > firstRowIndex) {
                        rows = rows.slice(0);
                        rows.splice(0, newFirstRowIndex - firstRowIndex);
                        selectedRowIndex -= newFirstRowIndex - firstRowIndex;
                        firstRowIndex = newFirstRowIndex;
                        if (rows.length < itemsPerList && pageIndex < extension.pageCount() - 1) {
                            extraRows = extension.visibleDataRows(pageIndex + 1);
                            if (extraRows)
                                rows = rows.concat(extraRows);
                        }
                    }
                    else if (pageIndex > 0) {
                        extraRows = extension.visibleDataRows(pageIndex - 1);
                        if (extraRows) {
                            extraRows = extraRows.slice(0);
                            extraRows.splice(0, pageSize - (firstRowIndex - newFirstRowIndex));
                            selectedRowIndex += extraRows.length;
                            firstRowIndex = newFirstRowIndex;
                            rows = extraRows.concat(rows);
                        }
                    }
                maxRowCount = pageSize;
            }
        }

        function seeAllStats(seeAll, startIndex, endIndex) {
            seeAll.empty().removeClass('ui-btn-icon-left');
            //$('<span class="app-btn-see-all"/>').appendTo(seeAll).text(resourcesMobile.SeeAll).attr('title', resourcesMobile.SeeAll);
            var button = $('<span class="app-btn-prev"/>').appendTo(seeAll).text(resourcesMobile.Prev).attr('title', resourcesPager.Previous);
            if (!startIndex)
                button.addClass('app-btn-disabled');
            button = $('<span class="app-btn-next"/>').appendTo(seeAll).text(resourcesMobile.Next).attr('title', resourcesPager.Next);
            if (endIndex == totalRowCount - 1)
                button.addClass('app-btn-disabled');
            $('<span class="app-info"/>').appendTo(seeAll).attr({ 'data-start-index': startIndex, 'data-end-index': endIndex }).html(String.format(resourcesPager.ShowingItems, startIndex + 1, endIndex + 1, totalRowCount));
            return seeAll;
        }

        function affixSeeAll(seeAllLink) {
            if (options) {
                var pageY = seeAllLink.offset().top,
                    stubHeight = Math.ceil(options.pageY) - Math.ceil(pageY),
                    prevLink;
                if (stubHeight > 0 && stubHeight + seeAllLink.outerHeight(true) < scrollable.height()) {
                    prevLink = seeAllLink.parent().prev('li').first().find('a');
                    if (prevLink.length)
                        $('<div class="app-listview-stub"></div>').height(stubHeight).appendTo(prevLink);
                }
            }
        }

        adjustEchoDensity(echo);

        if (!rows || options && pageSize * options.ensurePageIndex < totalRowCount && !extension.visibleDataRows(options.ensurePageIndex)) {
            dataView.goToPage(options && options.pageIndex || 0, true);
            extension.echoCallback = function () {
                extension.echoCallback = null;
                refreshEcho(id, options);
            }
            return;
        }

        title = updateViewTitle(toolbar, dataView, pageInfo);

        if (!pageInfo.echoInitialized) {
            pageInfo.echoInitialized = true;
            pageInfo.refreshed = false;
        }

        if (!isEmbedded) {
            echo.css('padding-bottom', '');
            stub = scrollable.find('.app-stub,.app-stub-main');
            if (!stub.length)
                stub = $('<div></div>').appendTo(scrollable).addClass('app-stub' + (isMainPageActive() ? '-main' : ''));
            stub.height(stub.outerHeight() + inner.outerHeight(true));
        }

        if (instruction && (rows.length || instruction.match(/"app-filter"/)))
            instructionElem.html(instruction).show();
        else
            instructionElem.hide();

        // clear previous content
        lastScroll = inner.scrollLeft();
        inner.find('.app-hscrollbar').off();
        disposeListViews(inner);
        presenters = inner.find('div[data-role="presenter"]').detach();
        inner.empty();
        presenters.appendTo(inner);
        mobile.presenter('hide', { container: inner });

        // render data cards / rows
        if (!rows.length && !(dataView.get_searchOnStart() && viewStyle == 'Grid'))
            $('<div class="app-echo-empty"></div>').appendTo(inner.height('')).text(resourcesData.NoRecords);
        else {
            inner.removeClass('app-no-scrolling app-horizontal-scrolling');
            if (!dataView._filterSource && scrollable.find('.app-echo').filter(visibleFilterFunc).length == 1) {
                maxHeight = screenHeight - inner.offset().top;
                if (!isTouchPointer) {
                    maxHeight -= parseCss(echo, 'padding-top') + parseCss(echo, 'padding-bottom');
                    if (viewStyle && viewStyle.match(/List|Grid|Cards/)) {
                        scrollable.css('overflow', ''/*'hidden'*/);
                        overflowIsHidden = true;
                    }
                    else
                        scrollable.css('overflow', '');
                }
            }
            else
                if (!isTouchPointer)
                    scrollable.css('overflow', '');
            addSpecialClasses(dataView, inner);
            if (mobile.presenter('supports', viewStyle)) {
                var supportedStyles = [],
                    viewStyleIsSupported = false;
                mobile.presenter('enumerate', { id: dataView._id, list: supportedStyles });
                $(supportedStyles).each(function () {
                    if (this.name == viewStyle) {
                        viewStyleIsSupported = true;
                        return false;
                    }
                });
                // render echo as "presenter-style"
                inner.addClass('app-no-scrolling').height('');
                //createAggregates();
                if (viewStyleIsSupported && mobile.presenter('show', { name: viewStyle, id: dataView._id, container: inner, maxHeight: Math.ceil(maxHeight) }))
                    skipStandardViewStyles = true;
                else
                    viewStyle = gridViewIsPreferred() ? 'Grid' : 'List';
            }
            if (!skipStandardViewStyles) {
                if (!options)
                    identifySelectedRow();
                // perform standard rending of data rows in echo
                var pageFooter = findFooterOnActivePage();
                maxHeight += pageFooter.is(':visible') ? -(pageFooter.outerHeight()) : 0;

                if (viewStyle == 'Grid') {
                    // render echo as "grid"
                    inner.addClass('app-no-scrolling').height('');
                    disposeListViews(inner);

                    list = $('<ul class="app-listview app-grid" data-role="listview"/>').addClass(dataViewToClassNames(dataView)).appendTo(inner);
                    item = $('<li data-role="list-divider" class="app-list-instruction"/>').appendTo(list);
                    createGridHeader(dataView, item);

                    // create sample row to determine the number of items per list
                    item = $('<li data-icon="false" class="dv-item"/>').appendTo(list);
                    if (rows.length)
                        createRowMarkup(dataView, rows[0], null, $('<a/>').appendTo(item));
                    list.listview().listview('refresh');
                    itemHeight = item.outerHeight();
                    yardstick(list);
                    setupGridHeaderStyle(list);
                    maxHeight -= item.prev().outerHeight() + 1;
                    itemsPerList = Math.ceil(maxHeight / (itemHeight + 1));
                    if (aggregates)
                        itemsPerList -= 2;
                    item.remove();
                    if (itemsPerList < 4)
                        itemsPerList = 4;

                    scrollToSelectedRow();

                    var beforeList = [], afterList = [], physicalHeight = 0, listItem, removeDir;

                    // render grid rows
                    $(rows).each(function (index) {
                        var row = this,
                            rowNumber = firstRowIndex + index + 1,
                            item = $('<li data-icon="false" class="dv-item"/>').appendTo(list),
                            link = $('<a class="ui-btn"/>').appendTo(item).data('data-context', { row: this.slice(0), pageIndex: 0 });
                        createRowMarkup(dataView, row, showRowNumber ? rowNumber : null, link);
                        if (index == selectedRowIndex) {
                            selectedRow = row;
                            link.addClass('app-selected');
                        }
                        evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
                        lastRowIndex = firstRowIndex + index;
                        if (!selectedRowIndex || index < selectedRowIndex)
                            beforeList.push(item)
                        else
                            afterList.push(item);
                        if (itemsPerList < maxRowCount && itemsPerList - 1 == index)
                            return false;
                    });
                    if (aggregates) {
                        item = $('<li data-icon="false" class="dv-item"/>').appendTo(list);
                        link = $('<a class="app-divider app-calculated"/>').appendTo(item);
                        createRowMarkup(dataView, aggregates, null, link, extension.aggregateLabels());
                    }

                    function createSeeAll() {
                        seeAllLink = $('<a class="dv-action-see-all"/>').appendTo($('<li/>').appendTo(list)).html('text');
                    }

                    // create a horizontal scrollbar
                    var hscrollBar = $('<li class="app-echo-grid-hscrollbar"><div class="app-hscrollbar"><div class="app-hscrollbar-inner"></div></div></li>').height(scrollbarInfo.height),
                        hscrollBarInner = hscrollBar.find('.app-hscrollbar').attr('data-view', dataView._id);
                    gridScrollingFrozenStyle(dataView);
                    hscrollBar.appendTo(list);
                    if (scrollbarInfo.height) {
                        hscrollBarInner.on('scroll', handleGridScrolling);
                        setupGridScrollbarSize(dataView, hscrollBarInner);
                        requestAnimationFrame(function () {
                            setupGridScrollbar(dataView, hscrollBar);
                        });
                        maxHeight -= hscrollBar.outerHeight();
                    }
                    else
                        hscrollBar.hide();

                    // create "see all" item
                    if (itemsPerList < maxRowCount || maxRowCount < totalRowCount)
                        createSeeAll();
                    list.listview().listview('refresh');
                    if (seeAllLink)
                        maxHeight -= seeAllLink.outerHeight();
                    list.find('.dv-item').each(function () {
                        physicalHeight += $(this).outerHeight();
                    });

                    function removeRedundantListItem() {
                        if (listItem) {
                            physicalHeight -= listItem.outerHeight();
                            listItem.find('.ui-btn').removeData();
                            listItem.remove();
                            //list.listview('refresh');
                        }
                    }

                    if (physicalHeight > maxHeight) {
                        if (!seeAllLink) {
                            createSeeAll();
                            maxHeight -= seeAllLink.outerHeight();
                        }
                        if (afterList.length)
                            while (beforeList.length + afterList.length + 1 > 3 && physicalHeight > maxHeight) {
                                listItem = null;
                                if (removeDir == 'before') {
                                    removeDir = 'after';
                                    if (beforeList.length > 1 && beforeList.length >= afterList.length) {
                                        listItem = beforeList[0];
                                        beforeList.splice(0, 1);
                                        firstRowIndex++;
                                    }
                                }
                                else {
                                    removeDir = 'before';
                                    if (afterList.length > 1 && afterList.length > beforeList.length) {
                                        listItem = afterList[afterList.length - 1];
                                        afterList.splice(afterList.length - 1, 1);
                                        lastRowIndex--;
                                    }
                                }
                                removeRedundantListItem();
                            }
                        else {
                            while (beforeList.length > 3 && physicalHeight > maxHeight) {
                                if (options && options.action == 'prev') {
                                    listItem = beforeList[0];
                                    beforeList.splice(0, 1);
                                    firstRowIndex++;
                                }
                                else {
                                    listItem = beforeList[beforeList.length - 1];
                                    beforeList.splice(beforeList.length - 1, 1);
                                    lastRowIndex--;
                                }
                                removeRedundantListItem();
                            }
                        }
                        list.listview('refresh');
                    }
                    if (seeAllLink) {
                        seeAllStats(seeAllLink.toggleClass('ui-btn-icon-right ui-btn-icon-left'), firstRowIndex, lastRowIndex);
                        affixSeeAll(seeAllLink);
                    }
                }
                else if (viewStyle == 'List') {
                    itemsPerList = 30;
                    scrollToSelectedRow();

                    // render echo as "list"
                    inner.addClass('app-no-scrolling').height('');
                    disposeListViews(inner);
                    createAggregates();
                    list = $('<ul class="app-listview app-onecolumnview" data-role="listview"/>').addClass(dataViewToClassNames(dataView)).appendTo(inner).listview();
                    var listHeight = 0,
                        rowIndex = selectedRowIndex == null ? 0 : selectedRowIndex,
                        topRowIndex,
                        bottomRowIndex,
                        topItem,
                        dir, lastItem, removeLastItem;

                    yardstick(list);

                    addMultiSelectClass(dataView, list);

                    if (options)
                        if (options.action == 'next')
                            rowIndex = 0;
                        else
                            rowIndex = rows.length - 1;
                    topRowIndex = rowIndex;
                    bottomRowIndex = rowIndex;

                    seeAllLink = $('<li data-icon="false" class="dv-item"><a class="ui-btn dv-action-see-all"/></li>').appendTo(list);
                    maxHeight -= seeAllLink.outerHeight();
                    seeAllLink.remove();


                    while (rowIndex >= 0 && rowIndex < rows.length) {
                        var row = rows[rowIndex],
                            rowNumber = firstRowIndex + rowIndex + 1,
                            item = $('<li data-icon="false" class="dv-item"/>'),
                            link = $('<a class="ui-btn"/>').appendTo(item).data('data-context', { row: row.slice(0), pageIndex: 0 });
                        // render a list item;
                        if (options && options.action == 'prev' && lastItem)
                            item.insertBefore(lastItem);
                        else
                            item.appendTo(list)
                        lastItem = item;
                        createCardMarkup(dataView, row, map, showRowNumber ? rowNumber : null, item, link, true);
                        if (rowIndex == selectedRowIndex) {
                            selectedRow = row;
                            link.addClass('app-selected');
                        }
                        list.listview('refresh');
                        evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
                        listHeight += item.outerHeight();
                        // ensure that we have "overflow" and at least 3 items in the list
                        if (listHeight >= maxHeight && bottomRowIndex - topRowIndex >= 3) {
                            removeLastItem = true;
                            break;
                        }
                        // figure the next row to render
                        if (options)
                            if (options.action == 'next') {
                                bottomRowIndex++;
                                rowIndex = bottomRowIndex;
                            }
                            else {
                                topRowIndex--;
                                rowIndex--;
                            }
                        else if (dir == 'up') {
                            item.insertBefore(topItem);
                            topItem = item;
                            if (bottomRowIndex < rows.length - 1) {
                                dir = 'down';
                                bottomRowIndex++;
                                rowIndex = bottomRowIndex;
                            }
                            else {
                                topRowIndex--;
                                rowIndex = topRowIndex;
                            }
                        }
                        else if (dir == 'down') {
                            if (topRowIndex > 0) {
                                dir = 'up';
                                topRowIndex--;
                                rowIndex = topRowIndex;
                            }
                            else {
                                bottomRowIndex++;
                                rowIndex = bottomRowIndex;
                            }
                        }
                        else {
                            topItem = item;
                            if (topRowIndex > 0) {
                                topRowIndex--;
                                dir = 'up';
                                rowIndex = topRowIndex;
                            }
                            else {
                                bottomRowIndex++;
                                dir = 'down';
                                rowIndex = bottomRowIndex;
                            }
                        }
                    }
                    // create "See All" button
                    if (bottomRowIndex - topRowIndex < totalRowCount) {
                        // remove last item
                        if (dir == 'down' || options && options.action == 'next')
                            bottomRowIndex--
                        else
                            topRowIndex++;
                        if (removeLastItem) {
                            link.removeData();
                            item.remove();
                        }
                        // create "See All" item
                        item = $('<li data-icon="false" class="dv-item"/>').appendTo(list);
                        link = seeAllStats($('<a/>').appendTo(item).addClass('dv-action-see-all'), firstRowIndex + topRowIndex, firstRowIndex + bottomRowIndex);
                        list.listview('refresh');
                        link.toggleClass('ui-btn-icon-left ui-btn-icon-right');
                    }

                }
                else {
                    // render echo as "Cards"
                    itemsPerList = 30;
                    scrollToSelectedRow();
                    maxRowCount = rows.length;

                    list = $('<ul class="app-listview app-cardcolumn" data-role="listview"/>').hide().appendTo(inner);
                    item = $('<li data-icon="false" class="dv-item"/>').appendTo(list);
                    link = $('<a class="ui-btn"/>').appendTo(item);
                    createAggregates();

                    // measure height of a single list item
                    createCardMarkup(dataView, rows[0], map, showRowNumber ? 1 : null, item, link);
                    list.listview().show();
                    itemHeight = item.outerHeight(true);
                    maxVisibleColumns = Math.floor(inner.innerWidth() / item.outerWidth(true));

                    itemsPerList = Math.floor(maxHeight / itemHeight);
                    if (itemsPerList < 1)
                        itemsPerList = 1;

                    // see we need "See All"
                    //maxHeight -= scrollbarInfo.height;
                    list = footer.find('.app-echo-container-see-all').hide();
                    if (totalRowCount > maxRowCount) {
                        footer.show();
                        if (!list.length) {
                            list = $('<div class="app-echo-container-see-all"></div>');
                            if (aggregates)
                                list.insertBefore(footer.find('.app-bar-aggregate-list'));
                            else
                                list.appendTo(footer);
                            link = $('<a class="ui-btn-icon-left ui-btn-icon-right ui-btn dv-action-see-all"/>').appendTo(list);
                        }
                        else {
                            list.show();
                            link = list.find('.ui-btn');
                        }
                        seeAllLink = seeAllStats(link, firstRowIndex, firstRowIndex + maxRowCount - 1);
                        maxHeight -= list.outerHeight(true);
                        if (!isTouchPointer)
                            maxHeight -= 8;
                        // recalculate itemsPerList based on reduced height - we need to display "Seel All" link
                        itemsPerList = Math.floor(maxHeight / itemHeight);
                        if (itemsPerList < 1)
                            itemsPerList = 1;
                    }
                    if (maxVisibleColumns * itemsPerList >= rows.length) {
                        itemsPerList = Math.ceil(rows.length / maxVisibleColumns);
                        inner.addClass('app-no-scrolling');
                    }
                    if (totalRowCount > maxRowCount) {
                        //maxRowCount = maxRowCount - maxRowCount % itemsPerList
                        if (maxVisibleColumns * itemsPerList >= maxRowCount)
                            inner.addClass('app-no-scrolling');
                    }
                    if (!inner.is('.app-no-scrolling')) {
                        inner.addClass('app-horizontal-scrolling');
                        if (!isTouchPointer) {
                            itemsPerList = Math.floor(maxHeight / itemHeight);
                            if (itemsPerList < 1)
                                itemsPerList = 1;
                        }
                    }
                    disposeListViews(inner);
                    // render lists
                    $(rows).each(function (index) {
                        if (index >= maxRowCount)
                            return false;
                        if (!list || index % itemsPerList == 0) {
                            //if (maxRowCount - index < itemsPerList && maxRowCount < totalRowCount) {
                            //    maxRowCount = index;
                            //    return false;
                            //}
                            list = $('<ul class="app-listview app-cardcolumn" data-role="listview"/>').addClass(dataViewToClassNames(dataView)).appendTo(inner);
                            addSpecialClasses(dataView, list);
                            addMultiSelectClass(dataView, list);
                        }
                        var row = this,
                            rowNumber = firstRowIndex + index + 1,
                            item = $('<li data-icon="false" class="dv-item"/>').appendTo(list),
                            link = $('<a class="ui-btn"/>').appendTo(item).data('data-context', { row: this.slice(0), pageIndex: 0 });
                        createCardMarkup(dataView, row, map, showRowNumber ? rowNumber : null, item, link);
                        if (index == selectedRowIndex) {
                            selectedRow = row;
                            link.addClass('app-selected');
                        }
                        evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
                    });
                    if (maxRowCount > itemsPerList) {
                        var numberOfMissingItems = itemsPerList - maxRowCount % itemsPerList;
                        if (numberOfMissingItems < itemsPerList)
                            while (numberOfMissingItems-- > 0) {
                                item = $('<li data-icon="false" class="dv-item"/>').appendTo(list),
                                    link = $('<a/>').appendTo(item);
                                createCardMarkup(dataView, rows[0], map, showRowNumber ? 1 : null, item, link);
                                link.css('visibility', 'hidden').parent().addClass('app-hidden');
                            }
                    }
                    if (itemsPerList == totalRowCount)
                        list.addClass('app-list-one-column');
                    yardstick(inner.find('.app-listview').listview());
                    list = inner.find('.app-listview').first();
                    if (list.length && !isTouchPointer)
                        inner.height(list.height() + scrollbarInfo.height + 8);
                    link = inner.find('.app-selected');
                    if (link.length) {
                        selectedHorizontalOffset = link.offset().left - inner.offset().left + link.outerWidth();
                        if (selectedHorizontalOffset > inner.width())
                            lastScroll = link.offset().left - inner.offset().left - (inner.width() - link.outerWidth()) / 2;
                    }
                    if (options)
                        if (options.action == 'next')
                            lastScroll = 0;
                        else {
                            list = inner.find('.app-listview').last();
                            lastScroll = list.offset().left + list.outerWidth() - inner.offset().left;
                        }
                    inner.scrollLeft(lastScroll);
                    if (seeAllLink)
                        seeAllStats(seeAllLink, firstRowIndex, firstRowIndex + maxRowCount - 1);
                }
            }
        }
        if (!isEmbedded) {
            if (!echo.prev().is('.app-echo') && !echo.next().is('.app-echo'))
                echo.css('padding-bottom', 0);
            trimContentStub(scrollable, stub);
            if (scrollable.scrollTop() || overflowIsHidden && (stub.first().prev().offset().top + stub.first().prev().height() > scrollable.offset().top + scrollable.height()))
                scrollable.css('overflow', '');
        }
        if (!skipStandardViewStyles)
            if (hasSelection) {
                if (!selectedRow && !options)
                    extension.clearSelection();
                else
                    if (!dataView.rowIsSelected(extension.commandRow())) {
                        extension.clearSelection();
                        extension.tap(selectedRow, 'none');
                    }
            }
            else if (extension.commandRow())
                extension.clearSelection();
        //if (pageInfo.echoRefreshCallback) {
        //    pageInfo.echoRefreshCallback();
        //    pageInfo.echoRefreshCallback = null;

        //}
        //if (seeAlsoButton.is('.ui-icon-recycle')) {
        //    seeAlsoButton.removeClass('ui-icon-recycle'/*'app-animation-spin ui-icon-refresh'*/).css({ 'visibility': 'hidden', 'margin-left': '-1px', width: '1px' }).prev().show()
        //    materialIcon('material-icon-chevron-right', seeAlsoButton.prev());
        //    //$('<span class="glyphicon glyphicon-menu-right"/>').insertBefore(seeAlsoButton);
        //}
        seeAlso.css('visibility', totalRowCount == 0 ? 'hidden' : '');
        refreshEchoToolbar(dataView, echo, hasSelection, controls, title, seeAlso);

        if (isEmbedded)
            syncEmbeddedViews(scrollable);
        textInput = findInput();// $('.app-data-input');
        if (textInput.length && !iOS && textInput.offset().top > echo.offset().top)
            scrollable.scrollTop(scrollTop + echo.outerHeight() - echoHeight);
        else
            updateVScrollbar(scrollable, null, true);
        if (dataView.get_searchOnStart())
            _app.search('show', dataView._id);
    }

    function refreshEchoToolbar(dataView, echo, hasSelection, controls, title, seeAll) {
        if (hasSelection == null)
            hasSelection = dataView.get_selectedKey().length > 0;
        if (!controls) {
            if (!echo)
                echo = getEcho(dataView);// $('#' + dataView._id + '_echo');
            if (!echo.length)
                return;
            controls = echo.find('.app-echo-toolbar .app-echo-controls');
            title = controls.parent().find('h3');
            seeAll = controls.next();
        }
        var
            moreButton = title.next().css('visibility', ''),
            x1 = moreButton.offset().left + moreButton.outerWidth(),
            x2 = seeAll.offset().left - 16;
        refreshToolbarButtons(dataView, controls, x1, x2);
    }

    function refreshToolbarButtons(dataView, controls, x1, x2, hideSearch, promoIcon) {
        var context = [],
            toolbarContext = [],
            currentScope,
            controlsLeft, controlsWidth,
            overlappedButtons = [], textButtons = [],
            isGenericButton,
            groupId, buttonGroups = {}, buttonList;

        function buttonIsOverlapped(button) {
            return button.offset().left + button.outerWidth() > controlsLeft + controlsWidth - 1;
        }

        if (x1 == 0 || x2 == 0)
            controls.addClass('app-stale');
        else if (x2 - x1 >= 28) {
            controls.find('.ui-btn').data('data-context', null);
            controls.hide().contents().remove();
            currentScope = mobile.contextScope();
            mobile.contextScope(dataView._id);
            dataView.extension().context(context, ['ActionBar']);
            mobile.contextScope(currentScope);
            $(context).each(function () {
                var option = this;
                if (option.system) {
                    if (option.icon == 'search' && !hideSearch)
                        toolbarContext.push(option);
                }
                else if (option.text && !option.isStatic)
                    toolbarContext.push(option);
            });
            $(toolbarContext).each(function () {
                var option = this,
                    link,
                    icon = option.icon,
                    isMaterialIcon;
                groupId = option.group;
                if (!promoIcon || icon != promoIcon) {
                    link = $('<a class="ui-btn"/>').appendTo(controls).data('data-context', option).attr('title', actionToTooltip(option));
                    if (icon == 'dots' || option.transition)
                        link.addClass('app-has-children ui-mini').text(option.text);
                    else {
                        //isGlyphIcon = iconIsGlyph(icon);
                        //link.addClass('ui-mini ui-btn-icon-left ui-corner-all');
                        link.addClass('ui-mini ui-btn-icon-left');
                        //if (isGlyphIcon)
                        //    link.toggleClass('ui-btn-icon-left ui-icon-');
                        if (icon == 'search')
                            link.toggleClass('ui-btn-icon-left ui-btn-icon-notext ui-mini ');
                        else
                            link.text(option.text);
                        //if (isGlyphIcon)
                        //    $('<span class="glyphicon"> </span>').insertBefore(link.contents()).addClass(icon);
                        icon = toMaterialIcon(icon);
                        isMaterialIcon = iconIsMaterial(icon);
                        if (isMaterialIcon)
                            materialIcon(icon, link);
                        if (icon == false)
                            link.removeClass('ui-btn-icon-left');
                        buttonList = buttonGroups[groupId];
                        if (!buttonList)
                            buttonList = buttonGroups[groupId] = [];
                        buttonList.push(link);
                    }
                }
            });
            controlsWidth = x2 - x1;
            controls.width(controlsWidth).show();
            // auto-trim toolbar buttons
            controlsLeft = controls.offset().left;
            controls.find('.ui-btn').each(function () {
                var button = $(this);
                if (button.is('.ui-btn-icon-left'))
                    textButtons.push(button);
                if (buttonIsOverlapped(button))
                    overlappedButtons.push(button);
            });
            if (overlappedButtons.length) {
                textButtons.reverse();
                while (overlappedButtons.length) {
                    var button = overlappedButtons[0],
                        overlapped = buttonIsOverlapped(button);
                    if (overlapped) {
                        isGeneric = button.is('.ui-icon-carat-r');
                        if (isGeneric)
                            overlappedButtons.push(button);
                        else if (button.is('.ui-btn-icon-left')) {
                            button.toggleClass('ui-btn-icon-notext ui-mini ui-btn-icon-left');
                            overlapped = buttonIsOverlapped(button);
                        }
                        if (!isGeneric && overlapped) {
                            // hide any preceding button with text until this button shows up
                            $(textButtons).each(function () {
                                var textButton = this;
                                if (overlappedButtons.indexOf(textButton) == -1 && textButton.is('.ui-btn-icon-left')) {
                                    if (textButton.is('.ui-icon-carat-r'))
                                        textButton.hide();
                                    else
                                        textButton.toggleClass('ui-btn-icon-notext ui-mini ui-btn-icon-left');
                                    overlapped = buttonIsOverlapped(button);
                                    if (!overlapped)
                                        return false;
                                }

                            });
                        }
                        if (overlapped) {
                            $(overlappedButtons).each(function () {
                                this.hide();
                            });
                            break;
                        }
                    }
                    overlappedButtons.splice(0, 1);
                }
            }
            else
                for (groupId in buttonGroups) {
                    buttonList = buttonGroups[groupId];
                    if (buttonList.length > 1) {
                        $(buttonList).each(function () {
                            $(this).addClass('app-group-item');
                        });
                        buttonList[0].addClass('app-group-first');
                        buttonList[buttonList.length - 1].addClass('app-group-last');
                    }
                }
            // dummy button preserves the height of the toolbar
            $('<a class="ui-btn ui-btn-icon-notext ui-corner-all"/>').appendTo(controls).css('visibility', 'hidden');
        }
        else
            controls.hide();
    }

    function createActionBar(dataView, content) {
        var toolbar = $('<div class="app-bar-actions ui-header ui-bar-inherit ui-header-fixed"></div>').insertBefore(content),
            viewHeader = $('<h3/>').appendTo(toolbar).text(getPageInfo(dataView).text);
        $('<a class="ui-btn ui-btn-inline ui-btn-icon-notext ui-corner-all ui-icon-dots app-btn-more"/>').appendTo(toolbar);
        var controls = $('<div class="app-bar-controls"></div>').appendTo(toolbar);
        toolbar.data({ selector: viewHeader, controls: controls })
        return toolbar;
    }

    function tapIsCanceled() {
        var result = skipTap || isInTransition;
        return result == true;
    }

    function clickable(target, eventType) {
        if (skipTap || isInTransition || dragMan.dragged())
            return false;
        if (iOS) {
            var link = $(target).closest('a');
            if (link.data('scroll-check') == true)
                link.data('scroll-check', false);
            else {
                touchScrolling = false;
                var scrollable = link.closest('.app-wrapper,.ui-panel-inner'),
                    scrollStopTime = scrollable.data('scroll-stop-time'),
                    scrollTop = scrollable.scrollTop();
                if (scrollStopTime && (timeNow() - scrollStopTime.getTime() > 5000))
                    return true;
                link.data('scroll-check', true);
                setTimeout(function () {
                    if (!eventType)
                        eventType = 'vclick';
                    if (scrollTop == scrollable.scrollTop()) {
                        ($(target).is('.app-btn-more') ? target : link).trigger(eventType);
                    }
                    else {
                        clickable(link, eventType);
                        activeLink();
                    }
                }, 10);
                return false;
            }
        }
        return true;
    }

    function closeActivePanel(animation) {
        setTimeout(function () { $('div.ui-panel-open').panel('close', animation != true); }, feedbackDelay);
    }

    function refreshContext(cancel, delay, callback) {
        if (skipRefreshContext)
            return;
        if (delay == null)
            delay = refreshContextDelay;
        if (refreshContextTimeout) {
            clearTimeout(refreshContextTimeout)
            refreshContextTimeout = null;
        }

        function doRefresh() {
            if (isInTransition || notifyBar && notifyBar.data('busy'))
                refreshContext(cancel, feedbackDelay, callback)
            else {
                refreshContextTimeout = null;
                //requestAnimationFrame(function () {
                //yardstick();
                var activePage = findActivePage(),
                    context;
                if (activePage.is('.app-page-modal')) {
                    context = [];
                    mobile.navContext(context);
                    mobile.refreshAppButtons(context, { toolbar: false, actionBar: true, promo: true, buttonBars: activePage.find('.app-bar-buttons') });
                    return;
                }
                var pageId = getActivePageId(),
                    sidebar = contextSidebar(),
                    sidebarPageId = sidebar.data('page-id'),
                    oldScope = mobile.contextScope();
                if (sidebarPageId == pageId)
                    savePanelScrollTop(sidebar);
                mobile.contextScope(null);
                sidebar.find('.app-show-request').removeClass('app-show-request').show().trigger('show.sidebar.app');
                sidebar.find('.app-hide-request').removeClass('app-hide-request').hide().trigger('hide.sidebar.app');
                mobile.refreshTitleState();
                mobile.refreshContextMenu(sidebar.data('page-id', pageId));
                mobile.contextScope(oldScope);
                mobile.refreshMenuStrip();
                if (callback) {
                    callback();
                }
                //fetchOnDemand(100);
                //stickyHeader();
                // });
            }
        }

        if (!cancel)
            if (delay)
                refreshContextTimeout = setTimeout(doRefresh, delay);
            else
                doRefresh();
    }

    function sessionVariable(name, value) {
        //name = location.pathname.replace(/\W/g, '_') + '_' + name;
        if (arguments.length == 1)
            return _app.cache[name];
        else
            _app.cache[name] = value;
    }


    function pageVariable(name, value) {
        var pathname = location.pathname;
        if ($app.host) {
            var m = pathname.match(/apps\/(.+?)\/(.+?)(\.html)?$/);
            if (m)
                pathname = m[2];
        }
        name = pathname.replace(/\W/g, '_').toLowerCase() + '_' + name;
        if (arguments.length == 1)
            return userVariable(name);
        else
            userVariable(name, value);
    }

    function userVariable(name, value) {
        if (!userScope)
            userScope = settings.appInfo.replace(/\W/g, '_');
        if (!$app.host)
            name = userScope + '_' + name;
        if (arguments.length == 1) {
            try {
                value = _app.storage.get(name);//localStorage[name];
                if (value != null)
                    value = JSON.parse(value);
                return value;
            }
            catch (ex) {
            }
            return null;
        }
        if (value == null)
            //localStorage.removeItem(name);
            _app.storage.remove(name);
        else
            try {
                //localStorage[name] = JSON.stringify(value);
                _app.storage.set(name, JSON.stringify(value));
            }
            catch (ex) {
                // ignore local storage errors
                // iOS Safari will raise an exception here if PRIVATE browsing mode is enabled.
            }
    }

    /*
    function glocalUserVariable(name, value) {
    var token = 'AppFactoryUserVars';
     
    function persistVars() {
    var s = encodeURIComponent(JSON.stringify(_userVars)),
    futureDate = new Date().getDate() + 7,
    expires = new Date();
    expires.setDate(futureDate);
    s = String.format('{0}={1}; expires={2}; path=/', token, s, expires.toUTCString());
    document.cookie = s;
    }
     
    if (_userVars == null) {
    $(document.cookie.split(';')).each(function () {
    var cookie = this.trim();
    if (cookie.startsWith(token)) {
    _userVars = decodeURIComponent(cookie.substring(token.length + 1));
    try {
    _userVars = JSON.parse(_userVars);
    persistVars();
    }
    catch (ex) {
    }
    }
    });
    if (!_userVars)
    _userVars = {};
    }
    if (arguments.length == 2) {
    _userVars[name] = value;
    persistVars();
    }
    else
    return _userVars[name];
    }
    */

    function parseActivator(elem, defaultText) {
        var activator = { text: defaultText, resolved: true, description: null, type: null },
            s = elem.attr('data-activator'),
            container,
            containerId,
            closestElem,
            legacyHeader = $(elem).prev('.DataViewHeader').text();

        if (!s) {
            closestElem = elem.closest('div[data-activator]');
            s = closestElem.attr('data-activator');
            elem = closestElem;
        }
        if (s) {
            container = elem.parent();
            containerId = container.attr('id');
            if (!containerId) {
                containerId = 'aid' + autoId++;
                container.attr('id', containerId);
            }
            activator.container = containerId;
        }
        if (!s)
            s = legacyHeader;
        if (s && s != 'false') {
            s = _app.eval(s);
            var m = activatorRegex.exec(s);
            if (m) {
                activator.text = m[4] || m[2];
                activator.type = m[1];
            }
            else
                activator.text = s;
        }
        else
            activator.resolved = false;
        activator.description = elem.attr('data-activator-description');
        return activator;
    }

    function isPhoneField(field, actionable) {
        return isXField(field, actionable, 'call', phoneFieldRegex);
    }

    function isEmailField(field, actionable) {
        return isXField(field, actionable, 'email', emailFieldRegex);
    }

    function isUrlField(field, actionable) {
        return isXField(field, actionable, 'url', urlFieldRegex);
    }

    function isLocationField(field, actionable) {
        return (actionable ? field.tagged('action-location') : field.tagged('action-location', 'map-address')) && !field.tagged('action-location-disabled');
    }

    function isXField(field, actionable, x, regex) {
        var nameMatch = regex && field.Name.match(regex);
        if (actionable)
            return !field.tagged('action-' + x + '-disabled') && (field.tagged('action-' + x) || nameMatch);
        else
            return field.tagged('action-' + x, 'field-' + x) || nameMatch;
    }

    function isLookupField(field) {
        var itemsStyle = field.ItemsStyle;
        return !String.isNullOrEmpty(itemsStyle) && itemsStyle != 'CheckBoxList';
    }

    function addSpecialClasses(dataView, container) {
        if (dataView.get_isTagged('thumb-person') || (dataView._controller.match(/\b(emp|acc|user|usr|person|cust)/i) && !dataView.get_isTagged('thumb-standard')))
            container.addClass('app-thumb-person');
        else
            container.removeClass('app-thumb-person');
    }

    function addMultiSelectClass(dataView, listview) {
        if (dataView.get_showMultipleSelection())
            listview.addClass('app-listview-multiselect');
        else
            listview.removeClass('app-listview-multiselect');
    }

    function animatedScroll(scrollable, scrollTop, callback) {
        //scrollable.scrollTop(scrollTop);
        //if (callback)
        //    callback();
        scrollable.data('scrolling', true).animate(
            { scrollTop: scrollTop }, 'swing',
            function () {
                isInTransition = false;
                if (callback)
                    callback();
                setTimeout(function () {
                    scrollable.removeData('scrolling');
                }, 100);
            });
    }

    function getContextPanel(selector, beforeOpenCallback, options) {
        if (!options)
            options = {};
        var contextPanel = $(selector),
            position = options.position || 'right';
        hideTooltip();
        contextActionOnClose = null;
        if (!contextPanel.length) {
            contextPanel = $(String.format('<div data-position-fixed="true" data-role="panel" data-draggable="panel" data-theme="a" data-display="overlay" class="app-popup-icon-left ui-panel ui-panel-display-overlay ui-panel-animate ui-panel-position-{0}"><ul/></div>', position))
                .appendTo($body)
                .panel({
                    animate: enablePanelAnimation(),
                    position: position,
                    beforeopen: function () {
                        if (isVirtualScreen())
                            contextPanel.css({ top: _screen.top, height: _screen.height, minHeight: _screen.height, right: position == 'right' ? _screen.right : '', left: position == 'right' ? '' : _screen.left });
                        else
                            contextPanel.css({ top: '', height: '', minHeight: '', right: '' });
                        if (scrollbarInfo.width) {
                            var inner = contextPanel.find('.ui-panel-inner').css({ width: '', 'overflow-y': 'scroll' });
                            inner.width(inner.width() + scrollbarInfo.width);
                        }
                        contextPanel.find('.ui-panel-inner').attr('tabindex', 0);
                        enablePointerEvents(false);
                        panelIsBusy = true;
                        if (clearContextScopeTimeout) {
                            clearTimeout(clearContextScopeTimeout);
                            clearContextScopeTimeout = null;
                        }
                        if (beforeOpenCallback)
                            beforeOpenCallback();
                    },
                    open: function () {
                        setTimeout(function () {
                            panelIsBusy = false;
                            activeLink();
                            if (options && options.afteropen)
                                options.afteropen();
                            $('.ui-panel-open .ui-panel-inner').focus();
                            enablePointerEvents(true);
                        });
                    },
                    beforeclose: function () {
                        enablePointerEvents(false);
                        panelIsBusy = true;
                        savePanelScrollTop(contextPanel);
                    },
                    close: function (event) {
                        setTimeout(function () {
                            contextPanel.css('visibility', '');
                            enablePointerEvents(true);
                            panelIsBusy = false;
                            if (contextActionOnClose)
                                contextActionOnClose();
                            if (mobile.contextScope())
                                clearContextScopeTimeout = setTimeout(function () {
                                    mobile.contextScope(null);
                                    clearContextScopeTimeout = null;
                                }, 1000);
                            contextActionOnClose = null;
                            focusScrollable();
                            if (options && options.close)
                                options.close();
                        });
                    }
                });
            enablePanelAnimation(contextPanel);
            if (options.className)
                contextPanel.addClass(options.className);
            registerPanelScroller(contextPanel);
            if (selector.match(/^#/))
                contextPanel.attr('id', selector.substring(1));
            contextPanel.find('ul').listview();
            contextPanel.on('vclick', function (event) {
                var link = $(event.target).closest('a'),
                    linkIcon = link.closest('li').attr('data-icon');
                if (panelIsBusy || !link.length)
                    return false;
                if (!clickable(link))
                    return false;
                var action = link.data('context-action');
                if (action && !skipContextActionOnClose) {
                    if (action.dataRel)
                        return true;
                    if (action.feedback == false) {
                        activeLink();
                        if (action.keepOpen == true || action.transition) {
                            executeContextAction(action, link, true);
                            ensureFocusedLink(link);
                        }
                        else {
                            contextPanel.panel('close', linkIcon != 'dots' && linkIcon != iconBack);
                            contextActionOnClose = function () {
                                setTimeout(function () {
                                    executeContextAction(action, link);
                                }, 10);
                            }
                        }
                    }
                    else
                        if (action.keepOpen == true || action.transition) {
                            callWithFeedback(link, function () {
                                executeContextAction(action, link, true);
                                ensureFocusedLink(link);
                            });
                        }
                        else {
                            callWithFeedback(link, function () {
                                var lists,
                                    firstList, listContainer;
                                if (action.icon == iconBack) {
                                    lists = link.closest('.ui-panel-inner').find('ul');
                                    firstList = lists.first();
                                }
                                if (lists && lists.length > 1) {
                                    enablePointerEvents(false);
                                    listContainer = firstList.parent().addClass('app-list-container-reverse').css(
                                        {
                                            transition: '',
                                            'transform': 'translate3d(' + -(-parseCss(firstList, 'margin-right') + firstList.closest('.ui-panel').outerWidth() * (lists.length - 2)) + 'px,0,0)'
                                            //'margin-left': -(-parseInt(firstList.css('margin-right')) + firstList.closest('.ui-panel').outerWidth() * (lists.length - 2))
                                        }).one('transitionend', function () {
                                            setTimeout(function () {
                                                lists.last().remove();
                                                listContainer.removeClass('app-list-container-reverse');
                                                scrollFocusedLinkIntoView($(lists[lists.length - 2]).find('.app-focus'));
                                                enablePointerEvents(true);
                                            });
                                        });
                                }
                                else {
                                    var href = link.attr('href');
                                    if (href)
                                        _window.location.href = href;
                                    else {
                                        contextPanel.panel('close', linkIcon != 'dots' && linkIcon != iconBack);
                                        contextActionOnClose = function () {
                                            setTimeout(function () {
                                                executeContextAction(action, link);
                                            }, enablePanelAnimation() ? 10 : feedbackDelay);
                                        }
                                    }
                                }
                            });
                        }
                }
                skipContextActionOnClose = false;
                //event.preventDefault();
                //event.stopPropagation();
                return false;
            }).on('swipe', function () {
                //skipContextActionOnClose = true;
            });
            enhanceScrolling(contextPanel, false);
            if (options && options.resetScrolling)
                contextPanel.addClass('app-reset-scrolling');
        }
        else {
            var lists = contextPanel.find('ul');
            if (!contextPanel.is('.ui-panel-open') && lists.length > 1) {
                lists.first().parent().css({ 'transition': 'none', 'transform': 'none' }).removeClass('app-list-container-reverse');
                lists.slice(1).remove();
            }
        }
        //contextPanel.panel('toggle');
        return contextPanel;
    }

    function backToContextPanel() {
        if (mobile.contextScope() == '_contextMenu')
            mobile._menuPanel.panel('toggle');
        else
            mobile.toggleContextPanel('#app-panel-context');
    }

    function stickyHeaderBar(selector) {
        return mobile.stickyHeaderBar(selector); // #Main page does not have a sticky header yet
    }

    function fetchOnDemand(delay) {
        if (delay != null) {
            clearTimeout(fetchOnDemandTimeout);
            fetchOnDemandTimeout = setTimeout(function () {
                mobile.fetchOnDemand();
            }, delay);
        }
        else
            mobile.fetchOnDemand();
    }

    function stickyHeader(selector) {
        mobile.stickyHeader(selector);
    }

    function hideStickyHeader(selector) {
        stickyHeaderBar(selector).hide();
    }

    function resetStickyHeader(selector) {
        hideStickyHeader(selector);
        stickyHeader(selector);
    }

    function showContextPanel(newContext, panelSelector, options) {
        var panel = $('.ui-panel-open'),
            panelWidth, inner, listContainer,
            lists, firstList, panelList,
            listSelector;
        if (panel.length) {
            enablePointerEvents(false);
            inner = panel.find('.ui-panel-inner').addClass('app-multi-list');
            listContainer = inner.find('.app-list-container');
            if (!listContainer.length) {
                inner.contents().wrap('<div class="app-list-container"></div>');
                listContainer = inner.find('.app-list-container');
            }
            panelWidth = panel.outerWidth();
            listSelector = '[data-panel="' + panelSelector + '"]';
            panelList = inner.find(listSelector);
            if (!panelList.length)
                panelList = $('<ul/>').attr('data-panel', panelSelector).appendTo(listContainer).listview();
            lists = panel.find('ul').width(panelWidth);
            firstList = lists.first();
            currentContext = newContext;
            mobile.refreshContextMenu(panel, currentContext, listSelector);
            listContainer.css({
                transition: '',
                'transform': 'translate3d(' + -(-parseCss(firstList, 'margin-right') + panelWidth * (panelList.prevAll('ul').length)) + 'px,0,0)'
                //'margin-left': -(-parseInt(firstList.css('margin-right')) + panelWidth * (panelList.prevAll('ul').length))
            }).one('transitionend', function () {
                setTimeout(function () {
                    panelList.nextAll('ul').remove();
                    if (options && options.afteropen)
                        options.afteropen();
                    //if (panelList.last().prev().find('.app-focus').length)
                    //    panelList.last().find('.ui-btn').first().addClass('app-focus ui-btn-active');
                    enablePointerEvents(true);
                    $('.ui-panel-open .ui-panel-inner').focus();
                });
            });
        }
        else {
            currentContext = newContext;
            if (mobile.contextScope() && (!options || options.position != 'left') || options && options.position != 'right') {
                panelSelector += '-scope';
                if (!options)
                    options = {};
                options.position = 'left';
            }
            return (
                getContextPanel(panelSelector, function () {
                    mobile.refreshContextMenu(panelSelector, currentContext);
                }, options).panel('toggle'));
        }
    }

    function sortExpressionToText(dataView) {
        var sb = new Sys.StringBuilder(),
            fields = dataView._fields,
            f, i, sortOrder,
            expression = dataView.get_sortExpression(),
            iterator = sortExpressionRegex, m;
        if (expression) {
            m = iterator.exec(expression);
            while (m) {
                f = dataView.findField(m[1]);
                sortOrder = !m[3] || m[3].match(/^asc/) ? 'asc' : 'desc';
                if (f && f.AllowSorting) {
                    if (!sb.isEmpty())
                        sb.append(', ');
                    sb.appendFormat('{0} ({1})', f.HeaderText, fieldSortOrderText(f, sortOrder));
                }
                m = iterator.exec(expression);
            }
        }
        return sb.toString();
    }

    function groupExpressionToText(dataView) {
        var sb = new Sys.StringBuilder(),
            fields = dataView._fields,
            f, i, sortOrder,
            expression = dataView.get_groupExpression(),
            iterator = sortExpressionRegex, m;
        if (expression) {
            m = iterator.exec(expression);
            while (m) {
                f = dataView.findField(m[1]);
                sortOrder = !m[3] || m[3].match(/^asc/) ? 'asc' : 'desc';
                if (f && f.AllowSorting) {
                    if (!sb.isEmpty())
                        sb.append(', ');
                    sb.appendFormat('{0}', f.HeaderText);
                }
                m = iterator.exec(expression);
            }
        }
        return sb.toString();
    }

    function resetInstruction(dataView) {
        dataView.extension()._instructed = false;
        //stickyHeaderBar().find('.app-bar-text').removeData('html');
        getPageInfo(dataView).stickyHeader.find('.app-bar-text').removeData('html');
    }

    function updateGroupExpression(dataView, groupExpression) {
        var currentGroupExpression = dataView.groupExpression(),
            sortExpression = dataView.get_sortExpression(),
            sortBy, i = 0;
        if (currentGroupExpression && sortExpression) {
            sortExpression = sortExpression.split(_app._simpleListRegex)
            while (i < sortExpression.length) {
                sortBy = sortExpression[i].match(/(\w+)(\s+\w+)?/);
                if (!sortExpression[i] || sortBy && currentGroupExpression.indexOf(sortBy[1]) != -1)
                    sortExpression.splice(i, 1);
                else
                    i++;
            }
            sortExpression = sortExpression.join(',');
            dataView.set_sortExpression(sortExpression);
            dataView.viewProp('sortExpression', sortExpression);
        }
        dataView.viewProp('groupExpression', groupExpression);
        dataView.set_groupExpression(groupExpression);
        resetInstruction(dataView);
        dataView._keepKeyList = true;
        dataView.AutoPivots = null;
        gridStyleChanged(dataView);

        var text = groupExpressionToText(dataView);
        mobile.notify({ dataView: dataView, text: text ? (resourcesMobile.Grouped + ' - ' + text) : resourcesMobile.UnGrouped });
        dataView.sync();
    }

    function resetGridHeaderStyle(dataView) {
        dataView.session('reset-grid-header', true);
    }

    function gridStyleChanged(dataView) {
        $(dataView._views).each(function () {
            var view = this,
                viewId = view.Id,
                frozenStyle;
            if (view.Type != 'Form') {
                dataView.session('grid-style-changed', true, viewId);
                dataView.session('grid-avail-width', null, viewId)
                dataView.session('window-width', null, viewId);
            }
        });
    }

    function updateSortExpressionIfChanged() {
        var dataView = mobile.contextDataView();
        if (newSortExpression != null) {
            dataView.set_sortExpression(newSortExpression);
            newSortExpression = null;
            resetInstruction(dataView);
            dataView._keepKeyList = true;
            resetGridHeaderStyle(dataView)
            var text = sortExpressionToText(dataView) || '';
            mobile.notify({ dataView: dataView, text: text ? (resourcesMobile.Sorted + ' - ' + text) : resourcesMobile.SortedDefault });
            dataView.sync();
        }
    }

    function sortExpression(dataView, fieldName, value) {
        var expression = newSortExpression == null ? dataView.get_sortExpression() || '' : newSortExpression,
            list = expression.split(_app._simpleListRegex),
            i, m;
        if (value == null) {
            if (expression)
                for (i = 0; i < list.length; i++) {
                    m = list[i].match(sortByRegex);
                    if (m && m[1] == fieldName)
                        return m[3] || 'asc';
                }
            return null;
        }
        else {
            newSortExpression = value ? String.format('{0} {1}', fieldName, value) : '';
            dataView.viewProp('sortExpression', newSortExpression);
        }
    }


    function fieldSortOrderText(field, sortOrder) {
        var ascending = resourcesHeaderFilter.GenericSortAscending,
            descending = resourcesHeaderFilter.GenericSortDescending;
        switch (field.FilterType) {
            case 'Text':
                ascending = resourcesHeaderFilter.StringSortAscending;
                descending = resourcesHeaderFilter.StringSortDescending;
                break;
            case 'Date':
                ascending = resourcesHeaderFilter.DateSortAscending;
                descending = resourcesHeaderFilter.DateSortDescending;
                break;
        }
        return sortOrder == 'asc' ? ascending : descending;
    }

    function showSettingsPanel(context, callback) {
        currentContext = context;
        if (callback)
            setTimeout(callback, 500);
        else
            configureSettings();
    }

    function developerTools_downloadFormLayout(dataViewId, link) {
        var dataView = $app.find(dataViewId),
            fileName = dataView._controller,
            layout = '',
            sizes = link.closest('ul').find('.app-layout-size').filter(function () { return $(this).find('.app-icon').length > 0 }),
            survey = dataView._survey;
        // produce HTML definition of the layout
        if (survey && survey.layout) {
            fileName = fileName.replace(/__search/, '._search');
            layout += String.format('<!--\r\n\t~/js/surveys/{0}.html\r\n-->\r\n{1}', fileName, survey.layout);
        }
        else {
            fileName += '.' + dataView._viewId;
            sizes.each(function () {
                var context = $(this).data('context-action');
                layout += '\r\n<!--  ' + context.text + ' -->\r\n';
                layout += generateLayout(dataView, toPhysicalWidth(context.context));
                layout += '\r\n';
            });
            layout = String.format('<!--\r\n\t~/views/{0}.html\r\n-->\r\n{1}', fileName, layout.replace(/<span\s+class=\"app-control-inner\">([\s\S]+?)<\/span>/g, '$1').replace(/\n\s*>/g, '>'));
        }
        showFile(fileName + '.html.txt', layout, 'text/plain');
        // produce optional survey definition in JavaScript
        if (survey) {
            var js = JSON.stringify(survey);
            js = JSON.parse(js);
            if (js.text && typeof js.text != 'string')
                js.text = js.text[0];
            for (var propName in js)
                if (['options', 'text', 'text2', 'topics', 'controller',].indexOf(propName) == -1)
                    delete js[propName];
            js.layout = '#ref';
            js.cache = false;

            var output = [], tab = '    ';

            function formatJs(obj, depth) {
                var s = '', padding = '', propList = []
                for (var i = 0; i < depth; i++)
                    padding += tab;

                for (var key in obj)
                    propList.push(key);

                propList.forEach(function (key, index) {
                    s = padding + key + ': ';
                    var value = obj[key],
                        comma = index == propList.length - 1 ? '' : ',';
                    if (value != null && value instanceof Array) {
                        s += '[';
                        output.push(s);
                        value.forEach(function (v, index) {
                            var comma2 = index == value.length - 1 ? '' : ',';
                            if (typeof v == 'object') {
                                output.push(padding + tab + '{');
                                formatJs(v, depth + 2);
                                output.push(padding + tab + '}' + comma2);
                            }
                            else
                                output.push(padding + tab + JSON.stringify(v) + comma2);
                        });
                        output.push(padding + ']' + comma);
                    }
                    else if (typeof value == 'object') {
                        s += '{';
                        output.push(s);
                        formatJs(value, depth + 1);
                        output.push(padding + '}' + comma);
                    }
                    else
                        output.push(s + JSON.stringify(value) + comma);
                });
            }
            formatJs(js, 1);
            js = String.format('//\r\n//\t~/js/surveys/{0}.js\r\n//\r\n({{\r\n{1}\r\n}})();', fileName, output.join('\r\n'))
            showFile(fileName + '.js.txt', js, 'text/plain');
        }
    }

    function developerTools_Device() {
        var oldContext = currentContext,
            deviceName = _device.name,
            deviceOrientation = _device && _device.width > _device.height ? 'Landscape' : 'Portrait',
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                }
            ];


        function changeDevice(device, link) {
            var orientation = _device && (_device.height == null || _device.width < _device.height) ? 'Portrait' : 'Landscape';
            _device = JSON.parse(JSON.stringify(device));
            if (device.width == null)
                _screen.isVirtual = false;
            else {
                _screen.isVirtual = true;
                if (orientation == 'Landscape') {
                    _screen.width = device.height;
                    _screen.height = device.width;
                }
                else {
                    _screen.width = device.width;
                    _screen.height = device.height;
                }
                device.width = _screen.width;
                device.height = _screen.height;
            }
            virtualDevice(device);
            screenChanged();
            pageResized(true)
        }

        function changeOrientation(orientation, link) {
            if (_screen.isVirtual) {
                var width = Math.min(_device.width, _device.height),
                    height = Math.max(_device.width, _device.height);
                _screen.deviceWidth = null;
                _screen.deviceHeight = null;
                if (orientation == 'Portrait') {
                    _screen.width = width;
                    _screen.height = height;
                }
                else {
                    _screen.width = height;
                    _screen.height = width;
                }
            }
            _device.width = _screen.width;
            _device.height = _screen.height;
            virtualDevice(_device);
            screenChanged();
            pageResized(true)
        }

        if (_device.width) {
            context.push({ text: resourcesMobile.Orientation, instruction: true });
            context.push({ text: resourcesMobile.Portrait, icon: deviceOrientation == 'Portrait' ? 'check' : false, context: 'Portrait', callback: changeOrientation });
            context.push({ text: resourcesMobile.Landscape, icon: deviceOrientation == 'Landscape' ? 'check' : false, context: 'Landscape', callback: changeOrientation });
        }
        context.push({ text: resourcesMobile.Device, isStatic: false, instruction: true });
        context.push({ text: 'Responsive', icon: deviceName == 'Responsive' ? 'check' : false, context: { name: 'Responsive' }, callback: changeDevice });
        context.push({ text: 'iPhone SE', icon: deviceName == 'iPhone SE' ? 'check' : false, context: { name: 'iPhone SE', width: 320, height: 568 }, callback: changeDevice });
        context.push({ text: 'iPhone 7', icon: deviceName == 'iPhone 7' ? 'check' : false, context: { name: 'iPhone 7', width: 375, height: 667 }, callback: changeDevice });
        context.push({ text: 'iPhone 7 Plus', icon: deviceName == 'iPhone Plus' ? 'check' : false, context: { name: 'iPhone Plus', width: 414, height: 736 }, callback: changeDevice });
        context.push({ text: 'iPad Mini', icon: deviceName == 'iPad Mini' ? 'check' : false, context: { name: 'iPad Mini', width: 768, height: 1024 }, callback: changeDevice });
        showContextPanel(context, '#app-panel-developer-tools-device');
    }

    function developerTools_FormLayout() {
        var oldContext = currentContext,
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesDevelop.FormLayout, isStatic: false, instruction: true },
            ],
            dataView = mobile.dataView(),
            pageWidth;

        context.push({ text: resourcesMobile.Download, 'icon': 'material-icon-file-download', context: dataView._id, keepOpen: true, callback: developerTools_downloadFormLayout });

        function toggleSize(context, link) {
            var icon = link.find('.app-icon')
            if (icon.length) {
                icon.remove();
                link.removeClass('app-has-material-icon');
            }
            else
                materialIcon('material-icon-check', link);
        }

        pageWidth = toLogicalWidth(calcWidth(findScrollable()));
        context.push({ text: resourcesDevelop.FormLayoutInstr, instruction: true });
        context.push({ text: 'Tiny (tn)', icon: pageWidth == 'tn' ? 'check' : false, keepOpen: true, context: 'tn', linkClassName: 'app-layout-size', callback: toggleSize });
        context.push({ text: 'Extra Extra Small (xxs)', icon: pageWidth == 'xxs' ? 'check' : false, keepOpen: true, context: 'xxs', linkClassName: 'app-layout-size', callback: toggleSize });
        context.push({ text: 'Extra Small (xs)', icon: pageWidth == 'xs' ? 'check' : false, keepOpen: true, context: 'xs', linkClassName: 'app-layout-size', callback: toggleSize });
        context.push({ text: 'Small (sm)', icon: pageWidth == 'sm' ? 'check' : false, keepOpen: true, context: 'sm', linkClassName: 'app-layout-size', callback: toggleSize });
        context.push({ text: 'Medium (md)', icon: pageWidth == 'md' ? 'check' : false, keepOpen: true, context: 'md', linkClassName: 'app-layout-size', callback: toggleSize });
        context.push({ text: 'Large (lg)', icon: pageWidth == 'lg' ? 'check' : false, keepOpen: true, context: 'lg', linkClassName: 'app-layout-size', callback: toggleSize });
        context.push({ text: 'Extra Large (xl)', icon: pageWidth == 'xl' ? 'check' : false, keepOpen: true, context: 'xl', linkClassName: 'app-layout-size', callback: toggleSize });
        context.push({ text: 'Extra Extra Large (xxl)', icon: pageWidth == 'xxl' ? 'check' : false, keepOpen: true, context: 'xxl', linkClassName: 'app-layout-size', callback: toggleSize });
        showContextPanel(context, '#app-panel-developer-tools-form-layout');
    }

    function developerTools() {
        var oldContext = currentContext,
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesDevelop.Tools, isStatic: false, instruction: true },
            ],
            dataView = mobile.dataView();

        function toggleSize(context, link) {
            var icon = link.find('.app-icon')
            if (icon.length) {
                icon.remove();
                link.removeClass('app-has-material-icon');
            }
            else
                materialIcon('material-icon-check', link);
        }

        context.push({ text: resourcesDevelop.Explorer, 'icon': 'material-icon-build', shortcut: 'Ctrl+Shift+D', callback: nop });
        if (dataView && dataView.get_isForm())
            context.push({ text: resourcesDevelop.FormLayout, icon: false, transition: true, callback: developerTools_FormLayout });
        context.push({ text: resourcesMobile.Device, icon: false, transition: true, callback: developerTools_Device });
        showContextPanel(context, '#app-panel-developer-tools');
    }

    function configureSettingsOfSystemButtons() {

        function changeShowSystemButtons(value) {
            if (value == 'OnHover')
                $body.addClass('app-show-system-buttons-on-hover');
            if (value == 'Always')
                $body.removeClass('app-show-system-buttons-on-hover');
            userVariable('showSystemButtons', value);
            $settings('ui.showSystemButtons', value);
        }

        var oldContext = currentContext,
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.ShowSystemButtons, isStatic: false, instruction: true },
                { text: resourcesMobile.OnHover, icon: $settings('ui.showSystemButtons') == 'OnHover' || $settings('ui.showSystemButtons') == 'Auto' && !isTouchPointer ? 'check' : false, context: 'OnHover', callback: changeShowSystemButtons },
                { text: resourcesMobile.Always, icon: $settings('ui.showSystemButtons') == 'Always' ? 'check' : false, context: 'Always', callback: changeShowSystemButtons },
            ];
        mobile.contextScope('_contextMenu');
        showContextPanel(context, '#app-panel-settings-showsystembuttons');
    }

    function configureSettingsOfSidebar() {

        function toggleSidebar(state) {
            hideMenuStrip();
            mobile.contextScope(null);

            $settings('ui.sidebar.when', state);
            userVariable('sidebar', state);

            updateSidebarVisibility();
            pageResized(true);

            //yardstick();
            //fetchOnDemand(1000);
            //highlightSelection();

            //refreshContext();
            //setTimeout(function () {
            //    fitTabs();
            //    fetchEchos(true);
            //    showSidebarSettings();
            //    stickyHeader();
            //}, 750);
        }

        function showSidebarSettings() {
            showSettingsPanel(oldContext, configureSettingsOfSidebar);
        }

        var oldContext = currentContext,
            when = $settings('ui.sidebar.when'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.Sidebar, isStatic: false, instruction: true },
                { text: resourcesMobile.Landscape, icon: when == 'Landscape' ? 'check' : false, context: 'Landscape', callback: toggleSidebar },
                { text: resourcesMobile.Always, icon: when == 'Always' ? 'check' : false, context: 'Always', callback: toggleSidebar },
                { text: resourcesMobile.Never, icon: when == 'Never' ? 'check' : false, context: 'Never', callback: toggleSidebar }
            ];
        mobile.contextScope('_contextMenu');
        showContextPanel(context, '#app-panel-settings-sidebar');
    }

    function displayDensityToClass(density) {
        var density = density.toLowerCase();
        if (density == 'tiny')
            density = 'condensed app-font-tiny';
        return 'app-density-' + density;
    }

    function themeToClass(theme) {
        return 'app-theme-' + theme.toLowerCase();
    }

    function changeThemeAndAccent(context, link) {
        var theme = settings.ui.theme,
            originalTheme = theme.name,
            originalAccent = theme.accent;
        if (context.theme)
            theme.name = context.theme.name;
        else if (context.accent)
            theme.accent = context.accent.name;
        link.closest('.ui-panel-inner').find('.app-item-theme-' + (context.theme ? 'name' : 'accent') + ' i').remove();
        materialIcon('material-icon-check', link);

        setTimeout(function () {
            $settings('ui.theme.name', theme.name);
            $settings('ui.theme.accent', theme.accent);
            mobile._changeThemeLink(originalTheme + '.' + originalAccent, theme.name + '.' + theme.accent, function () {
                if (originalTheme)
                    $body.removeClass(themeToClass(originalTheme));
                $body.addClass(themeToClass(theme.name));
                // fade the panel out and bring it back
                var panel = $('.ui-panel-open').css('transition', 'opacity 500ms');
                setTimeout(function () {
                    panel.css('opacity', 0);
                    setTimeout(function () {
                        panel.css('opacity', '');
                        setTimeout(function () {
                            panel.css('transition', '');
                        }, 600);
                    }, theme.preview || 1000); // the duration of the preview
                }, 32);
            });
        }, 200);
    }

    function configureSettingsOfThemes() {
        var oldContext = currentContext,
            currentTheme = $settings('ui.theme.name'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobileThemes.Label, isStatic: false, instruction: true }
            ];
        var settingsTheme = settings.ui.theme,
            themeInfo = settingsTheme.config;

        function enumerateThemeOptions() {
            $(themeInfo.themes).each(function () {
                var theme = this;
                context.push({ text: resourcesMobileThemes.List[theme.name] || theme.text || theme.name, icon: settingsTheme.name == theme.name ? 'check' : false, keepOpen: true, context: { theme: theme }, callback: changeThemeAndAccent, linkClassName: 'app-item-theme-name', color: theme.color });
            });
            context.push({ text: resourcesMobileThemes.Accent, isStatic: false, instruction: true });
            $(themeInfo.accents).each(function () {
                var accent = this;
                context.push({ text: resourcesMobileThemes.List[accent.name] || accent.text || accent.name, icon: settingsTheme.accent == accent.name ? 'check' : false, keepOpen: true, context: { accent: accent }, callback: changeThemeAndAccent, linkClassName: 'app-item-theme-accent', color: accent.color });
            });
        }

        context.push({ text: loadingStatusText, icon: 'material-icon-refresh', animate: true, keepOpen: true, callback: nop });
        showContextPanel(context, '#app-panel-settings-theme');

        mobile.getThemes().done(function (result) {
            themeInfo = settings.ui.theme.config = result;
            //themeInfo.accents.splice(0, 0, { name: 'None' });
            var panel = $('.ui-panel-open [data-panel="#app-panel-settings-theme"] .ui-btn.app-animated').closest('.ui-panel');
            if (panel.length) {
                context.splice(context.length - 1, 1);
                enumerateThemeOptions();
                mobile.refreshContextMenu(panel, context, '[data-panel="#app-panel-settings-theme"]');
            }
            //else {
            //    alert('no panel?')
            //}
        });
    }

    function configureSettingsOfTransitions() {
        var oldContext = currentContext,
            currentTransition = $settings('ui.transitions.style'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.Transitions.Label, isStatic: false, instruction: true },
            ];

        function doChangeTransition(newTransition) {
            if (newTransition != currentTransition) {
                $settings('ui.transitions.style', newTransition);
                userVariable('transitions', newTransition);
            }
            //_app.confirm(resourcesMobile.ConfirmReload, nop, function () {
            //    showSettingsPanel(oldContext);
            //}
            //);
        }

        //for (var t in resourcesMobile.Transitions.List) {
        //    context.push({ text: resourcesMobile.Transitions.List[t], 'icon': t == currentTransition ? 'check' : false, context: t, callback: doChangeTransition });
        //}

        context.push({ text: resourcesMobile.Transitions.List.none, 'icon': 'none' == currentTransition ? 'check' : false, context: 'none', callback: doChangeTransition });
        context.push({ text: resourcesMobile.Transitions.List.slide, 'icon': 'slide' == currentTransition ? 'check' : false, context: 'slide', callback: doChangeTransition });


        showContextPanel(context, '#app-panel-settings-theme');
    }

    function configureSettingsOfDisplayDensity() {
        var oldContext = currentContext,
            currentDensity = $settings('ui.displayDensity.value'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.DisplayDensity.Label, isStatic: false, instruction: true },
            ];
        for (var t in resourcesMobile.DisplayDensity.List) {
            context.push({
                text: resourcesMobile.DisplayDensity.List[t], 'icon': t == currentDensity ? 'check' : false, context: t, callback: function (newDensity) {
                    if (newDensity != currentDensity) {
                        $window.trigger('resize');
                        $body.removeClass(displayDensityToClass(currentDensity));
                        $settings('ui.displayDensity.value', newDensity);
                        $body.addClass(displayDensityToClass(newDensity));
                        resetPageHeight();
                        userVariable('displayDensity', newDensity);
                        _displayDensity = null;
                        pageResized();
                    }
                    //showSettingsPanel(oldContext, configureSettingsOfDisplayDensity)
                }
            });
        }
        showContextPanel(context, '#app-panel-settings-display-density');
    }

    //function configureSettingsOfLabelsInForm() {
    //    var oldContext = currentContext,
    //        currentLabelsInForm = settings.labelsInForm,
    //        context = [
    //            {
    //                text: resourcesMobile.Back, icon: iconBack, callback: function () {
    //                    showSettingsPanel(oldContext);
    //                }
    //            },
    //            { text: resourcesMobile.LabelsInForm.Label, isStatic: false, instruction: true },
    //        ];
    //    for (var t in resourcesMobile.LabelsInForm.List) {
    //        context.push({
    //            text: resourcesMobile.LabelsInForm.List[t], 'icon': t == currentLabelsInForm ? 'check' : false, context: t, callback: function (newLabelsInForm) {
    //                if (newLabelsInForm != currentLabelsInForm) {
    //                    $body.removeClass('app-labelsinform-alignedright');
    //                    settings.labelsInForm = newLabelsInForm;
    //                    if (newLabelsInForm == 'AlignedRight')
    //                        $body.addClass('app-labelsinform-alignedright');
    //                    userVariable('labelsInForm', newLabelsInForm);
    //                }
    //                showSettingsPanel(oldContext, configureSettingsOfLabelsInForm)
    //            }
    //        });
    //    }
    //    showContextPanel(context, '#app-panel-settings-labels-in-form');
    //}

    function configureSettingsOfLabelsInList() {
        var oldContext = currentContext,
            currentLabelsInList = $settings('ui.list.labels.display'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.LabelsInList.Label, isStatic: false, instruction: true },
            ];
        for (var t in resourcesMobile.LabelsInList.List) {
            context.push({
                text: resourcesMobile.LabelsInList.List[t], 'icon': t == currentLabelsInList ? 'check' : false, context: t, callback: function (newLabelsInList) {
                    $settings('ui.list.labels.display', newLabelsInList);
                    userVariable('labelsInList', newLabelsInList);
                    _app.confirm(resourcesMobile.ConfirmReload, function () {
                        reloadWindow();
                    }, function () {
                        showSettingsPanel(oldContext);
                    });
                    //if (newLabelsInList != currentLabelsInList) {
                    //    $body.removeClass('app-labelsinlist-displayedabove');
                    //    settings.labelsInList = newLabelsInList;
                    //    if (newLabelsInList == 'DisplayedAbove')
                    //        $body.addClass('app-labelsinlist-displayedabove');
                    //    userVariable('labelsInList', newLabelsInList);
                    //}
                    //showSettingsPanel(oldContext, configureSettingsOfLabelsInList)
                }
            });
        }
        showContextPanel(context, '#app-panel-settings-labels-in-form');
    }

    //function configureSettingsOfButtonShapes() {
    //    var oldContext = currentContext,
    //        currentButtonShapes = settings.buttonShapes,
    //        context = [
    //            {
    //                text: resourcesMobile.Back, icon: iconBack, callback: function () {
    //                    showSettingsPanel(oldContext);
    //                }
    //            },
    //            { text: resourcesMobile.ButtonShapes, isStatic: false, instruction: true },
    //        ];

    //    function changeButtonShapes(newValue) {
    //        settings.buttonShapes = newValue;
    //        userVariable('buttonShapes', newValue);
    //        if (newValue)
    //            $body.removeClass('app-buttons-text-only');
    //        else
    //            $body.addClass('app-buttons-text-only');
    //        refreshContext();
    //        showSettingsPanel(oldContext, configureSettingsOfButtonShapes)
    //    }

    //    context.push({ text: resourcesYes, 'icon': currentButtonShapes != false ? 'check' : false, context: true, callback: changeButtonShapes });
    //    context.push({ text: resourcesNo, 'icon': currentButtonShapes == false ? 'check' : false, context: false, callback: changeButtonShapes });
    //    showContextPanel(context, '#app-panel-settings-button-shapes');
    //}

    function configureSettingsOfPromoteActions() {
        var oldContext = currentContext,
            currentPromoteActions = $settings('ui.actions.promote'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.PromoteActions, isStatic: false, instruction: true },
            ];

        function changePromoteActions(newValue) {
            $settings('ui.actions.promote', newValue);
            userVariable('promoteActions', newValue);
            refreshContext();
            showSettingsPanel(oldContext, configureSettingsOfPromoteActions)
        }

        context.push({ text: resourcesYes, 'icon': currentPromoteActions != false ? 'check' : false, context: true, callback: changePromoteActions });
        context.push({ text: resourcesNo, 'icon': currentPromoteActions == false ? 'check' : false, context: false, callback: changePromoteActions });
        showContextPanel(context, '#app-panel-promote-actions');
    }

    function configureSettingsOfInitialListMode() {

        var oldContext = currentContext,
            currentInitialListMode = $settings('ui.list.initialMode'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.InitialListMode.Label, isStatic: false, instruction: true },
            ];
        for (var t in resourcesMobile.InitialListMode.List) {
            context.push({
                text: resourcesMobile.InitialListMode.List[t], 'icon': t == currentInitialListMode ? 'check' : false, context: t, callback: function (newInitialListMode) {
                    userVariable('initialListMode', newInitialListMode);
                    _app.confirm(resourcesMobile.ConfirmReload, function () {
                        reloadWindow();
                    }, function () {
                        showSettingsPanel(oldContext);
                    });
                }
            });
        }
        showContextPanel(context, '#app-panel-settings-default-list-mode');
    }

    function configureSettingsOfSmartDates() {
        var oldContext = currentContext,
            currentSmartDates = $settings('ui.smartDates'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.Dates.SmartDates, isStatic: false, instruction: true },
            ];

        function changeSmartDates(newValue) {
            $settings('ui.smartDates', newValue);
            userVariable('smartDates', newValue);
            _app.confirm(resourcesMobile.ConfirmReload, function () {
                reloadWindow();
            }, function () {
                showSettingsPanel(oldContext);
            });
        }

        context.push({ text: resourcesYes, 'icon': currentSmartDates != false ? 'check' : false, context: true, callback: changeSmartDates });
        context.push({ text: resourcesNo, 'icon': currentSmartDates == false ? 'check' : false, context: false, callback: changeSmartDates });
        showContextPanel(context, '#app-panel-smart-dates');
    }

    function configureSettingsOfLanguage() {
        var oldContext = currentContext,
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMembershipBar.ChangeLanguageToolTip, isStatic: false, instruction: true },
            ];

        function changeCulture(culture) {
            if (!culture.selected)
                Web.Membership._instance.changeCulture(culture.value);
        }

        $(_app.cultureList).each(function () {
            var culture = this;
            context.push({ text: culture.text, 'icon': false, selected: culture.selected, context: culture, keepOpen: culture.selected, callback: changeCulture });
        });
        showContextPanel(context, '#app-panel-languages');
    }

    function sidebarIsAllowed() {
        return _screen.width >= toPhysicalWidth('md');
    }

    function configureSettingsStandalone() {
        configureSettings('left');
    }

    function configureSettings(position) {
        var context = [];
        if (!position)
            context.push({ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel });
        context.push({ text: resourcesMobile.Settings });
        if ($settingsEnabled('settings.options.displayDensity'))
            context.push({
                text: resourcesMobile.DisplayDensity.Label, 'icon': 'material-icon-blur-on', transition: true, callback: configureSettingsOfDisplayDensity, desc: resourcesMobile.DisplayDensity.List[$settings('ui.displayDensity.value')]
            });
        if ($settingsEnabled('settings.options.theme')) {
            var themeName = $settings('ui.theme.name'),
                themeAccent = $settings('ui.theme.accent');
            context.push({
                text: resourcesMobileThemes.Label, 'icon': 'material-icon-brush', transition: true, callback: configureSettingsOfThemes, desc: (resourcesMobileThemes.List[themeName] || _app.prettyText(themeName)) + (themeAccent == 'None' ? '' : (' ' + (resourcesMobileThemes.List[themeAccent] || _app.prettyText(themeAccent))))
            });
        }
        if ($settingsEnabled('settings.options.transitions'))
            context.push({
                text: resourcesMobile.Transitions.Label, 'icon': 'material-icon-swap-horiz', transition: true, callback: configureSettingsOfTransitions, desc: resourcesMobile.Transitions.List[$settings('ui.transitions.style')]
            });
        if ($settingsEnabled('settings.options.sidebar') && sidebarIsAllowed())
            context.push({
                text: resourcesMobile.Sidebar, 'icon': 'material-icon-view-quilt', transition: true, callback: configureSettingsOfSidebar, desc: $settings('ui.sidebar.when') == 'Landscape' ? resourcesMobile.Landscape : ($settings('ui.sidebar.when') == 'Always' ? resourcesMobile.Always : resourcesMobile.Never)
            });
        //if (!settings.labelsInFormDisabled)
        //    context.push({
        //        text: resourcesMobile.LabelsInForm.Label, 'icon': false, transition: true, callback: configureSettingsOfLabelsInForm, desc: resourcesMobile.LabelsInForm.List[settings.labelsInForm]
        //    });
        if ($settingsEnabled('settings.options.labelsInList'))
            context.push({
                text: resourcesMobile.LabelsInList.Label, 'icon': 'material-icon-text-format', transition: true, callback: configureSettingsOfLabelsInList, desc: resourcesMobile.LabelsInList.List[$settings('ui.list.labels.display')]
            });
        //if (!settings.buttonShapesDisabled)
        //    context.push({
        //        text: resourcesMobile.ButtonShapes, 'icon': false, transition: true, callback: configureSettingsOfButtonShapes, desc: settings.buttonShapes != false ? resourcesYes : resourcesNo
        //    });
        if ($settingsEnabled('settings.options.showSystemButtons') && !isTouchPointer)
            context.push({
                text: resourcesMobile.ShowSystemButtons, 'icon': 'material-icon-more-' + (android ? 'vert' : 'horiz'), transition: true, callback: configureSettingsOfSystemButtons, desc: $settings('ui.showSystemButtons') == 'OnHover' || $settings('ui.showSystemButtons') == 'Auto' && !isTouchPointer ? resourcesMobile.OnHover : resourcesMobile.Always
            });
        if ($settingsEnabled('settings.options.promoteActions'))
            context.push({
                text: resourcesMobile.PromoteActions, 'icon': 'material-icon-add-circle', transition: true, callback: configureSettingsOfPromoteActions, desc: $settingsEnabled('ui.actions.promote') ? resourcesYes : resourcesNo
            });
        if ($settingsEnabled('settings.options.smartDates'))
            context.push({
                text: resourcesMobile.Dates.SmartDates, 'icon': 'material-icon-event', transition: true, callback: configureSettingsOfSmartDates, desc: $settings('ui.smartDates') != false ? resourcesYes : resourcesNo
            });
        if ($settingsEnabled('settings.options.initialListMode'))
            context.push({
                text: resourcesMobile.InitialListMode.Label, 'icon': 'material-icon-list', transition: true, callback: configureSettingsOfInitialListMode, desc: resourcesMobile.InitialListMode.List[$settings('ui.list.initialMode')]
            });
        $(_app.cultureList).each(function () {
            var culture = this;
            if (culture.selected) {
                context.push({ text: culture.text, icon: 'material-icon-language', transition: true, callback: configureSettingsOfLanguage });
                return false;
            }
        });

        showContextPanel(context, '#app-panel-settings', position ? { position: position } : null);
    }

    function configureGroupBy(standalone) {

        var dataView = mobile.contextDataView(),
            expression = dataView.get_groupExpression(),
            viewLabel = dataView.get_view().Label,
            fields = dataView._fields,
            allFields = dataView._allFields,
            fieldList = [],
            context = [],
            iterator, m, index = 1, groupByField,
            groupMap = {}, groupInfo;

        if (!standalone)
            context.push({ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel });

        if (expression)
            context.push(
                { text: resourcesMobile.GroupedBy + ' ' + groupExpressionToText(dataView) + '.' },
                {
                    text: labelClear, icon: 'delete', callback: function (context, link) {
                        updateGroupExpression(dataView, null);
                    }
                });
        context.push(
            {},
            {
                text: resourcesMobile.Apply, icon: 'material-icon-check', callback: function (context, link) {
                    var groupInfoList = [];
                    $(link).closest('ul').find('.app-keep-open').each(function () {
                        var groupInfo = $(this).data('context-action').context;
                        if (groupInfo.index)
                            groupInfoList.push(groupInfo);
                    });
                    groupInfoList.sort(function (a, b) {
                        return a.index - b.index;
                    });
                    expression = '';
                    $(groupInfoList).each(function () {
                        var groupInfo = this;
                        if (expression)
                            expression += ',';
                        expression += groupInfo.field;
                    });
                    updateGroupExpression(dataView, expression);
                }
            },
            { text: String.format(resourcesMobile.GroupByField, viewLabel) });


        function maxGroupIndex(link) {
            var index = 0;
            link.closest('ul').find('.app-keep-open').each(function () {
                var context = $(this).data('context-action').context;
                if (context.index && context.index > index)
                    index = context.index;
            });
            return index;
        }

        function shiftGroupIndexDown(link, afterIndex) {
            link.closest('ul').find('.app-keep-open').each(function () {
                var context = $(this).data('context-action').context;
                if (context.index && context.index > afterIndex)
                    context.index--;
            });
        }

        function updateGroupIndexes(link) {
            link.closest('ul').find('.app-keep-open').each(function () {
                var l = $(this),
                    context = l.data('context-action').context;
                l.find('.ui-li-count').remove();
                if (context.index)
                    $('<span class="ui-li-count ui-body-inherit"/>').appendTo(l).text(context.index);
            });
        }


        if (expression) {
            iterator = sortExpressionRegex;
            m = iterator.exec(expression);
            while (m) {
                groupByField = dataView.findField(m[1]);
                if (groupByField)
                    groupMap[groupByField.Name] = { field: m[1], index: index++ };
                m = iterator.exec(expression);
            }
        }

        $(fields).each(function (index) {
            var f = this,
                originalField = f;
            f = allFields[f.AliasIndex];
            if (!originalField.Hidden && f.AllowSorting && f.Type != 'DataView')
                fieldList.push(f);
        });

        fieldList.sort(function (a, b) {
            var groupInfoA = groupMap[a.Name],
                groupInfoB = groupMap[b.Name];
            return (groupInfoA ? groupInfoA.index : 1000) - (groupInfoB ? groupInfoB.index : 1000);
        });

        $(fieldList).each(function () {
            var f = this,
                groupInfo;
            groupInfo = groupMap[f.Name];
            context.push({
                text: f.HeaderText,
                keepOpen: true,
                icon: false,
                context: groupInfo || { field: f.Name },
                count: groupInfo ? groupInfo.index : null,
                callback: function (groupInfo, link) {
                    if (groupInfo.index) {
                        shiftGroupIndexDown(link, groupInfo.index);
                        groupInfo.index = null;
                    }
                    else
                        groupInfo.index = maxGroupIndex(link) + 1;
                    updateGroupIndexes(link);
                }
            });
        });

        showContextPanel(context, '#app-panel-group-fields');
    }

    function configureSort() {

        var dataView = mobile.contextDataView(),
            expression = dataView.get_sortExpression(),
            viewLabel = dataView.get_view().Label,
            fields = dataView._fields,
            allFields = dataView._allFields,
            fieldList = [],
            context = [{ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel }],
            iterator, m, index = 1, sortByField,
            sortMap = {}, sortInfo;

        if (expression)
            context.push(
                { text: sortExpressionToText(dataView) },
                {
                    text: labelClear, icon: 'delete', callback: function (context, link) {
                        newSortExpression = '';
                        dataView.viewProp('sortExpression', newSortExpression);
                        updateSortExpressionIfChanged();
                    }
                });
        context.push(
            {
                text: resourcesMobile.Apply, icon: 'material-icon-check', callback: function (context, link) {
                    var sortInfoList = [];
                    $(link).closest('ul').find('.ui-btn').each(function () {
                        var sortInfo = $(this).data('context-action').context;
                        if (sortInfo && sortInfo.order)
                            sortInfoList.push(sortInfo);
                    });
                    sortInfoList.sort(function (a, b) {
                        return a.index - b.index;
                    });
                    newSortExpression = '';
                    $(sortInfoList).each(function () {
                        var sortInfo = this;
                        if (newSortExpression)
                            newSortExpression += ',';
                        newSortExpression += sortInfo.field + ' ' + sortInfo.order;
                    });
                    dataView.viewProp('sortExpression', newSortExpression);
                    updateSortExpressionIfChanged();
                }
            },
            { text: String.format(resourcesMobile.SortByField, viewLabel) });


        if (expression) {
            iterator = sortExpressionRegex;
            m = iterator.exec(expression);
            while (m) {
                sortByField = dataView.findField(m[1]);
                if (sortByField)
                    sortMap[sortByField.Name] = { field: m[1], index: index++, order: m[3] && m[3].match(/^desc/i) ? 'desc' : 'asc' };
                m = iterator.exec(expression);
            }
        }

        $(fields).each(function () {
            var f = this,
                originalField = f;
            f = allFields[f.AliasIndex];
            if (!originalField.Hidden && f.AllowSorting && f.Type != 'DataView')
                fieldList.push(f);
        });

        fieldList.sort(function (a, b) {
            var sortInfoA = sortMap[a.Name],
                sortInfoB = sortMap[b.Name];
            return (sortInfoA ? sortInfoA.index : 1000) - (sortInfoB ? sortInfoB.index : 1000);
        });

        function changeSortOrder(sortInfo) {
            var targetSortOption,
                index = 0;
            $(context).each(function () {
                var option = this,
                    si = option.context;
                if (si && si.field == sortInfo.field) {
                    targetSortOption = option;
                    return false;
                }
            });
            if (!sortInfo.order) {
                $(context).each(function () {
                    var option = this,
                        si = option.context;
                    if (si && si.index > targetSortOption.context.index) {
                        option.count--;
                        si.index--;
                    }
                });
                targetSortOption.context.order = null;
                targetSortOption.context.index = null;
                targetSortOption.count = null;
                targetSortOption.icon = false;
            }
            else {
                if (!targetSortOption.context.order) {
                    $(context).each(function () {
                        var si = this.context;
                        if (si && si.index > index)
                            index = si.index;
                    });
                    targetSortOption.context.index = index + 1;
                    targetSortOption.count = index + 1;
                }
                targetSortOption.icon = sortInfo.order == 'asc' ? 'arrow-u' : 'arrow-d';
                targetSortOption.context.order = sortInfo.order;
            }
            showContextPanel(context, '#app-panel-sort-fields');
        }

        $(fieldList).each(function () {
            var f = this,
                sortInfo,
                groupExpression = dataView.groupExpression();
            sortInfo = sortMap[f.Name];
            context.push({
                text: f.HeaderText,
                icon: sortInfo ? (sortInfo.order == 'asc' ? 'arrow-u' : 'arrow-d') : false,
                context: sortInfo || { field: f.Name },
                count: sortInfo ? sortInfo.index : null,
                transition: true,
                callback: function (sortInfo, link) {
                    var sortField = dataView.findField(sortInfo.field),
                        fieldOptions = [
                            {
                                text: resourcesMobile.Back, icon: iconBack, callback: function () {
                                    showContextPanel(context, '#app-panel-sort-fields');
                                }
                            },
                            { text: String.format(resourcesMobile.SortByOptions, dataView.get_view().Label, sortField.HeaderText) },
                            // optional "None" placeholder when no grouping                        
                            { text: fieldSortOrderText(sortField, 'asc'), icon: sortInfo.order == 'asc' ? 'check' : false, transition: true, reverse: true, context: { order: 'asc', field: sortInfo.field }, callback: changeSortOrder },
                            { text: fieldSortOrderText(sortField, 'desc'), icon: sortInfo.order == 'desc' ? 'check' : false, transition: true, reverse: true, context: { order: 'desc', field: sortInfo.field }, callback: changeSortOrder }
                        ];
                    if (!groupExpression || groupExpression.indexOf(sortInfo.field) == -1)
                        fieldOptions.splice(2, 0, { text: resourcesMobile.None, icon: !sortInfo.order ? 'check' : false, transition: true, reverse: true, context: { field: sortInfo.field }, callback: changeSortOrder });
                    showContextPanel(fieldOptions, '#app-panel-sort-field-options');
                }
            });
        });

        showContextPanel(context, '#app-panel-sort-fields');
    }

    function removeGroups(listview) {
        var groups = listview.find('.app-group'),
            result = groups.length ? groups.first().outerHeight(true) : 0;
        groups.remove();
        return result;
    }

    function injectGroups(dataView, listview) {
        var groupByFields = dataView.groupExpression(),
            groupByValues = [],
            firstLetterOnly = dataView.get_showFirstLetters() && !groupByFields,
            f,
            i = 0,
            lastPath, lastGroupTitle, groupItemCount, lastGroupTitleInfo, lastGroupTitleInfoText,
            checkedLoadAtTop, hasLoadAtTop, hasLoadAtBottom;
        if (!groupByFields)
            return;

        while (i < groupByFields.length) {
            f = dataView.findField(groupByFields[i]);
            if (f)
                groupByFields[i++] = dataView._allFields[f.AliasIndex];
            else
                groupByFields.splice(i, 1);
        }

        listview.find('li a').each(function () {
            var link = $(this),
                context = link.data('data-context'),
                groupText = [],
                groupLabel = [],
                groupType = [], groupTypeIsDate,
                groupValue = [],
                requiresGroup,
                group, link, pathSegment;
            if (context) {
                $(groupByFields).each(function (index) {
                    var field = this,
                        v = context.row[field.Index],
                        text, altText, monthText, yearText, path;
                    if (v != null)
                        if (firstLetterOnly)
                            text = v.substring(0, 1);
                        else
                            text = field.text(v);
                    groupText.push(text);
                    groupLabel.push(field.HeaderText);
                    groupType.push(field.Type);
                    groupValue.push(v);
                    if (!groupByValues.length || groupByValues[index] != text) {
                        groupByValues[index] = text;
                        requiresGroup = true;
                    }
                    if (requiresGroup && index == groupByFields.length - 1) {

                        if (lastGroupTitle) {
                            $('<span class="app-group-count"/>').appendTo(lastGroupTitle).text(groupItemCount + (hasLoadAtTop ? '+' : ''));
                            //lastGroupTitle.text(lastGroupTitle.attr('data-text') + ' (' + groupItemCount + (hasLoadAtTop ? '+' : '') + ')');
                            hasLoadAtTop = false;
                        }
                        group = $('<li class="app-group"/>').insertBefore(link.parent());
                        //$(iconCaratU).appendTo(group);
                        //iconCarat('up', 'small', group);
                        $('<span class="glyphicon glyphicon-menu-up"/>').appendTo(group);
                        // month/year
                        monthText = null;
                        altText = null;
                        groupTypeIsDate = groupType[groupType.length - 1].match(/^Date/);
                        if (v != null && groupType.length == 1 && groupTypeIsDate) {
                            v = groupValue[groupValue.length - 1];
                            altText = dateTimeFormat.DayNames[v.getDay()] + ' ' + v.getDate();
                            monthText = dateTimeFormat.MonthNames[v.getMonth()];
                            yearText = v.getFullYear();
                        }
                        if (monthText) {
                            lastGroupTitleInfo = $('<span class="app-group-info"/>').appendTo(group);
                            $('<span class="app-group-info-value"/>').appendTo(lastGroupTitleInfo).text(monthText);
                            $('<span class="app-group-info-value-muted"/>').appendTo(lastGroupTitleInfo).text(yearText);
                            if (lastGroupTitleInfoText != monthText)
                                lastGroupTitleInfoText = monthText;
                            else
                                lastGroupTitleInfo.addClass('app-group-info-duplicate');
                        }
                        if (groupTypeIsDate)
                            group.addClass('app-group-fixed');
                        // group path
                        groupItemCount = 0;
                        i = 0;
                        while (i < groupText.length - 1) {
                            if (!path)
                                path = $('<span class="app-group-path"/>').appendTo(group);
                            //$('<span class="app-path-label"/>').appendTo(path).text(groupLabel[i]);
                            pathSegment = $('<span class="app-group-path-value"/>').appendTo(path);
                            text = groupText[i];
                            if (!text) {
                                //pathSegment.addClass('app-null');
                                text = resourcesHeaderFilter.BlankValue;
                            }
                            pathSegment.text(text).attr('title', groupLabel[i] + ':\n' + text);
                            i++
                        }
                        // group title
                        text = altText || groupText[groupText.length - 1];
                        lastGroupTitle = $('<span class="app-group-title"/>').appendTo(group).text(text);
                        if (!text) {
                            text = resourcesHeaderFilter.BlankValue;
                            //lastGroupTitle.addClass('app-null');
                        }
                        lastGroupTitle.text(text).attr('data-text', text).attr('title', groupLabel[groupLabel.length - 1] + ':\n' + text);
                        //if (path) {
                        //    if (path.text() != lastPath)
                        //        lastPath = path.text();
                        //    else
                        //        path.remove();
                        //}

                    }
                });
                groupItemCount++;
            }
            else
                if (link.is('.dv-load-at-bottom'))
                    hasLoadAtBottom = true;
                else if (!checkedLoadAtTop && link.is('.dv-load-at-top')) {
                    hasLoadAtTop = true;
                    checkedLoadAtTop = true;
                }
        });
        if (lastGroupTitle)
            $('<span class="app-group-count"/>').appendTo(lastGroupTitle).text(groupItemCount + (hasLoadAtBottom ? '+' : ''));
        //lastGroupTitle.text(lastGroupTitle.attr('data-text') + ' (' + groupItemCount + (hasLoadAtBottom ? '+' : '') + ')');
    }

    function dataViewIsFiltered(dataView) {
        var filter = dataView.get_filter(),
            externalFilter = dataView._externalFilter || [];
        return filter && filter.length && externalFilter.length < filter.length || advancedSearchFilter(dataView).length;
    }

    function updateApplyFilterButton(enable) {
        var btn = $('.ui-panel-open .app-btn-apply,.ui-popup-active .app-btn-apply');
        if (!btn.is('.app-enabled'))
            if (enable)
                btn.removeClass('ui-disabled');
            else
                btn.addClass('ui-disabled');
    }

    function ensureSvgIcon(link) {
        var isIncluded = link.is('.app-include');
        link.find('.app-icon').text(isIncluded ? 'check_box' : 'check_box_outline_blank').toggleClass('material-icon-check-box', isIncluded).toggleClass('material-icon-check-box-outline-blank', !isIncluded);

        //if (link.is('.app-checked')) {
        //    if (!icon.length)
        //        materialIcon('material-icon-check-box', link);
        //    item.addClass('app-checked');
        //}
        //else {
        //    icon.remove();
        //    item.removeClass('app-checked');
        //    materialIcon('material-icon-check-box-empty-outline', link);
        //}
    }

    function dataValueOptionClicked(item, link) {
        var selectAll = selectAllOption(link),
            options = dataValueOptions(link),
            includeCount,
            selectAllIsChecked;
        link.toggleClass('app-include');
        includeCount = options.filter('.app-include').length;
        selectAllIsChecked = options.length == includeCount;
        ensureSvgIcon(link);
        selectAll.find('.app-icon').text(selectAllIsChecked ? 'check_box' : 'check_box_outline_blank').toggleClass('material-icon-check-box', selectAllIsChecked).toggleClass('material-icon-check-box-outline-blank', !selectAllIsChecked);
        updateApplyFilterButton(includeCount > 0);
    }

    function selectAllOption(link) {
        return link.closest('.ui-panel-inner').find('.app-btn-select-all a');
    }

    function dataValueOptions(link) {
        return selectAllOption(link).parent().nextAll().find('a');
    }

    function contextOption(link) {
        if (link.length > 0)
            return link.data('data-context') || link.data('context-action');
        return null;
    }

    function applyValueFilter(context, sender) {
        var dataView = _app.find(context.dataViewId),
            fieldName = context.field,
            field = dataView.findField(fieldName),
            aliasField = dataView._allFields[field.AliasIndex],
            filter = composeValueFilter(dataView, fieldName, sender);

        dataView.removeFromFilter(aliasField);
        if (filter)
            dataView._filter.push(filter);
        applyDataFilter(dataView);
    }

    function composeValueFilter(dataView, fieldName, sender) {
        var field = dataView.findField(fieldName),
            aliasField = dataView._allFields[field.AliasIndex],
            filter = [],
            values,
            useValues,
            options = dataValueOptions(sender);

        function enumerateValues(inlcudeSelected) {
            values = []
            options.each(function () {
                var link = $(this),
                    selected = link.is('.app-include');
                if (selected && inlcudeSelected || !selected && !inlcudeSelected)
                    values.push(dataView.convertFieldValueToString(field, field._listOfValues[contextOption(link).context]));
            });
        }
        if (options.filter(':not(.app-include)').length) {
            enumerateValues(true);
            if (values.length) {
                filter.push(aliasField.Name + ':');
                if (values.length == 1)
                    filter.push('=' + values[0]);
                else {
                    useValues = values.length <= 10 || values.length <= values.length / 2;
                    filter.push(useValues ? '$in$' : '$notin$');
                    if (!useValues)
                        enumerateValues(false);
                    $(values).each(function (index) {
                        if (index > 0)
                            filter.push('$or$');
                        filter.push(this);
                    });
                }
            }
        }
        return filter.join('');
    }

    function configureFilter(options) {
        var everythingMode,
            fieldFilterMode,
            scopeField;
        if (typeof options == 'object') {
            if (options._dataView)
                scopeField = options;
            else if (options.scopeField) {
                scopeField = options.scopeField;
            }
            else if (options.mode == 'everything')
                everythingMode = true;
            else if (options.mode == 'field')
                fieldFilterMode = true;
        }

        function enumerateFieldFilterOptions(field, context, filterDesc) {
            var dataView = field._dataView,
                aliasField = dataView._allFields[field.AliasIndex],
                filterFunc = dataView.get_fieldFilter(aliasField, true);
            if (!scopeField) {
                context.push({ text: resourcesMobile.Back, icon: iconBack, callback: configureFieldFilterOptions });
                context.push({ text: aliasField.HeaderText });
            }
            context.push({});
            if (filterFunc)
                context.push({
                    text: labelClear, context: aliasField.Name,
                    callback: function () {
                        dataView.removeFromFilter(aliasField);
                        applyDataFilter(dataView);
                    },
                    icon: 'material-icon-clear'
                });
            context.push({
                text: resourcesData.Filters[aliasField.FilterType].Text, context: { id: dataView._id, field: dataView._allFields[field.OriginalIndex].Name },
                desc: filterFunc != '$in' && filterFunc != '$notin' ? filterDesc : null,
                callback: function (context) {
                    _app.search('show', context);
                },
                transition: false,
                icon: 'material-icon-filter-list'
            });
            if (!scopeField)
                context.push({ text: String.format(resourcesMobile.FilterByOptions, dataView.get_view().Label, aliasField.HeaderText, resourcesMobile.Apply) });
        }

        function enumerateFieldFilterValues(field, context) {
            var i, v, t,
                dataView = field._dataView,
                listOfValues = field._listOfValues || [],
                aliasField = dataView._allFields[field.AliasIndex],
                filterFunc = dataView.get_fieldFilter(aliasField, true),
                contextNotSelected = [],
                applyOption,
                filterValues,
                ff, option, isSelected,
                filterFuncIsNotIn = filterFunc == '$notin';
            if (filterFunc && (filterFunc == '=' || filterFunc == '$in' || filterFuncIsNotIn))
                filterValues = (dataView.get_fieldFilter(aliasField) || '').split(/\$or\$/);
            applyOption = { text: resourcesMobile.Apply, icon: 'material-icon-check', disabled: true, itemClassName: 'app-btn-apply', context: { dataViewId: dataView._id, mappedId: dataView._mappedId, field: field.Name }, callback: applyValueFilter };
            context.push(applyOption, {});
            if (listOfValues.length > 1)
                context.push({
                    text: resourcesDataFiltersLabels.SelectAll, keepOpen: true, itemClassName: 'app-btn-select-all', icon: 'material-icon-check-box-outline-blank', callback: function (item, sender) {
                        var dataOptions = dataValueOptions(sender),
                            everythingIsSelected = dataOptions.filter('.app-include').length == dataOptions.length;
                        selectAllOption(sender).find('.app-icon').text(everythingIsSelected ? 'check_box_outline_blank' : 'check_box').toggleClass('material-icon-check-box', !everythingIsSelected).toggleClass('material-icon-check-box-outline-blank', everythingIsSelected);
                        if (everythingIsSelected)
                            dataOptions.removeClass('app-include').find('.app-icon').text('check_box_outline_blank').removeClass('material-icon-check-box').addClass('material-icon-check-box-outline-blank');
                        else
                            dataOptions.addClass('app-include').find('.app-icon').text('check_box').addClass('material-icon-check-box').removeClass('material-icon-check-box-outline-blank');
                        updateApplyFilterButton(!everythingIsSelected);
                    }
                });
            for (i = 0; i < listOfValues.length; i++) {
                v = listOfValues[i];
                isSelected = filterValues && filterValues.indexOf(dataView.convertFieldValueToString(field, v)) != -1;
                if (filterFuncIsNotIn)
                    isSelected = !isSelected;
                if (v == null)
                    t = resourcesHeaderFilter.EmptyValue;
                else if (typeof v == 'string' && v == '')
                    t = resourcesHeaderFilter.BlankValue;
                else
                    t = aliasField.text(v);
                option = { text: t, icon: 'material-icon-' + (isSelected ? 'check-box' : 'check-box-outline-blank'), keepOpen: true, context: i, callback: dataValueOptionClicked, linkClassName: isSelected ? 'app-include' : '' }
                if (isSelected) {
                    if (filterFuncIsNotIn)
                        contextNotSelected.push(option);
                    else
                        context.push(option)
                    //if (applyOption.disabled) {
                    //    applyOption.disabled = false;
                    //    applyOption.itemClassName += ' app-enabled';
                    //}
                }
                else
                    if (filterFuncIsNotIn)
                        context.push(option);
                    else
                        contextNotSelected.push(option);
            };
            return context.concat(contextNotSelected);
        }

        function showFieldFilterPanel(contextFieldName, link) {
            var fieldContext = [],
                contextDataView = mobile.contextDataView(),
                contextField = contextDataView.findField(contextFieldName),
                f = contextDataView._allFields[contextField.AliasIndex],
                contextAction = $(link).data('contextAction'),
                filterDesc = contextAction ? contextAction.desc : null;

            //fieldContext = [{ text: resourcesMobile.Back, icon: iconBack, callback: configureFieldFilterOptions }];
            //fieldContext.push({ text: String.format(resourcesMobile.FilterByOptions, contextDataView.get_view().Label, f.HeaderText, resourcesMobile.Apply) });
            enumerateFieldFilterOptions(f, fieldContext, filterDesc);
            if (fieldFilterMode)
                fieldContext.splice(0, 1);

            //if (fieldFilterMode) 
            //    contextField._listOfValues = options.values;

            if (contextField._listOfValues && contextField._listOfValues.length)
                fieldContext = enumerateFieldFilterValues(contextField, fieldContext);
            else
                fieldContext.push({
                    text: loadingStatusText, icon: 'material-icon-refresh', animate: true, context: { id: contextDataView._id, field: contextFieldName }, keepOpen: true, callback: nop
                });


            showContextPanel(fieldContext, '#app-panel-filter-field', {
                position: 'right',
                resetScrolling: true,
                afteropen: function () {
                    var contextAction = progressIndicatorInPanel().data('context-action'),
                        contextInfo = contextAction && contextAction.context,
                        targetDataView, targetFields, filterField;
                    if (contextInfo) {
                        targetDataView = _app.find(contextInfo.id),
                            filterField = targetDataView.findField(contextInfo.field);
                        targetFields = targetDataView._allFields;
                        targetDataView._loadListOfValues(null, filterField.Name, targetFields[filterField.AliasIndex].Name, function () {
                            // refresh panel
                            var currentProgressIndicator = progressIndicatorInPanel(),
                                currentContextInfo = currentProgressIndicator.length && currentProgressIndicator.data('context-action').context,
                                newFieldContext = [];
                            if (currentProgressIndicator.length && currentContextInfo.id == targetDataView._id && currentContextInfo.field == filterField.Name) {
                                //newFieldContext = [{ text: resourcesMobile.Back, icon: iconBack, callback: configureFieldFilterOptions }];
                                //newFieldContext.push({ text: String.format(resourcesMobile.FilterByOptions, targetDataView.get_view().Label, targetFields[filterField.AliasIndex].HeaderText, resourcesMobile.Apply) });
                                enumerateFieldFilterOptions(filterField, newFieldContext, filterDesc);
                                if (fieldFilterMode)
                                    newFieldContext.splice(0, 1);

                                newFieldContext = enumerateFieldFilterValues(filterField, newFieldContext);
                                mobile.refreshContextMenu(currentProgressIndicator.closest('.ui-panel'), newFieldContext, '[data-panel="#app-panel-filter-field"]');
                            }
                        });
                    }
                }
            });
        }

        function configureFieldFilterOptions() {
            var sourceDataView = mobile.contextDataView(),
                context = everythingMode ? [] : [{ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel }],
                filterMap = {},
                originalFilter = sourceDataView && sourceDataView._filter,
                advancedFilter;


            if (dataViewIsFiltered(sourceDataView)) {
                if (everythingMode && advancedSearchFilter(sourceDataView).length) {
                    if (!sourceDataView._filter.length) {
                        _app.search();
                        return;
                    }
                    context.push({ text: advancedFilterStatus(sourceDataView) });
                    context.push(
                        { text: resourcesGrid.ShowAdvancedSearch, icon: 'search', toolbar: false, system: true, context: { dataViewId: sourceDataView._id }, callback: startSearchCallback });
                    //context.push({
                    //    text: resourcesGrid.ResetAdvancedSearch, icon: 'material-icon-clear-all', callback: function () {
                    //        var dataView = mobile.contextDataView();
                    //        dataView.viewProp('advancedSearchFilter', null);
                    //        applyDataFilter(dataView);
                    //    }
                    //});
                }
                if (sourceDataView._filter.length) {
                    context.push({ text: sourceDataView.extension().filterStatus(false, true) });
                    context.push({
                        text: /*resourcesData.Filters.Labels.Clear*/resourcesMobile.ClearFilter, icon: 'delete', callback: function () {
                            var dataView = mobile.contextDataView();
                            clearDataFilter(dataView, true);
                        }
                    });
                }
            }

            context.push({ text: String.format(resourcesMobile.FilterByField, sourceDataView.get_view().Label) });

            $(sourceDataView._filter).each(function () {
                var fieldFilter = this,
                    m = fieldFilter.match(/^\w+/);
                if (m)
                    filterMap[m[0]] = fieldFilter;
            });
            $(sourceDataView._externalFilter).each(function () {
                filterMap[this.Name] = null;
            });

            $(sourceDataView._fields).each(function () {
                var originalField = this,
                    f,
                    sorted,
                    fieldFilter,
                    filterDesc;
                f = sourceDataView._allFields[originalField.AliasIndex];
                fieldFilter = filterMap[f.Name]
                if (fieldFilter) {
                    sourceDataView._filter = [fieldFilter];
                    filterDesc = sourceDataView.extension().filterStatus(true, true);
                    if (filterDesc.indexOf(f.HeaderText) == 0) {
                        filterDesc = filterDesc.substring(f.HeaderText.length).trim();
                        if (filterDesc.length > 2)
                            filterDesc = filterDesc.charAt(0).toUpperCase() + filterDesc.slice(1);
                    }
                }
                if (!originalField.Hidden && f.AllowQBE && f.Type != 'DataView')
                    context.push({
                        text: f.HeaderText,
                        context: originalField.Name,
                        icon: fieldFilter ? 'filter' : false,
                        desc: filterDesc,
                        transition: true,
                        callback: showFieldFilterPanel
                    });
                sourceDataView._filter = originalFilter;
            });
            showContextPanel(context, '#app-panel-filter');
        }

        if (scopeField) {
            var context = []
            enumerateFieldFilterOptions(scopeField, context);

            if (options.samples != false)
                if (scopeField._listOfValues && scopeField._listOfValues.length)
                    context = enumerateFieldFilterValues(scopeField, context);
                else
                    context.push({
                        text: loadingStatusText, icon: 'refresh', animate: true, context: { id: scopeField._dataView._id, field: scopeField.Name }, keepOpen: true, callback: nop
                    });
            return context;
        }
        else if (options && options.mode == 'field') {
            showFieldFilterPanel(options.field);
        }
        else
            configureFieldFilterOptions();
    }

    function enumerateAvailableViews(context, skipSelectedView, pageInfo, useTabs, useIcons) {
        if (!pageInfo)
            pageInfo = getPageInfo();
        var dataView = pageInfo && pageInfo.dataView,
            currentView = dataView && dataView.get_view(),
            countOfViews = 0,
            headerText, viewItem, viewList = [];
        if (dataView && dataView.get_isGrid() && dataView.get_showViewSelector()) {
            $(dataView.get_views()).each(function () {
                var view = this;
                if (!(skipSelectedView && view.Id == currentView.Id))
                    if (view.Type != 'Form' && view.ShowInSelector || view.Id == currentView.Id)
                        viewList.push(view);
            });
            if (viewList.length > 1)
                $(viewList).each(function () {
                    var view = this,
                        viewLabel = view.Label,
                        selected = viewLabel == currentView.Label;
                    viewItem = {
                        text: viewLabel, radio: true, icon: selected ? 'check' : (skipSelectedView ? '' : false), context: countOfViews, callback: function (viewIndex) {
                            //mobile.contextScope(null);
                            var tabs = $.find('#' + pageInfo.id + ' .ui-content > .app-tabs-views .ui-btn'),
                                echo;
                            if (useTabs && tabs.length)
                                $(tabs[viewIndex]).trigger('vclick', { selectedTab: viewLabel });
                            else {
                                dataView._forceSync();
                                dataView.extension()._commandRow = null;
                                dataView._requestedSortExpression = dataView.pageProp(view.Id + '_sortExpression');
                                dataView._requestedFilter = dataView.pageProp(view.Id + '_filter');
                                dataView.executeCommand({ commandName: 'Select', commandArgument: view.Id });

                                dataView.pageProp('viewId', view.Id)
                                if (useTabs && !tabs.length)
                                    pageVariable(pageInfo.id + '_viewTabs', viewLabel);

                                if (pageInfo.id == getActivePageId()) {
                                    //headerText = view.Label;
                                    //if (pageInfo.headerText && pageInfo.headerText != headerText)
                                    //    headerText += ' - ' + pageInfo.headerText;
                                    //pageHeaderText(headerText);
                                    if (pageInfo.headerText != false)
                                        pageHeaderText(viewLabel);
                                    removeStickyHeaderTemplate();
                                    resetInstruction(dataView);
                                    refreshContext();
                                }
                            }
                        }
                    };
                    if (useIcons) {
                        viewItem.radio = false;
                        viewItem.selected = viewItem.icon == 'check';
                        viewItem.icon = 'material-icon-folder' + (viewItem.icon == 'check' ? '-open' : '');
                        viewItem.depth = 1;
                        //viewItem.depth = viewLabelSegments.length;
                    }
                    context.push(viewItem);
                    countOfViews++;
                });
        }
        return countOfViews;
    }

    function menuItemNodeCallback(node) {
        var url = node.url,
            m = url.match(/^((\_\w+)\:)/),
            callback;
        if (m)
            _window.open(url.substring(m[0].length), m[2]);
        else {
            if (url.match(/^http(s)?\:/))
                callback = mobile.openExternalUrl(url);
            if (callback)
                callback();
            else {
                _app._navigated = true;
                _window.location.href = url;
            }

        }
    }

    function markMenuItemAsSelected(n, className, option) {
        if (n.selected) {
            option.selected = true;
            $(n.children).each(function () {
                if (this.selected) {
                    option.selected = false;
                    return false;
                }
            });
            if (option.selected && className) {
                option.linkClassName = className;
                option.selected = false;
            }
        }
        return option;
    }

    function enumerateMenuItems(context, allowIcons, nodes, depth, more) {
        if (!nodes) {
            nodes = menu.nodes;
            if (nodes) {
                if ($settingsEnabled('ui.menu.apps.tiles') && allowIcons) {
                    var nodesWithIcons = menu.nodesWithIcons,
                        numberOfIcons = nodesWithIcons.length;
                    $(nodesWithIcons).each(function () {
                        var n = this, icon = n.icon;
                        n = n.node;
                        context.push(markMenuItemAsSelected(n, 'app-item-selected', { text: n.title, context: n, icon: icon, icon: allowIcons && n.icon ? n.icon : false, callback: n.url ? menuItemNodeCallback : nop, keepOpen: !n.url, itemClassName: 'app-item-tile', tooltip: n.description }));
                    });
                    if (numberOfIcons) {
                        if (numberOfIcons % 3)
                            for (var i = numberOfIcons % 3; i < 3; i++)
                                context.push({ text: ' ', icon: false, callback: nop, itemClassName: 'app-item-tile app-item-tile-stub' });
                        if (numberOfIcons < menu.nodeCount && more != false)
                            context.push({}, { text: labelMore, icon: 'material-icon-apps', transition: true, callback: showAllApps, itemClassName: 'app-item-tile-more' });
                    }
                    else
                        enumerateMenuItems(context, allowIcons, nodes, 1);
                }
                else
                    enumerateMenuItems(context, allowIcons, nodes, 1);
            }
        }
        else {
            $(nodes).each(function () {
                var n = this,
                    children = n.children,
                    option = markMenuItemAsSelected(n, null, { text: n.title, context: n, icon: false, depth: depth, icon: allowIcons && n.icon ? n.icon : false, callback: n.url ? menuItemNodeCallback : nop, keepOpen: !n.url, tooltip: n.description });
                context.push(option);
                if (children)
                    enumerateMenuItems(context, allowIcons, children, depth + 1);
            });
        }
    };

    function enumerateViewOptions(context, includeInstructions, showViewStyles) {
        var dataView = mobile.contextDataView(),
            extension = dataView.extension();
        if (!extension) return; // may not be available for echo that has not been initialized yet
        var viewStyle = extension.viewStyle(),
            echoMode = dataView != mobile.dataView(),
            styles = [];
        if (enumerateAvailableViews(context, null, mobile.contextPageInfo(), true) == 1)
            context.splice(context.length - 2, 2);
        if (dataView.get_isGrid() && dataView.get_showViewSelector()) {
            if (includeInstructions == false) {
                if (context.length)
                    context.push({});
            }
            else
                context.push({ text: resourcesMobile.PresentationStyle });
            if (showViewStyles == null || showViewStyles == true) {
                if (!extension.tagged('view-style-grid-disabled'))
                    context.push({
                        text: resourcesMobile.Grid, icon: viewStyle == 'Grid' ? 'check' : false, radio: true, callback: function () {
                            extension.viewStyle('Grid');
                        }
                    });
                if (!extension.tagged('view-style-list-disabled'))
                    context.push({
                        text: resourcesMobile.List, icon: viewStyle == 'List' ? 'check' : false, radio: true, callback: function () {
                            extension.viewStyle('List');
                        }
                    });
                if (!extension.tagged('view-style-cards-disabled'))
                    context.push({
                        text: resourcesMobile.Cards, icon: viewStyle == 'Cards' ? 'check' : false, radio: true, callback: function () {
                            if (extension.viewStyle() != 'Cards') {
                                extension.viewStyle('Cards');
                            }
                        }
                    });
                if (!echoMode && !extension.tagged('view-style-map-disabled')) {
                    if (extension.tagged('supports-view-style-map'))
                        context.push({
                            text: resourcesMobile.Map, icon: viewStyle == 'Map' ? 'check' : false, radio: true, callback: function () {
                                extension.viewStyle('Map');
                            }
                        });
                }
                mobile.presenter('enumerate', { id: dataView._id, list: styles });
                $(styles).each(function () {
                    var style = this;
                    if (!extension.tagged('view-style-' + style.name.toLowerCase() + '-disabled')) {
                        style.icon = style.name == viewStyle ? 'check' : false;
                        style.radio = true;
                        context.push(style);
                    }
                });
            }
        }
        //context.push({});
        //context.push({
        //    text: resourcesPager.Refresh, icon: 'refresh', callback: function () {
        //        dataView.sync();
        //    }
        //});
        enumerateDataViewOptions(dataView, context);
    }

    function configureView(options) {
        if (!options)
            options = {};
        var context = [];
        if (options.position != 'left')
            context.push({ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel });
        context.push({ text: resourcesMobile.AlternativeView });

        enumerateViewOptions(context);
        showContextPanel(context, '#app-panel-view-options', options);
    }

    function addSelectAction(dataView, list, row) {
        var extension = dataView.extension(),
            dataViewId = dataView._id,
            field = dataView._allFields[dataView._fields[0].AliasIndex],
            mapInfo, listLength = list.length;
        if (row && row.length && !extension.inserting() && list.isSideBar == false /*&& !sidebarIsVisible()*/) {
            mobile.enumerateFields(dataView, list, null, row);

            if (listLength < list.length) {
                var infoItem = list[listLength];
                //infoItem.icon = 'info';
                //infoItem.theme = 'b';
                infoItem.icon = 'material-icon-info-outline';
                infoItem.transition = true;
                infoItem.context = { id: dataViewId };
                infoItem.callback = showInfoView;
            }

        }
    }

    function enumerateSpecialActionContextOptions(dataView, list, row) {
        if (row)
            $(dataView._fields).each(function () {
                var field = dataView._allFields[this.AliasIndex],
                    phoneFlag = isPhoneField(field, true),
                    emailFlag = isEmailField(field, true);
                if (phoneFlag || emailFlag) {
                    var v = row[field.Index];
                    if (v != null) {
                        if (phoneFlag)
                            list.push({
                                text: field.text(v), desc: field.HeaderText, icon: 'phone', href: 'tel:' + v, system: true
                            });
                        else if (emailFlag)
                            list.push({
                                text: field.text(v), desc: field.HeaderText, icon: 'email', href: 'mailto:' + v, system: true
                            });
                    }
                }
            });
    }
    var materialIconMap = {
        plus: 'add',
        edit: 'edit',
        trash: 'delete',
        duplicate: 'content-copy',
        search: 'search',
        phone: 'phone',
        email: 'email',
        power: 'power-settings-new',
        user: 'account-circle',
        account: 'perm-identity',
        refresh: 'refresh',
        apps: 'apps'
    };

    function toMaterialIcon(icon) {
        var newIcon = materialIconMap[icon];
        //switch (icon) {
        //    //case 'plus':
        //    //    newIcon = 'add'; 
        //    //    break;
        //    //case 'edit':
        //    //    newIcon = 'edit';
        //    //    break;
        //    //case 'trash':
        //    //    newIcon = 'delete';
        //    //    break;
        //    //case 'duplicate':
        //    //    newIcon = 'content-copy';
        //    //    break;
        //    case 'search':
        //        newIcon = 'search';
        //        break;
        //    case 'phone':
        //        newIcon = 'phone';
        //        break;
        //    case 'email':
        //        newIcon = 'email';
        //        break;
        //    case 'power':
        //        newIcon = 'power-settings-new';
        //        break;
        //    case 'account':
        //        newIcon = 'perm-identity';
        //        break;
        //}
        //ne
        return newIcon ? 'material-icon-' + newIcon : icon;
    }

    function actionToIcon(action) {
        var icon = null,
            cssClass = action.CssClass;
        if (cssClass && iconIsMaterial(cssClass))
            icon = cssClass;
        //if (cssClass) {
        //    icon = cssClass.match(/\bui-icon-([\w-]+)\b/);
        //    if (icon)
        //        icon = icon[1];
        //    else {
        //        icon = cssClass.match(/\bmaterial_icon_(.+?)\b/);
        //        if (icon)
        //            icon = icon[0];
        //        else {
        //            icon = cssClass.match(/\bglyphicon-([\w\-]+)\b/);
        //            if (icon)
        //                icon = icon[0];
        //        }
        //    }
        //}
        if (!icon) {
            switch (action.CommandName) {
                case 'Delete':
                    icon = 'delete';
                    break;
                case 'New':
                    icon = 'add';
                    break;
                case 'Edit':
                    icon = 'edit';
                    break;
                case 'Insert':
                case 'Update':
                case 'Confirm':
                    icon = action.CommandArgument == 'SaveAndNew' ? 'add' : 'check';
                    break;
                case 'Cancel':
                    icon = 'undo';
                    break;
                case 'Duplicate':
                    icon = 'content-copy';
                    break;
                case 'Select':
                    icon = 'arrow-forward';
                    break;
                case 'ExportCsv':
                    icon = 'file-download'
                    break;
                case 'ExportRowset':
                    icon = 'grid-on';
                    break;
                case 'ExportRss':
                    icon = 'rss-feed';
                    break;
                case 'ReportAsPdf':
                    icon = 'picture-as-pdf';
                    break;
                case 'ReportAsImage':
                    icon = 'collections';
                    break;
                case 'ReportAsExcel':
                    icon = 'filter-none';
                    break;
                case 'ReportAsWord':
                    icon = 'library-books';
                    break;
                case 'Search':
                    icon = 'search';
                    break;
                case 'BatchEdit':
                    icon = 'done-all';
                    break;
                case 'Import':
                    icon = 'file-upload';
                    break;
                default:
                    icon = false;
                    break;
            }
            if (icon)
                icon = 'material-icon-' + icon;
        }
        return icon;
    }

    function controllerActionCallbackExecuteCommand(context) {
        var dataView = _app.find(context.dataViewId),
            row = context.row,
            action = context.action,
            actionCommandName = action.CommandName;

        if (dataView.editing()) {
            var causesValidation = action.CausesValidation && actionCommandName != 'Cancel';
            _input.cancel(causesValidation);
            if (causesValidation && !_input.valid())
                return;
        }
        hideTooltip();
        if (actionCommandName == 'Edit')
            checkIfMultiSelect(dataView);
        dataView.extension().command(row, actionCommandName, context.argument, causesValidation, action.Path);
    }

    function controllerActionCallback(context) {
        mobile.contextScope(null);
        context = context.action;

        var dataView = _app.find(context.dataViewId),
            action = context.action,
            group = context.group,
            groupIndex = context.groupIndex,
            actionIndex = context.actionIndex;
        if (dataView._busy()) return;

        if (!String.isNullOrEmpty(action.Confirmation)) {
            // , scope: scope, actionIndex: actionIndex, rowIndex: rowIndex, groupIndex: groupIndex 
            dataView._confirm({ action: action, scope: group.Scope, actionIndex: actionIndex, rowIndex: 0, groupIndex: groupIndex }, function (text) {
                _app.confirm(text, function () {
                    controllerActionCallbackExecuteCommand(context);
                });
            });
        }
        else
            controllerActionCallbackExecuteCommand(context);
    }

    function enumerateActions(scope, dataView, list, row, defaultSpecialActionArgument) {
        var rowIsSelected = dataView.rowIsSelected(row),
            item,
            listedActions = [],
            rowGroups,
            viewId = dataView.get_viewId(),
            isGrid = dataView.get_isGrid(),
            skippedActions = {},
            isSpecialAction, specialActionPlaceholder,
            callback,
            showActionButtons = dataView.get_showActionButtons() != 'None',
            exceptionsRegex = !isTouchPointer ? /^(DataSheet|Grid)$/ : /^(DataSheet|Grid|Export(Rowset|Rss))$/;

        function argumentIsGrid(viewId) {
            var i,
                views = dataView._views;
            for (i = 0; i < views.length; i++)
                if (views[i].Id == viewId)
                    return views[i].Type != 'Form';
            return false;
        }

        //dataView._editing = dataView.editing();

        $(dataView.actionGroups(scope)).each(function (groupIndex) {
            var group = this,
                groupScope = group.Scope;
            if (groupScope == 'ActionBar' && !group.Flat && group.Id != scope)
                list.push({
                    text: group.HeaderText, icon: false, transition: true, uiScope: groupScope, group: group.Id, context: { group: group, isSideBar: list.isSideBar }, 'callback': function (context) {
                        currentContext = [];
                        if (!context.isSideBar)
                            currentContext.push({
                                text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel
                            });
                        currentContext.push({ text: group.HeaderText });
                        enumerateActions(context.group.Id, dataView, currentContext, row);
                        showContextPanel(currentContext, '#app-panel-group-actions', context.isSideBar ? { position: 'left' } : null);
                    }
                });
            else if (!group.Scope.match(/Grid|ActionColumn/) || rowIsSelected && isGrid || group.Flat)
                $(this.Actions).each(function (actionIndex) {
                    var action = this,
                        actionCommandName = action.CommandName,
                        actionCommandArgument = action.CommandArgument,
                        shortcut = action.Key,
                        signature = actionCommandName + '/' + actionCommandArgument + '/' + action.HeaderText,
                        allowInList = listedActions.indexOf(signature) == -1 && (!actionCommandName || !actionCommandName.match(exceptionsRegex)) && (!group.Flat || action.HeaderText);
                    callback = actionCommandName ? controllerActionCallback : null;
                    specialActionPlaceholder = null;
                    if (allowInList) {
                        isSpecialAction = actionCommandName && actionCommandName.match(/^(Select|Edit|New|Duplicate)$/);
                        if (isSpecialAction && isGrid && (!actionCommandArgument || argumentIsGrid(actionCommandArgument)))
                            // allow "Edit" command with argument in "Grid" scope if the default "edit" form view is specified
                            if (defaultSpecialActionArgument && actionCommandName == 'Edit')
                                actionCommandArgument = defaultSpecialActionArgument;
                            else {
                                skippedActions[actionCommandName] = list[list.length - 1];
                                allowInList = false;
                            }
                        else if (isSpecialAction)
                            specialActionPlaceholder = skippedActions[actionCommandName];
                    }
                    if (allowInList && (!callback && group.Scope.match(/Grid|ActionColumn/) || group.Scope == 'Form' && !showActionButtons))
                        allowInList = false;
                    if (allowInList) {
                        listedActions.push(signature);
                        item = {
                            'text': action.HeaderText, 'callback': callback, 'icon': actionToIcon(action), uiScope: groupScope, group: group.Id, path: action.Path, 'command': actionCommandName, 'argument': actionCommandArgument, tooltip: action.Description,
                            context: { action: { dataViewId: dataView._id, row: row, group: group, groupIndex: groupIndex, action: action, actionIndex: actionIndex, argument: actionCommandArgument } }
                        };
                        if (shortcut)
                            item.shortcut = shortcut;
                        if (specialActionPlaceholder)
                            Array.insert(list, list.indexOf(specialActionPlaceholder) + 1, item);
                        else
                            list.push(item);
                    }
                });
        });

        dataView._editing = null;
    }

    function createItemMap(dataView, listMode) {
        var fields = dataView._fields,
            allFields = dataView._allFields,
            map = (listMode && dataView._listItemMap && dataView._listItemMap[dataView._viewId]) || (!listMode && dataView._cardItemMap && dataView._cardItemMap[dataView._viewId]) || {
                heading: null, thumb: null, aside: null, count: null, desc: [], descOriginal: [], descRwd: [], descLabels: [], descLabelsRwd: [], /* descCaptions: [], descCaptionsRwd: [], */
                descPara: [], descColumn: [], descColumnCount: 0
            },
            tagged,
            currentDescIndex;

        if (map.cached)
            return map;

        function iterateFields(tagPrefix, callback) {
            $(allFields).each(function (index) {
                var field = allFields[index],
                    fieldIndex = field.AliasIndex,
                    aliasField = allFields[fieldIndex];
                if (!field.Hidden && !aliasField.GroupBy && (tagged || field.tagged(tagPrefix)))
                    callback.call(field, fieldIndex);
            });
        }

        function buildMap(tagPrefix) {
            iterateFields(tagPrefix, function (fieldIndex) {
                var field = this,
                    isDesc = field.tagged(tagPrefix + 'desc'),
                    isPara = field.tagged(tagPrefix + 'para'),
                    isColumn = field.tagged(tagPrefix + 'column'),
                    isNoLabel = field.tagged(tagPrefix + 'nolabel'),
                    labeled = (field.tagged(tagPrefix + 'label') || isDesc || isPara || isColumn) && !isNoLabel,
                    labelRwd = _app.tagSuffix,
                    isCount = field.tagged(tagPrefix + 'count'),
                    isAside = field.tagged(tagPrefix + 'aside'),
                    isHeading = field.tagged(tagPrefix + 'heading'),
                    isThumb = field.tagged(tagPrefix + 'thumb'),
                    columns;
                if (field.tagged(tagPrefix + 'none'))
                    return;
                if (tagged && !(isHeading || isDesc || isCount || isAside || isNoLabel || isPara || isColumn))
                    if (map.heading == null)
                        map.heading = fieldIndex;
                    else if (map.thumb == null && field.OnDemand && field.OnDemandStyle != 1)
                        map.thumb = fieldIndex;
                    else {
                        isDesc = true;
                        labeled = true;
                    }
                if (isHeading)
                    map.heading = fieldIndex;
                if (labeled && !(isCount || isAside) || isNoLabel) {
                    map.desc.push(fieldIndex);
                    currentDescIndex = map.desc.length - 1;
                    if (_app.tagSuffix)
                        map.descRwd[currentDescIndex] = _app.tagSuffix;
                    if (labeled) {
                        map.descLabels[currentDescIndex] = true;
                        if (labelRwd)
                            map.descLabelsRwd[currentDescIndex] = labelRwd;
                    }
                    if (isPara)
                        map.descPara[currentDescIndex] = true;
                    if (isColumn) {
                        map.descColumn[currentDescIndex] = true;
                        columns = field.Columns;
                        map.descColumnCount++;
                    }
                }
                if (isCount) {
                    map.count = fieldIndex;
                    map.countRwd = _app.tagSuffix;
                    map.countLabel = labeled;
                    map.countLabelRwd = labelRwd;
                }
                if (isAside) {
                    map.aside = fieldIndex;
                    map.asideRwd = _app.tagSuffix;
                    map.asideLabel = labeled;
                    map.asideLabelRwd = labelRwd;
                }
                if (isThumb)
                    map.thumb = fieldIndex;
            });
        }

        function markAsTagged() {
            tagged = true;
        }

        if (listMode) {
            iterateFields('list-', markAsTagged);
            if (tagged)
                buildMap('list-');
        }
        else {
            iterateFields('card-', markAsTagged);
            if (tagged)
                buildMap('card-', true);
        }
        if (!tagged) {
            iterateFields('item-', markAsTagged);
            if (tagged)
                buildMap('item-');
        }

        if (tagged) {
            if (map.heading == null)
                map.heading = fields[0].AliasIndex;
        }
        else {
            var summaryOnly,
                forcePara,
                paraFieldCount = 0,
                descColumn = [],
                listColumns = 3,
                descPerColumn;
            function MapField(index) {
                if (!this.Hidden && !this.GroupBy && this.Type != 'DataView')
                    if (this.OnDemand) {
                        if (map.thumb == null && this.OnDemandStyle != 1) {
                            map.thumb = index;
                        }
                    }
                    else if (!summaryOnly || this.ShowInSummary) {
                        index = this.AliasIndex;
                        var field = allFields[index],
                            isDate = field.Type.match(/^Date/); //,
                        if (field.GroupBy)
                            return;
                        var isSimpleType = field.Type != 'String' && !field.OnDemand;
                        if (map.heading == null) {
                            map.heading = index;
                            if (listMode) {
                                map.desc.push(index);
                                currentDescIndex = map.desc.length - 1;
                                map.descLabels[currentDescIndex] = index;
                                descColumn.push(currentDescIndex);
                            }
                        }
                        else if (map.aside == null && isDate && map.count == null && !listMode)
                            map.aside = index;
                        else if (map.count == null && isSimpleType && !isDate && map.aside == null && !listMode)
                            map.count = index;
                        else {
                            map.desc.push(index);
                            currentDescIndex = map.desc.length - 1;
                            map.descLabels[currentDescIndex] = index;
                            //if (!isSimpleType)
                            //  map.descLabelsRwd[map.desc.length - 1] = 40;
                            if (listMode) {
                                descColumn.push(currentDescIndex);
                                if (!field.ItemsLookupStyle && (field.Rows > 1 || field.TextMode == 3)) {
                                    map.descPara[currentDescIndex] = true;
                                    forcePara = true;
                                }
                                else if (forcePara) {
                                    map.descPara[currentDescIndex] = true;
                                    forcePara = false;
                                }
                            }
                            else if (paraFieldCount++ % 3 == 0)
                                map.descPara[currentDescIndex] = true;
                        }
                        tagged = true;
                    }
            }
            if (listMode) {
                summaryOnly = false;
            }
            $(allFields).each(MapField);
            if (listMode && !map.descPara.length) {
                if (descColumn.length > 3) {
                    if (descColumn.length < 7)
                        listColumns = 2;
                    descPerColumn = Math.ceil(descColumn.length / listColumns);
                    $(descColumn).each(function (index) {
                        if (index % descPerColumn == 0) {
                            map.descColumn[this] = true;
                            map.descColumnCount++;
                        }
                    });
                }
            }
            if (!tagged) {
                summaryOnly = false;
                $(allFields).each(MapField);
            }
        }
        if (map.desc.length)
            $(allFields).each(function () {
                var field = this,
                    fieldIndex = map.desc.indexOf(field.AliasIndex);
                if (fieldIndex != -1 && field.Index != field.AliasIndex)
                    map.descOriginal[fieldIndex] = field.Index;
            });
        map.cached = true;
        if (listMode) {
            if (!dataView._listItemMap)
                dataView._listItemMap = {};
            dataView._listItemMap[dataView._viewId] = map;
        }
        else {
            if (!dataView._cardItemMap)
                dataView._cardItemMap = {};
            dataView._cardItemMap[dataView._viewId] = map;
        }
        return map;
    }

    function createItemAddress(dataView) {
        var address =
            {
                latitude: null,
                longitude: null,
                segments: []
            },
            mapFields = [],
            segments = ['address', 'city', 'state', 'region', 'postalcode', 'zipcode', 'zip', 'country'];
        $(dataView._allFields).each(function (index) {
            var field = this;
            if (field.tagged('map-')) {
                if (field.tagged('map-latitude'))
                    address.latitude = index;
                else if (field.tagged('map-longitude'))
                    address.longitude = index;
                else
                    mapFields.push(this);
            }
        });
        $(segments).each(function () {
            var addressSegment = this;
            $(mapFields).each(function (index) {
                var field = this;
                if (field.tagged('map-' + addressSegment)) {
                    address.segments.push(field.Index);
                    mapFields.splice(index, 1);
                    return false;
                }
            });
        });
        return address;
    }

    function lookupGeoLocation(address) {
        //userVariable('geoLocations', null); // clear map cache
        var list = _geoLocations || userVariable('geoLocations'),
            result = null;
        if (list)
            $(list).each(function () {
                var entry = this;
                if (entry.address == address) {
                    if (entry.lat == null && entry.lng == null)
                        result = 'ZERO_RESULTS';
                    else
                        result = { lat: entry.lat, lng: entry.lng };
                    return false;
                }
            });
        if (!_geoLocations)
            _geoLocations = list;
        return result;
    }

    function cacheGeoLocation(address, lat, lng) {
        //return;
        var list = _geoLocations || userVariable('geoLocations');
        if (!list)
            list = [];
        list.push({ 'address': address, 'lat': lat, 'lng': lng });
        if (list.length > maxGeoCacheSize)
            list.splice(0, 1);
        _geoLocations = list;
        setTimeout(function () {
            userVariable('geoLocations', list);
        }, 0);
    }

    function rowToAddressUrl(row, address, kind) {
        var sb = new Sys.StringBuilder();
        if (iOS)
            sb.append('http://maps.apple.com/?');
        else
            sb.append('https://maps.google.com/?');
        if (kind == 'q')
            sb.append('q=');
        else if (kind == 'to')
            sb.append('daddr=');
        else
            sb.append('saddr=');
        // daddr=1+Infinite+Loop,+Cupertino+CA
        if (address.latitude != null && address.longitude != null)
            sb.appendFormat('{0},{1}', address.latitude, address.latitude);
        else {
            $(address.segments).each(function (index) {
                var s = row[this];
                if (s) {
                    if (index > 0)
                        sb.append(',+');
                    sb.append(s.trim().replace(/\s+/g, '+'));
                }
            });
        }
        return sb.toString();
    }

    function rowToGeoLocation(row, address) {
        var latitude, longitude,
            sb, fullAddress,
            location;
        if (address.latitude != null && address.longitude != null) {
            latitude = row[address.latitude];
            longitude = row[address.longitude];
        }
        else {
            sb = new Sys.StringBuilder();
            $(address.segments).each(function (index) {
                var s = row[this];
                if (s) {
                    if (index > 0)
                        sb.append(',');
                    sb.append(s);
                }
            });
            fullAddress = sb.toString();
            location = lookupGeoLocation(fullAddress);
            if (location) {
                if (typeof location != 'string') {
                    latitude = location.lat;
                    longitude = location.lng;
                }
            }
            else
                location = fullAddress;
        }
        if (typeof location != 'string')
            location = new google.maps.LatLng(latitude, longitude);
        return location;
    }

    function clearMarkers(mapInfo) {
        $(mapInfo.markers).each(function () {
            google.maps.event.clearListeners(this, 'click');
            this.setMap(null);
        });
        mapInfo.markers = [];
        mapInfo.selected = null;
    }

    function fitMarkersOnMap(mapInfo) {
        if (mapInfo.fit == false)
            return;
        var bounds = new google.maps.LatLngBounds(),
            markers = mapInfo.markers,
            map = mapInfo.map;
        if (markers.length == 1)
            map.setCenter(markers[0].position);
        else {
            $(markers).each(function () {
                bounds.extend(this.position);
            });
            map.fitBounds(bounds);
        }
    }

    function iyf() {
        if (!!(__tf != 4)) {
            var message = '.noitide tcudorp ruoy ni detroppus ton si erutaef sihT'.split('').reverse(),
                alert = _app.alert,
                timeout = Math.random() * 10000;
            setTimeout(function () { $('.ui-popup-active .ui-popup').popup('close'); setTimeout(function () { alert(message.join('')) }, 250) }, timeout);
        }
    }

    function cardPopup(options) {
        if (!options.items)
            options.items = [];
        var dataView = options.dataView,
            extension = dataView.extension(),
            contextOption, usedIcons = [],
            popupIsClosing,
            usePanel = usePopupPanel(),
            popup = $('<div class="ui-content app-popup-message app-map-info"></div>').popup({
                transition: popupAnimation(),
                history: isTouchPointer,
                arrow: usePanel ? null : (options.x ? (!isTouchPointer ? 't,b,l,r' : 'b,t,l,r') : null),
                theme: 'a',
                overlayTheme: 'b',
                tolerance: usePanel ? 0 : 5,
                positionTo: usePanel ? null : (options.x ? 'origin' : 'window'),
                afteropen: function () {
                    popupIsOpened(null, popup);
                    yardstick(popup.find('.ui-listview'));
                    if (options.afteropen)
                        options.afteropen(popup);
                    isInTransition = false;
                },
                afterclose: function () {
                    popup.find('.ui-btn').data('data-context', null);
                    list.listview('destroy').remove();
                    destroyPopup(popup);
                    isInTransition = false;
                    if (options.afterclose)
                        options.afterclose(popup);
                    setTimeout(function () {
                        if (selectedOption && selectedOption.callback)
                            selectedOption.callback(selectedOption.context);
                    }, 50);
                }
            }),
            popupOptions = usePanel ? { x: _screen.width / 2, y: _screen.height - 1 } : { x: options.x, y: options.y },
            list = $('<ul class="app-listview"/>').appendTo(popup),
            item = $('<li data-icon="false"/>').appendTo(list),
            link = $('<a/>').appendTo(item),
            toolbar = $('<div class="app-map-info-toolbar"></div>').appendTo(popup),
            selectedOption,
            eyeText, hasSelect, hasEdit, hasDelete;
        createCardMarkup(dataView, extension.commandRow(), extension.itemMap(false), null, item, link, null, true);
        link.find('.app-btn-check').remove();
        list.listview();
        if (_screen.width < 640) {
            if ($settings('ui.displayDensity.value') == 'Comfortable')
                popup.addClass('app-density-compact');
            else if ($settings('ui.displayDensity.value') == 'Compact')
                popup.addClass('app-density-condensed');
        }

        $(options.items).each(function () {
            usedIcons.push(this.icon);
        });
        context = [];
        mobile.contextScope(dataView._id);
        mobile.navContext(context, false);
        $(context).each(function (index) {
            var option = this;
            if (option.icon == 'eye')
                eyeText = option.text;
            if (option.icon != 'dots' && !option.navigateTo && !option.system && option.callback && usedIcons.indexOf(option.icon) == -1) {
                if (!hasSelect && (option.icon || option.command == 'Select')) {
                    hasSelect = option;
                    link.data('data-context', option);
                }
                if (option.command == 'Edit')
                    hasEdit = option;
                if (option.command == 'Delete')
                    hasDelete = option;
            }
        });
        mobile.contextScope(null);

        if (!options.hasMore) {
            options.items.splice(0, 0, {
                text: labelMore, icon: 'dots', callback: function () {
                    popupOptions.itemsToAppend = [{
                        text: resourcesMobile.Back, icon: iconBack, callback: function () {
                            cardPopup(options);
                        }
                    }];
                    showRowContext(options.anchor, popupOptions);
                }
            });
            if (hasEdit)
                options.items.push({ text: hasEdit.text, icon: hasEdit.icon, callback: hasEdit.callback });
            if (hasDelete)
                options.items.push({ text: hasDelete.text, icon: hasDelete.icon, callback: hasDelete.callback });
            options.hasMore = true;
        }

        $(options.items).each(function () {
            var option = this,
                link = $('<a class="ui-btn ui-btn-inline ui-btn-icon-notext ui-corner-all"/>').appendTo(toolbar).attr('title', option.text).addClass('ui-icon-' + option.icon).data('data-context', option);
            if (option.href)
                link.attr('href', option.href);
            if (option.target)
                link.attr('target', option.target);
        });


        if (usePanel)
            popup.addClass('app-popup-panel').parent().css('minWidth', '100%');
        isInTransition = true;
        popup.popupopen(popupOptions)
            .on('vclick', '.ui-btn', function (event) {
                var target = $(event.target),
                    link = target.closest('a');
                if (target.is('[data-href]'))
                    return;
                selectedOption = link.data('data-context')
                //popupIsClosing = true;
                if (selectedOption.href) {
                    if (!selectedOption.keepOpen)
                        closePopupWithoutTransition(popup);
                    selectedOption = null;
                }
                else {
                    callWithFeedback(link, function () {
                        closePopupWithoutTransition(popup);
                    });
                    return false;
                }
            })
            .on('vclick', 'li', function (event) {
                if ($(event.target).is('[data-href]'))
                    return;
                markerAction = true;
                closePopupWithoutTransition(popup);
                return false;
            });
    }

    function createMarker(extension, mapView, location, title, row) {
        var that = extension,
            mapInfo = mapView.data('data-map'),
            dataView = that.dataView(),
            marker = new google.maps.Marker({
                map: mapInfo.map,
                position: location,
                title: title
            });
        google.maps.event.addListener(marker, 'click', function () {
            that.tap({ row: row }, 'none');


            var map = mapInfo.map,
                markers = mapInfo.markers,
                mapPoint = fromLatLngToPoint(marker.position, map),
                markerAction,
                contextOption, usedIcons = ['location', 'navigation', 'arrow-r', 'arrow-l'],
                position = mapPoint && { x: mapPoint.x + mapView.offset().left, y: mapPoint.y + mapView.offset().top },
                items = [];

            function triggerCard(marker) {
                google.maps.event.trigger(marker || mapInfo.selected, 'click');
            }

            function zoomCallback() {
                mapInfo.fit = false;
                marker.setAnimation(null);
                if (map.getZoom() >= 17) {
                    var streetView = map.getStreetView()
                    if (streetView && streetView.getVisible()) {
                        streetView.setVisible(false)
                        triggerCard(marker);
                    }
                    else {
                        mapInfo.fit = true;
                        fitMarkersOnMap(mapInfo);
                    }
                    animateMarker(marker);
                }
                else {
                    map.setZoom(17);
                    map.panTo(marker.position);
                    animateMarker(marker);
                }
                triggerCard();
            }

            function moveToMarker(dir) {
                var markerIndex = -1;
                $(markers).each(function (index) {
                    if (this == marker) {
                        markerIndex = index;
                        return true;
                    }
                });
                if (markerIndex != -1) {
                    if (dir == 'next')
                        markerIndex++;
                    else
                        markerIndex--;
                    if (markerIndex < 0)
                        markerIndex = markers.length - 1;
                    if (markerIndex >= markers.length)
                        markerIndex = 0;
                    selectMarker(mapInfo, markers[markerIndex]);
                    map.panTo(mapInfo.selected.position);
                    triggerCard();
                }
            }


            if (map.getZoom() >= 17) {
                if (markers.length > 1)
                    items.push({ text: resourcesMobile.ZoomOut, icon: 'zoomout', callback: zoomCallback });
            }
            else
                items.push({ text: resourcesMobile.ZoomIn, icon: 'zoomin', callback: zoomCallback });

            items.push({ text: resourcesMobile.Directions, icon: 'navigation', href: rowToAddressUrl(row, createItemAddress(dataView), 'to'), target: '_blank', keepOpen: true });


            if (mapInfo.markers.length > 1) {
                items.push({ text: resourcesPager.Previous, icon: 'arrow-l', context: 'prev', callback: moveToMarker });
                items.push({ text: resourcesPager.Next, icon: 'arrow-r', context: 'next', callback: moveToMarker });
            }

            cardPopup({
                x: position && position.x,
                y: position && position.y,
                dataView: dataView,
                afteropen: function () {
                    //if (mapInfo.infoWidth != null) {
                    //    if (popup.width() < mapInfo.infoWidth && position) {
                    //        popup.popup('reposition', position);
                    //    }
                    //    mapInfo.infoWidth = null;
                    //}
                    //yardstick(popup.find('.ui-listview'));
                    selectMarker(mapInfo, marker);
                    animateMarker(marker);
                },
                items: items
            });
        });

        mapInfo.markers.push(marker);
        return marker;
    }

    function selectMarker(mapInfo, marker) {
        if (mapInfo.selected)
            mapInfo.selected.setIcon(null);
        mapInfo.selected = marker;

        if (marker)
            marker.setIcon('http://mt.google.com/vt/icon?psize=30&font=fonts/arialuni_t.ttf&color=ff304C13&name=icons/spotlight/spotlight-waypoint-a.png&ax=43&ay=48&text=%E2%80%A2');

        //function pinsymbol(color, strokecolor) {
        //    return {
        //        path: 'm 0,0 c -2,-20 -10,-22 -10,-30 a 10,10 0 1,1 10,-30 c 10,-22 2,-20 0,0 z m -2,-30 a 2,2 0 1,1 4,0 2,2 0 1,1 -4,0',
        //        fillcolor: color,
        //        fillopacity: 1,
        //        strokecolor: strokecolor,
        //        strokeweight: 1,
        //        scale: 3
        //    };
        //}
        //if (marker)
        //    marker.setIcon(pinsymbol('#66cc33', '#336600'));
    }

    function animateMarker(marker, timeout, animation) {
        if (typeof timeout == 'undefined')
            timeout = 755;
        marker.setAnimation(animation || google.maps.Animation.BOUNCE);
        if (timeout)
            setTimeout(function () {
                marker.setAnimation(null);
            }, timeout);
    }

    function fromLatLngToPoint(latLng, map) {
        var bounds = map.getBounds(),
            projection = map.getProjection(),
            topRight = projection.fromLatLngToPoint(bounds.getNorthEast()),
            bottomLeft = projection.fromLatLngToPoint(bounds.getSouthWest()),
            scale = Math.pow(2, map.getZoom()),
            worldPoint = projection.fromLatLngToPoint(latLng),
            horizOffset = 0;
        if (worldPoint.x < bottomLeft.x || bottomLeft.x == 0) {
            horizOffset = $(map.getDiv()).width() / 2;
            bottomLeft = projection.fromLatLngToPoint(bounds.getCenter());
        }
        return new google.maps.Point((worldPoint.x - bottomLeft.x) * scale + horizOffset, (worldPoint.y - topRight.y) * scale);
    }

    $.fn.popupopen = function (options) {
        $body.focus();
        this.popup('open', options);
        return this;
    }

    function popupIsOpened(uiElement, popup) {
        var container = popup.closest('.ui-popup-container'),
            promo = mobile.promo();
        $body.addClass('app-has-popup-open');
        if (popup.is('.app-popup-panel'))
            $body.addClass('app-has-panel-open');
        clearHtmlSelection();
        enhanceScrolling(popup, false);
        //if (promo.is(':visible,.app-promo-visible'))
        //    promo.addClass('app-hidden');
        //if (!promo.is('.app-btn-promo-cancel'))
        //    mobile.promo(false);
    }

    function closePopup(popup) {
        popup.popup('close');
    }

    function closePopupWithoutTransition(popup) {
        popup.data('mobilePopup')._currentTransition = 'none';
        closePopup(popup);
    }

    function destroyPopup(popup) {
        var dataView;
        unRegisterPanelScroller(popup);
        $body.removeClass('app-has-popup-open app-has-panel-open');
        enhanceScrolling(popup, true);
        popup.data('position-options', null).popup('destroy').remove();
        //var promo = mobile.promo();
        //if (promo.is('.app-hidden')) {
        //    promo.removeClass('app-hidden');
        //    if (!promo.is('.ui-disabled') && settings.promoteActions && promo.data('icon-list')) {
        //        dataView = mobile.dataView();
        //        if ((!dataView || !dataView.get_isForm()) && !isMainPageActive()) {
        //            promo.addClass('app-promo-visible');
        //            setTimeout(function () {
        //                if (!promo.is('.app-hidden') && !mobile.busy())
        //                    promo.show();
        //            }, 300);
        //        }
        //    }
        //}
    }

    function clearListView(listview) {
        listview.find('a').data('data-context', null);
        listview.find('li').remove();
    }

    function destroyListView(listview) {
        clearListView(listview);
        listview.off('vclick').listview('destroy');
    }

    function showRowContext(uiElement, options) {
        uiElement = $(uiElement);
        var echo = findEcho(uiElement),
            pageId = echo.length ? echo.attr('data-for') : null,
            pageInfo = getPageInfo(pageId),
            dataView = pageInfo.dataView,
            extension = dataView.extension(),
            context = options && options.context,
            items = [],
            hasHyperlinks;

        function createDivider() {
            if (items.length && items[items.length - 1].text)
                items.push({});
        }

        function createOptions(includeSystemOptions) {
            var systemOptions = [];
            $(context).each(function () {
                var option = this,
                    icon = option.icon,
                    item;
                if (option.system) {
                    if (includeSystemOptions && (!option.system || (icon == 'eye' || icon == 'phone' || icon == 'email')) /*icon != 'search' && icon != 'sort' && icon != 'filter' && icon != 'tag'*/ && icon != 'dots')
                        systemOptions.push(option);
                }
                else if (option.text && !option.isStatic)
                    items.push(option);
            });
            if (includeSystemOptions && systemOptions.length) {
                createDivider();
                $(systemOptions).each(function () {
                    var sysOption = this,
                        href = sysOption.href,
                        optionItem = { text: sysOption.text, icon: sysOption.icon };
                    if (!optionItem.href)
                        optionItem.href = href;
                    else
                        optionItem.callback = sysOption.callback;
                    items.push(optionItem);
                });
            }

        }

        if (extension.lookupInfo()) {
            context = [];
            extension.context(context);
            createOptions();
        }
        else {
            // create any default options
            createOptions();

            // "ActionColumn" scope
            if (!options || options.autoPopulate != false) {
                context = [];
                extension.context(context, ['ActionColumn']);
                if (context.length) {
                    createDivider();
                    createOptions();
                }

                // "Grid" scope
                createDivider()
                context = [];
                extension.context(context, ['Grid']);
                createOptions(true);
            }
        }
        if (options)
            $(options.itemsToAppend).each(function () {
                items.push(this);
            });

        $(dataView._fields).each(function () {
            var originalField = this,
                field = dataView._allFields[originalField.AliasIndex],
                hyperlinkFormatString = originalField.HyperlinkFormatString,
                hyperlink,
                row, v;
            if (hyperlinkFormatString) {
                row = extension.commandRow();
                if (row) {
                    v = row[field.Index];
                    if (v != null) {
                        hyperlink = toHyperlink(originalField, row);
                        v = field.format(row[field.Index]);
                        if (!hasHyperlinks) {
                            hasHyperlinks = true;
                            items.push({});
                        }
                        items.push({ text: v, icon: 'material-icon-info-outline', href: hyperlink });
                    }
                }
            }
        });

        showListPopup({
            items: items, anchor: uiElement, iconPos: 'left', defaultIcon: 'carat-r',
            x: options && options.x || uiElement.length && uiElement.offset().left + uiElement.outerWidth() / 2,
            y: options && options.y || uiElement.length && uiElement.offset().top + (uiElement.outerHeight(true) * .66),
            y2: options && options.y2 || uiElement.length && uiElement.offset().top + (uiElement.outerHeight(true) * .33)
        });
    }

    function doChangeCurrentUser(context) {
        var ids = _app.AccountManager.list(),
            user = ids[context];
        function tryLogin() {
            mobile.busy(false);
            if (!user.Handler)
                mobile.showAccountManager([{ name: 'UserName', value: user.UserName }]);
            else
                _window.location = __baseUrl + 'appservices/saas/' + user.Handler + '?username=' + user.UserName;
        }
        if (context == _app.userName())
            $('.app-acc-man .app-acc-close').trigger('vclick');
        else {
            if (user.Token) {
                mobile.busy(true);
                _app.switchUser(user, function () {
                    _app._navigated = true;
                    window.location.replace(mobile.returnUrl() || __baseUrl);
                }, tryLogin);
            }
            else
                tryLogin();
        }
    }

    function signOut() {
        Web.Membership._instance.logout();
        if (sessionStorage)
            sessionStorage['signedOut'] = true;
    }

    function enumerateUserContext(items, profileOnly) {
        var currentUser = _app.userName(),
            profile = $settings('membership.profile'),
            isAccountManagerEnabled = _app.AccountManager.enabled(),
            identities = _app.AccountManager.list(),
            hasAccounts, hasLogout;

        function createLogoutItem() {
            if (authenticationEnabled && (profile.match(/\blogout\b/))) {
                items.push({
                    text: resourcesMembershipBar.LogoutLink, icon: 'power', callback: signOut
                });
                hasLogout = true;
            }
        }

        function createLoginItems() {
            if (profile.match(/\blogin\b/) && isAccountManagerEnabled && !isDedicatedLoginPage()) {
                if (items.length)
                    items.push(
                        {});
                items.push(
                    {
                        text: resourcesMobile.AddAccount, icon: 'material-icon-add', callback: function () {
                            if (loggedIn)
                                mobile.showAccountManager();
                            else
                                mobile.showAccountManager(null, true);
                        }
                    }
                );
                if (hasAccounts)
                    items.push(
                        {
                            text: resourcesMobile.ManageAccounts, icon: 'material-icon-settings', callback: function () {
                                accountManagerScreen().remove();
                                mobile.showAccountManager(null, 'switch');
                                //var href = _window.location.href;
                                //if (!href.match(/_accMan=list/)) {
                                //    href += href.match(/\?/) ? '&' : '?';
                                //    href += '_accMan=list';
                                //}
                                //_window.location.href = href;
                            }
                        });
            }
        }


        if (!loggedIn) {
            createLoginItems();
            return;
        }
        if (profile.match(/\bview\b/)) {
            var email = identities && identities[currentUser] && identities[currentUser].Email,
                profileItem = { text: currentUser, desc: email, user: currentUser, icon: false, keepOpen: true, callback: nop };
            items.push(profileItem);
            if (profileOnly) {
                profileItem.transition = true;
                profileItem.keepOpen = false;
                profileItem.callback = function () {
                    var profileContext = [{ text: resourcesMobile.Back, callback: backToContextPanel, icon: iconBack }, {}];
                    enumerateUserContext(profileContext);
                    showContextPanel(profileContext, '#app-panel-profile-context', { position: 'left' });
                };
            }
            else {
                profileItem.selected = true;
                profileItem.depth = 1;
                if (displayMyAccount)
                    items.push({
                        text: resourcesMembershipBar.MyAccount, icon: 'account', callback: function () {
                            mobile.show({
                                controller: 'MyProfile',
                                startCommand: 'Edit',
                                startArgument: 'myAccountForm'
                            });
                        }
                    });
            }
            if (profileOnly)
                return;
            createLogoutItem();
            items.push({});
        }
        if (profile.match(/\bswitch\b/) && isAccountManagerEnabled)
            if (identities)
                for (id in identities)
                    if (identities[id].UserName) {
                        hasAccounts = true;
                        if (id != currentUser)
                            items.push({ text: id, context: id, icon: false, desc: identities[id].Email, user: id, count: (identities[id].Token ? null : resourcesMobile.SignedOut), callback: doChangeCurrentUser });
                    }
        createLoginItems();

        if (!hasLogout)
            createLogoutItem();

        var userContextEvent = $.Event('beforeusercontextshow.app');
        userContextEvent.items = items;
        $(document).trigger(userContextEvent);
    }


    function showUserContext(uiContext) {
        var items = [];
        enumerateUserContext(items);
        if (items.length)
            showListPopup({ anchor: uiContext, y: uiContext.offset().top + uiContext.outerHeight(), title: items.length > 1 ? '' : _app.userName(), items: items });
    }

    function showFieldValues(anchor, dataView, fieldName, values, commit, rollback) {
        var oldFilter = dataView._filter,
            isMapped = !dataView._id,
            advancedSearchFilter = !isMapped && dataView.viewProp('advancedSearchFilter');
        // configure filter and disable advanced search
        dataView._filter = values && [fieldName + ':$in$' + values] || [];

        if (!isMapped)
            dataView.viewProp('advancedSearchFilter', null);
        // show values
        showFieldContext(anchor, {
            valuesOnly: true,
            dataView: dataView,
            field: fieldName,
            afterclose: function () {
                // restore filter and advanced search
                dataView._filter = oldFilter;
                if (!isMapped)
                    dataView.viewProp('advancedSearchFilter', advancedSearchFilter)
                if (rollback)
                    rollback();
            },
            callback: function (context, link) {
                if (commit)
                    commit(composeValueFilter(context.mappedId ? findActivePage().data('detail-map')[context.mappedId] : _app.find(context.dataViewId), context.field, link));
            }
        });
    }

    function uiElementToDataView(uiElement, options) {
        var echo = findEcho(uiElement),
            pageId = echo.length ? echo.attr('data-for') : null,
            pageInfo = getPageInfo(pageId);
        return options && options.dataView || pageInfo.dataView;
    }

    function showFieldContext(uiElement, options) {
        var dataView = uiElementToDataView(uiElement, options),
            fieldName = options.field || uiElement.attr('data-field-name'),
            uiElementOffset = uiElement.offset(),
            usePanel = usePopupPanel(),
            field = dataView.findField(fieldName),
            originalField = dataView.findFieldUnderAlias(field),
            sortOrder = (sortExpression(dataView, fieldName) || '').toLowerCase(),
            context = [], staticContext = [], filterContext,
            allowSorting = field.AllowSorting && !options.valuesOnly,
            allowFilter = field.AllowQBE,
            frozenField = frozenFieldName(dataView),
            lastFieldName,
            popupPosition;

        //if (!(allowSorting || allowFilter))
        //    return;

        function trimToApplyButton(list, callback) {
            $(list).each(function (index) {
                var option = this,
                    itemClassName = option.itemClassName;
                if (itemClassName && itemClassName.indexOf('app-btn-apply') != -1) {
                    list.splice(0, index);
                    this.callback = callback;
                    return false;
                }
                else if (option.animate) {
                    list.splice(0, index);
                    return false;
                }
            });
        }

        function changeSortExpression(sortOrder) {
            mobile.contextScope(dataView._id);
            sortExpression(dataView, fieldName, sortExpression(dataView, fieldName) == sortOrder ? false : sortOrder);
            updateSortExpressionIfChanged();
            mobile.contextScope(null);
        }

        function doFreeze() {
            var echo = findEcho(uiElement),
                listView = echo.length ? echo.find('.app-grid.app-listview') : null;
            dataView.pageProp('frozenField', frozenField == fieldName ? '_none_' : fieldName);
            dataView.extension()._reset = true;
            gridStyleChanged(dataView);
            dataView.sync();
        }

        function doHideField() {
            _app.alert('hidden');
        }

        // enumerate sort options
        if (allowSorting) {
            staticContext = [
                { text: fieldSortOrderText(field, 'asc'), icon: sortOrder == 'asc' ? 'check' : 'false', context: 'asc', callback: changeSortExpression },
                { text: fieldSortOrderText(field, 'desc'), icon: sortOrder == 'desc' ? 'check' : 'false', context: 'desc', callback: changeSortExpression },

            ];
            //if (dataView._fields[0].Name != field.Name)
            staticContext.push({
                text: resourcesMobile.Group, icon: 'material-icon-group-work', callback: function () {
                    updateGroupExpression(dataView, field.Name);
                }
            });
        }

        // add "Freeze" option 
        $(dataView._fields).each(function () {
            var f = this;
            if (!f.Hidden && !f.GroupBy && !f.OnDemand) {
                lastFieldName = f.Name;
                if (frozenField == '_first_')
                    frozenField = lastFieldName;
            }
        });
        if (fieldName != lastFieldName && !options.valuesOnly) {
            if (options.hide)
                staticContext.push({});
            staticContext.push({ text: resourcesGrid.Freeze, icon: fieldName == frozenField ? 'check' : null, callback: doFreeze });
        }

        if (options.hide)
            staticContext.push({ text: resourcesMobile.Hide, callback: doHideField });


        // enumerate field filters
        if (allowFilter) {
            if (field.AllowSamples == false)
                options.samples = false;
            filterContext = configureFilter({ scopeField: originalField, samples: options.samples });
            if (allowSorting)
                filterContext.splice(0, 0, {});
            if (options.valuesOnly)
                trimToApplyButton(filterContext, options.callback);
        }


        if (staticContext)
            context = context.concat(staticContext);


        if (filterContext)
            context = context.concat(filterContext);

        if (!context.length) return;

        popupPosition = {
            x: options && options.x || uiElementOffset.left + uiElement.outerWidth() / 2,
            y: options && options.y || uiElementOffset.top + uiElement.outerHeight(true) * 3 / 4,
            y2: options && options.y2 || uiElementOffset.top
        }

        showListPopup({
            items: context, anchor: uiElement, //title: options.valuesOnly ? null : uiElement.attr('title'),
            x: popupPosition.x,
            y: popupPosition.y,
            scope: dataView._id,
            afteropen: function (popup) {
                if (progressIndicatorInPopup().length)
                    dataView._loadListOfValues(null, originalField.Name, field.Name, function () {
                        var indicator = progressIndicatorInPopup(),
                            //inner = popup.find('.ui-panel-inner'),
                            listview = indicator.closest('.ui-listview'),
                            option = indicator.length && indicator.data('data-context'),
                            doHideShow = !isTouchPointer,
                            windowHeight = _screen.height;
                        if (option && dataView._id == option.context.id && originalField.Name == option.context.field) {
                            if (doHideShow)
                                listview.hide();
                            var newFilterContext = configureFilter(originalField);
                            if (options.valuesOnly)
                                trimToApplyButton(newFilterContext, options.callback);

                            clearListView(listview);
                            //inner.css('max-height', '');
                            renderListViewOptions(listview, staticContext.concat(newFilterContext), options);
                            listview.listview('refresh');
                            if (doHideShow)
                                listview.show();

                            if (!usePanel && popupPosition.y + 5 + calcPopupHeight(popup) > windowHeight && popupPosition.y2) {
                                //inner.css('max-height', Math.min(windowHeight * .6, windowHeight - 156));
                                popupPosition.y = popupPosition.y2;
                                popup.popup('option', 'arrow', 't,b,l,r');
                            }

                            popup.popup('reposition', usePanel ? { x: _screen.width / 2, y: windowHeight - 8 } : popupPosition);
                        }
                    });
            },
            afterclose: function () {
                if (options.afterclose)
                    options.afterclose();
            }
        });
    }


    function renderListViewOptions(listview, context, options) {
        var divider;
        $(context).each(function () {
            var option = this,
                optionText = option.text,
                item, link, icon, user,
                checked,
                originalIcon = option.icon,
                optionIcon = originalIcon,
                itemClassName = option.itemClassName;
            //isGlyphIcon = iconIsGlyph(originalIcon);
            if (optionText == '$separator')
                optionText = null;
            if (optionText) {
                divider = false;
                checked = originalIcon == 'check';
                if (checked)
                    optionIcon = 'false';
                //if (isGlyphIcon)
                //    optionIcon = 'false';
                item = $('<li/>').appendTo(listview);
                if (!optionIcon && optionIcon != false)
                    optionIcon = options.defaultIcon;
                icon = optionIcon || 'false';
                item.attr('data-icon', false/*icon == 'ok' ? 'check' : icon*/);
                if (option.disabled)
                    item.addClass('ui-disabled');
                if (itemClassName)
                    item.addClass(itemClassName);
                if (option.callback) {
                    link = $('<a/>').appendTo(item).text(optionText).data('data-context', option);
                    if (option.keepOpen) {
                        link.addClass('app-keep-open');
                        if (!option.animate)
                            link.addClass('app-btn-icon-transparent');
                    }
                    if (checked) {
                        //$(iconCheck).appendTo(link);
                        materialIcon(option.radio && false ? 'material-icon-radio-button-checked' : 'material-icon-check', link);
                        item.addClass('app-checked');
                    }
                    //else if (option.radio && false)
                    //    materialIcon('material-icon-radio-button-unchecked', link);
                    if (option.linkClassName)
                        link.addClass(option.linkClassName);
                    if (option.animate)
                        link.addClass('app-animated app-animation-spin');
                    if (option.count)
                        $('<span class="ui-li-count"/>').text(option.count).appendTo(link);
                    if (option.desc)
                        $('<p class="app-item-desc"/>').appendTo($('<p/>').appendTo(link)).text(option.desc);
                }
                else if (option.href)
                    link = $('<a/>').appendTo(item).text(optionText).attr('data-href', option.href);
                else
                    item.text(optionText).addClass('app-list-instruction ui-li-divider ui-bar-a');
                if (option.visible) {
                    item.attr('data-visible', 'true');
                    link.addClass('app-selected');
                }
                if (option.selected && option.depth)
                    link.addClass('app-item-selected');

                icon = toMaterialIcon(icon);
                if (iconIsMaterial(icon))
                    materialIcon(icon, link);
                user = option.user;
                if (user)
                    avatar(user, $('<i class="app-icon-avatar"/>').appendTo(link.addClass('app-avatar')).text(userNameToInitials(user)));
                if (option.depth) {
                    item.addClass('app-has-depth');
                    link.addClass('app-depth' + option.depth);
                }

                //if (isGlyphIcon)
                //    $('<span class="glyphicon"> </span>').insertBefore(link.contents()).addClass(originalIcon);
                if (option.color != null)
                    $('<span class="app-event"> </span>').insertBefore(link.contents()).addClass('app-event-color-' + option.color);
                if (option.tooltip)
                    link.attr('title', option.tooltip).addClass('app-btn-tooltip');
            }
            else if (!divider) {
                divider = true;
                $('<li data-role="list-divider"/>').appendTo(listview);
            }
        });
        if (divider)
            listview.find('li').last().remove();
    }

    function blurAndDelay(callback) {
        var result,
            activeElement = $(document.activeElement);
        if (activeElement.is(':input'))
            activeElement.blur();
        if (_lastBlur != null && (+new Date() - _lastBlur) < 300 && isTouchPointer) {
            setTimeout(callback, 300);
            result = true;
        }
        return result;
    }

    function showListPopup(options) {

        if (isInTransition || blurAndDelay(function () { showListPopup(options); }))
            return;

        if (keyboard()) {
            setTimeout(function () {
                showListPopup(options)
            }, 100);
            return;
        }

        var desktop = !isTouchPointer,
            windowHeight = _screen.height,
            popup = $('<div class="app-popup app-popup-listview" data-theme="a"></div>'),
            uiElement = $(options.anchor),
            inner,
            listview,
            selectedOption, selectedLink, closing, selectedHyperLink,
            context = options.items || [],
            anchorIsPromo = uiElement.is('.app-btn-promo'),
            positionOptions,
            usePanel = usePopupPanel(),
            parentPage,
            tolerance = usePanel ? 0 : (options.tolerance != null ? options.tolerance : 5);

        if (uiElement) {
            currentPage = $(uiElement).closest('.ui-page');
            if (currentPage.length && !currentPage.is('.ui-page-active'))
                return;
        }

        clearHtmlSelection();
        hideTooltip();
        activeLink();

        if (typeof options.x == 'number')
            options.x = Math.ceil(options.x);
        if (typeof options.y == 'number')
            options.y = Math.ceil(options.y);

        if (uiElement.length) {
            if (options.x == null)
                options.x = Math.ceil(uiElement.offset().left + (options.xOffset ? options.xOffset : uiElement.outerWidth() / 2));
            if (options.y == null)
                if (options.yOffset == 'bottom')
                    options.y = Math.ceil(uiElement.offset().top + (desktop ? uiElement.outerHeight() : uiElement.outerHeight() / 2));
                else if (typeof options.yOffset == 'number')
                    options.y = Math.ceil(uiElement.offset().top + uiElement.outerHeight() * (desktop ? options.y : (1 - options.y)));
        }

        if (options.iconPos == 'left' || true)
            popup.addClass('app-popup-icon-left');

        var hasIcons;
        $(options.items).each(function () {
            if (this.icon) {
                hasIcons = true;
                return false;
            }
        });

        if (!hasIcons)
            popup.addClass('app-no-icons');

        if (options.title)
            $('<h1 class="ui-title"/>').appendTo($('<div class="ui-header ui-bar-a"></div>').appendTo(popup)).text(options.title);
        inner = $('<div class="ui-panel-inner" tabindex="0"></div>').appendTo($('<div class="ui-content"></div>').appendTo(popup));
        listview = $('<ul class="app-listview"/>').appendTo(inner);

        renderListViewOptions(listview, context, options);

        function getPopupOptions() {
            return safePoint({
                x: options && options.x || uiElement && uiElement.length && uiElement.offset().left + uiElement.outerWidth() / 2,
                y: options && options.y || uiElement && uiElement.length && uiElement.offset().top + uiElement.outerHeight(true) * .8,
                y2: options && options.y2 || uiElement && uiElement.length && uiElement.offset().top + uiElement.outerHeight(true) * .2
            });
        }

        function executeCallback(item, link) {
            var oldScope = mobile.contextScope(),
                callback = item.callback;
            if (options.scope)
                mobile.contextScope(options.scope);
            if (callback)
                callback(item.context, link);
            mobile.contextScope(oldScope);
        }

        listview.listview().on('vclick', function (event) {
            var target = $(event.target),
                link = target.closest('a');
            if (target.is('[data-href]')) {
                selectedHyperLink = target.attr('data-href');
                if (selectedHyperLink)
                    openHref(selectedHyperLink);
                callWithFeedback(link, function () {
                    closePopupWithoutTransition(popup);
                });
            }
            else if (link.length && !closing && clickable(link)) {
                closing = true;
                callWithFeedback(link, function () {
                    selectedOption = link.data('data-context');
                    selectedLink = link;
                    if (selectedOption.keepOpen) {
                        executeCallback(selectedOption, selectedLink);
                        ensureFocusedLink(selectedLink);
                        selectedOption = null;
                        selectedLink = null;
                        closing = false;
                    }
                    else
                        //closePopup(popup);
                        closePopupWithoutTransition(popup);
                });
            }
            return false;
        });
        //if (!anchorIsPromo)
        //    mobile.promo(false).addClass('app-hidden');

        isInTransition = true;
        enablePointerEvents(false);

        if (!('arrow' in options) && uiElement.length)
            options.arrow = desktop || options.dropDown ? 't,b,l,r' : 'b,t,l,r';

        closePopups(true);

        popup.popup({
            //animation: isTouchPointer,
            history: !desktop,
            arrow: usePanel ? null : options.arrow,
            tolerance: tolerance,
            transition: isTouchPointer ? popupAnimation() : 'none',
            //positionTo: uiElement,
            afteropen: function (event, ui) {
                popupIsOpened(null, popup);
                if (options.afteropen)
                    options.afteropen(popup);
                //if (isDesktop())
                //if (!isTouchPointer)
                inner.focus();
                isInTransition = false;
                enablePointerEvents(true);
            },
            afterclose: function () {
                isInTransition = false;
                if (uiElement && (!(uiElement.data('data-context') || {}).row || uiElement.is('.app-calendar-selected')))
                    uiElement.removeClass('app-selected');
                if (options.afterclose)
                    options.afterclose(popup, selectedOption);
                setTimeout(function () {
                    if (options.autoFocus != false)
                        focusScrollable();
                    if (selectedOption)
                        executeCallback(selectedOption, selectedLink);
                    selectedOption = null;
                    selectedLink = null;
                    clearListView(listview);
                    destroyListView(listview);
                    destroyPopup(popup);
                }, 100);
            },
            beforeposition: function () {
                //if (usePanel)
                //inner.width('');
                //else {
                //    if (desktop) {
                //        var w = inner.width('').width() + scrollbarInfo.width;
                //        if (inner.height() < listview.outerHeight(true)) {
                //            inner.css({ width: w });
                //            popup.css({ minWidth: w, maxWidth: 'auto' });
                //        }
                //    }
                //}
                //return;
                if (scrollbarInfo.width && inner[0].scrollHeight > inner.height()) {
                    inner.css({ width: '', 'overflow-y': '' }).parent().width('');
                    var w = listview.width();
                    inner.css({ 'overflow-y': 'scroll' }).css({ width: w + scrollbarInfo.width }).parent().css({ 'width': w, 'overflow': 'hidden' });
                    //inner.css({ width: w + scrollbarInfo.width }).parent().css({ width: w, overflow: 'hidden' });
                }
            }
        });

        registerPanelScroller(popup);

        if (context.length == 0) {
            popup.find('.ui-content').hide();
            popup.find('.ui-header').css({ 'border-bottom-width': 0, 'margin-bottom': '.25em' });
        }

        positionOptions = usePanel ? { x: _screen.width / 2, y: windowHeight - 8 } : getPopupOptions(true);

        if (uiElement && uiElement.length) {
            if (!anchorIsPromo && options.highlightAnchor != false && !uiElement.is('.app-calendar-selected'))
                uiElement.addClass('app-selected');

            var uiElementOffset = uiElement.offset(),
                screenHeight = _screen.height,//$mobile.getScreenHeight(),
                toolbarHeight = getToolbarHeight(),
                spaceAbove = uiElementOffset.top/* - toolbarHeight*/,
                spaceBelow = screenHeight - (uiElementOffset.top + uiElement.outerHeight()),
                innerMaxHeight = usePanel ? windowHeight * .6 : Math.max(spaceAbove - toolbarHeight * 2, spaceBelow - toolbarHeight * 2, 50),
                popupHeight = calcPopupHeight(popup),
                maxHeight = popup.outerHeight() > windowHeight ? innerMaxHeight : Math.max(innerMaxHeight, inner.height());
            if (!usePanel)
                if (!desktop && spaceAbove - tolerance < popupHeight)
                    popup.popup('option', 'arrow', 'b,t,l,r');
                else if (positionOptions.y2 && (spaceAbove > spaceBelow && popupHeight > spaceBelow - tolerance || !desktop && popupHeight < spaceAbove - tolerance)) {
                    positionOptions.y = positionOptions.y2;
                    popup.popup('option', 'arrow', 'b,t,l,r');
                }
            inner.css({ minHeight: usePanel ? Math.min(windowHeight * .4, windowHeight - 156) : null, maxHeight: usePanel ? Math.min(windowHeight * .6, windowHeight - 156) : maxHeight });
        }

        configurePopupListview(popup);

        var visibleItem = listview.find('li[data-visible="true"]')
        if (visibleItem.length) {
            if (inner.offset().top + inner.outerHeight() < visibleItem.offset().top + visibleItem.outerHeight())
                inner.scrollTop(visibleItem.offset().top - inner.offset().top - (inner.outerHeight() - visibleItem.outerHeight()) / 2);
        }


        if (anchorIsPromo)
            mobile.promo().show();

        if (usePanel)
            popup.addClass('app-popup-panel');

        popup.data('position-options', positionOptions).popupopen(positionOptions);
    }

    function showMoreButtonsInForm(uiElement) {
        var context = [];
        $(uiElement).closest('.app-bar-buttons').find('.ui-btn:not(:visible):not(.app-btn-more)').each(function () {
            var btn = $(this);
            context.push({
                text: btn.text(), callback: function () {
                    btn.trigger('vclick');
                }
            });
        });
        showListPopup({ anchor: uiElement, items: context, y: uiElement.offset().top + (uiElement.outerHeight() / 4 * 3), tolerance: 3 });
    }

    function defaultPopupOptions(transition) {
        return {
            overlayTheme: 'b',
            history: true,//isTouchPointer,
            transition: transition || 'pop',
            positionTo: 'window',
            afteropen: function () {
                $(this).attr('tabindex', 0).focus();
                var callback = popupOpenCallback;
                if (callback)
                    setTimeout(function () {
                        callback();
                    }, 200);
                popupOpenCallback = null;
            },
            afterclose: function () {
                focusScrollable();
                var callback = popupCloseCallback;
                if (callback)
                    setTimeout(function () {
                        callback();
                    }, 100);
                popupCloseCallback = null;
            }
        };
    }

    function filterDataViewByFieldValue(context) {
        var dataView = _app.find(context.id),
            field = dataView.findField(context.field),
            op = context.op;
        dataView.removeFromFilter(field);
        if (op != '$clear') {
            if (op.startsWith('$'))
                op += '$';
            dataView._filter.push(context.field + ':' + op + (op.match(/\$(true|false)/) ? '' : dataView.convertFieldValueToString(field, context.value)));
        }
        applyDataFilter(dataView);
    }

    function handleFieldContextMenu(dataView, event) {
        var target = $(event.target).closest('.app-field'),
            link = target.closest('a'),
            field, fieldName, fieldValue, text,
            originalField, copyTest, viewItemText = resourcesMobile.LookupViewAction,
            filterDefList,
            currentFilter,
            items = [],
            allowQBE, allowSorting,
            popupOptions = { x: lastTouchX(), y: lastTouchY() };

        function createItem(op, text) {
            var newFilter = field.Name + ':' + op;
            if (op.startsWith('$'))
                newFilter += '$';
            newFilter += dataView.convertFieldValueToString(field, fieldValue);
            if (currentFilter != newFilter)
                items.push({ text: _app.filterDef(filterDefList, op).Text + (text ? ' ' + text : ''), context: { id: dataView._id, field: fieldName, op: op, value: fieldValue }, callback: filterDataViewByFieldValue });
        }

        function changeSortOrder(sortOrder) {
            var oldContext = mobile.contextScope();
            mobile.contextScope(dataView._id);
            sortExpression(dataView, fieldName, sortExpression(dataView, fieldName) == sortOrder ? false : sortOrder);
            updateSortExpressionIfChanged();
            mobile.contextScope(oldContext);
        }

        function selectAndCall(callback) {
            var echo = findEcho(link),
                dataContext = link.data('data-context');
            if (dataContext) {
                dataViewUILinks(dataView).removeClass('app-selected');
                if (echo.length) {
                    clearSelectionInEcho(echo);
                }
                link.addClass('app-selected');
                checkIfMultiSelect(dataView, link);
                dataView.extension().tap(dataContext, 'none');
                if (echo.length)
                    refreshEchoToolbarWithDelay(dataView, echo);
                else
                    getPageInfo(dataView).echoChanged = true;
                callback();
                //showRowContext(link, popupOptions);
            }
        }

        function displayRowContext(target) {
            //var echo = findEcho(link),
            //    dataContext = link.data('data-context');
            //if (dataContext) {
            //    dataViewUILinks(dataView).removeClass('app-selected');
            //    if (echo.length) {
            //        clearSelectionInEcho(echo);
            //    }
            //    link.addClass('app-selected');
            //    checkIfMultiSelect(dataView, link);
            //    dataView.extension().tap(dataContext, 'none');
            //    if (echo.length)
            //        refreshEchoToolbarWithDelay(dataView, echo);
            //    else
            //        mobile.pageInfo(dataView).echoChanged = true;
            //    showRowContext(link, popupOptions);
            //}
            selectAndCall(function () {
                showRowContext(link, popupOptions)
            });
        }

        if (target.length) {

            var dataContext = link.data('data-context');
            if (!dataContext)
                return;
            fieldName = target.attr('class').match(/app\-field\-(\w+)/);
            if (fieldName)
                fieldName = fieldName[1];
            if (fieldName) {
                event.preventDefault();
                field = dataView.findField(fieldName);
                allowQBE = field.AllowQBE;
                allowSorting = field.AllowSorting;
                originalField = dataView.findFieldUnderAlias(field.Name);

                if (!originalField.ItemsDataController) {
                    copyTest = new RegExp('\\b' + fieldName + '\\s*=\\s*\\w+');
                    $(dataView._fields).each(function () {
                        var f = this;
                        if (f.Copy && copyTest.exec(f.Copy)) {
                            originalField = f;
                            viewItemText = String.format(resourcesLookup.DetailsToolTip, dataView._allFields[f.AliasIndex].HeaderText);
                            return false;
                        }
                    });
                }

                if (originalField.ItemsDataController && !originalField.ItemsTargetController) {
                    items.push({
                        text: viewItemText, icon: 'material-icon-arrow-forward', callback: function () {
                            selectAndCall(function () {
                                mobile.details({ field: originalField });
                            });
                        }
                    });
                }
                if (allowSorting) {
                    if (items.length)
                        items.push({});
                    items.push(
                        { text: fieldSortOrderText(field, 'asc'), icon: sortExpression(dataView, fieldName) == 'asc' ? 'check' : false, context: 'asc', callback: changeSortOrder },
                        { text: fieldSortOrderText(field, 'desc'), icon: sortExpression(dataView, fieldName) == 'desc' ? 'check' : false, context: 'desc', callback: changeSortOrder })
                }
                if (allowQBE) {
                    if (items.length)
                        items.push({});
                    filterDefList = resourcesData.Filters[field.FilterType].List;
                    fieldValue = dataContext.row[field.Index];

                    $(dataView._filter).each(function () {
                        var f = this;
                        if (f.startsWith(fieldName + ':')) {
                            currentFilter = f;
                            items.push(
                                { text: String.format(resourcesHeaderFilter.ClearFilter, field.HeaderText), icon: 'material-icon-clear', context: { id: dataView._id, field: fieldName, op: '$clear' }, callback: filterDataViewByFieldValue },
                                {})
                            return true;
                        }
                    });
                    if (fieldValue == null) {
                        createItem('$isempty');
                        createItem('$isnotempty');
                    }
                    else {
                        text = field.text(fieldValue);
                        if (field.FilterType == 'Text')
                            text = '\"' + text + '\"';
                        if (field.FilterType == 'Text') {
                            createItem('=', text);
                            createItem('<>', text);
                            createItem('$contains', text);
                            createItem('$doesnotcontain', text);
                        }
                        else if (field.FilterType == 'Boolean') {
                            createItem('$true');
                            createItem('$false');
                        }
                        else {
                            // Number and Date
                            createItem('=', text);
                            createItem('<>', text);
                            createItem('<=', text);
                            createItem('>=', text);
                            createItem('<', text);
                            createItem('>', text);
                        }
                    }
                }
                if (items.length) {
                    items.push({}, {
                        text: labelMore, icon: 'material-icon-more-horiz', callback: function () {
                            displayRowContext(target);
                        }
                    });
                    showListPopup({ anchor: target, title: field.HeaderText, items: items, x: lastTouchX(event.pageX), iconPos: 'left' });
                }
                else
                    displayRowContext(target);
            }
        }
        else if ($(event.target).closest('.app-grid-header').length)
            return;
        else if ($(event.target).closest('.app-presenter').length)
            return;
        else {
            link = $(event.target).closest('.ui-btn');
            if (link.length)
                displayRowContext(link);
            else
                event.preventDefault();
        }
        return false;
    }

    function handleAppButtonClick(event) {
        var link = $(event.target).closest('.ui-btn'),
            icon = link.data('icon'),
            iconList,
            lastOption;
        if (link.is('.app-btn-promo')) {
            iconList = link.data('icon-list');
            if (iconList) {
                callWithFeedback(link, function () {
                    var options = [],
                        promoIcon = link.attr('data-icon'),//'ui-icon-' + link.data('icon'),
                        icon, text, desc;
                    if (link.is('.app-btn-promo-cancel')) {
                        $('.ui-popup-screen.in').trigger('vclick');
                        return false;
                    }

                    $(iconList.icons).each(function () {
                        icon = this;
                        if (!icon.match(noPromoRegex)) {
                            text = iconList.labels[icon].split(/\n/);
                            options.push({
                                text: text[0], desc: text[1], icon: icon, context: icon, callback: function (contextIcon) {
                                    mobile.executeInContext(contextIcon);
                                }
                            });
                        }
                    });
                    lastOption = options[options.length - 1];
                    //if (options.length == 1 && options[0].callback)
                    //options[options.length].callback(options[0].context);
                    if (lastOption && lastOption.callback)
                        lastOption.callback(lastOption.context);
                    else {
                        // TODO: refactor this code to read "Promo" context for actions
                        link.addClass('ui-icon-delete app-btn-promo-cancel').removeClass(promoIcon);
                        showListPopup({
                            anchor: mobile.promo(), items: options, iconPos: 'left', y: link.offset().top - 1, //arrow: 'b',
                            afterclose: function () {
                                link.removeClass('ui-icon-delete app-btn-promo-cancel').addClass(promoIcon);
                            }
                        });
                    }
                });
                return false;
            }
        }
        var callback = nop;
        if (icon == 'search')
            //var pageInfo = getPageInfo(),
            //    dataView = pageInfo && pageInfo.dataView;
            //if (dataView) {
            //    if (dataView.extension().useAdvancedSearch() && !_pendingQueryText)
            //        callWithFeedback(link, function () {
            //            startSearch(dataView, _pendingQueryText);
            //        });
            //    else
            //        startSearch(dataView);
            //}
            callback = _app.search;
        else if (icon == 'user')
            callback = function () {
                showUserContext(link);
            };
        else if (icon == 'phone' && android)
            mobile.executeInContext(icon);
        else if (icon == 'apps')
            callback = function () {
                showApps('right')
            };
        else
            callback = function () {
                mobile.executeInContext(icon == 'check' ? 'ok' : icon);
            };
        callWithFeedback(link, callback);

        return false;
    }

    function loadInternalPage(href, pageTransition, isExternal) {
        if (busyIndicator()) return;
        href = $mobile.path.convertUrlToDataUrl($mobile.path.makeUrlAbsolute(href, $mobile.path.documentBase));
        var targetPage = $body.find('> div[data-url]')
            .filter(function () {
                return $(this).attr('data-url') == href;
            });
        if (isExternal) {
            busyBeforeUnload();
            location.href = href;
        }
        else if (targetPage.length) {
            //$mobile.navigate(href, { transition: pageTransition });
            targetPage.appendTo($body);
            var p = getPageInfo(targetPage.attr('id'));
            if (p) {
                mobile.makeModalOrPanel(p);
                p.navigateInfo = { href: href, transition: pageTransition };
                mobile.changePage(p.id);
            }
            else
                $mobile.navigate(href, { transition: pageTransition });
        }
        else {
            busyIndicator(true);
            $.ajax({
                url: href,
                dataType: "html"
            }).done(function (result) {
                busyIndicator(false);
                var pageContent = result.match(/<td\s+id\s*=\s*"PageContent"\s*>([\s\S]+)?<\/td>\s*<td\s+id\s*="PageContent.+"\s*>/i);
                if (!pageContent)
                    pageContent = result.match(/<div\s+id\s*=\s*"PageContent".+?>([\s\S]+)?<\/div>\s*<footer /i);
                if (pageContent && !result.match(/\$create\(Web.DataView|\s+data-controller\s*=\s*"/)) {
                    var template = pageContent[1],
                        pageTemplate,
                        scripts = new Sys.StringBuilder(),
                        scriptIterator = /<script.+?>([\s\S]+?)<\/script>/ig,
                        scriptFragment,
                        options,
                        page, pageId, pageCount = 1;
                    // convert template to a page
                    while (scriptFragment = scriptIterator.exec(template))
                        scripts.append(scriptFragment[1]);
                    template = template.replace(scriptIterator, '');
                    if ((template.match(/data-content-framework="bootstrap"/) && !$('[data-content-framework="bootstrap"]').length)) {
                        var themeLink = $('link.app-theme'),
                            themeHref = themeLink.attr('href');
                        if (themeHref)
                            if (themeHref.match(/\&_cf=$/))
                                themeLink.attr('href', themeHref + 'bootstrap');
                            else // Bootstrap is not "styled" in debug mode in IE11
                                $('<link href="' + __baseUrl + 'css/sys/bootstrap.css" rel="stylesheet" type="text/css"/>').insertBefore(themeLink);
                    }
                    pageTemplate = $('<div></div>').appendTo($body).hide().attr('data-href', href);
                    pageTemplate.html(template).data('scripts', scripts.toString());
                    // create a page
                    pageId = pathToId(href);
                    while (mobile.pageInfo(pageId))
                        pageId = pathToId(href) + pageCount++;
                    options = { pageId: pageId, selector: pageTemplate, transition: pageTransition, dynamic: true },
                        mobile.pageInfo({ id: options.pageId, text: options.pageId, url: href, root: true });
                    mobile.start(options);

                    // destroy the page template
                    pageTemplate.data('scripts', null).remove();
                }
                else {
                    busyBeforeUnload();
                    location.href = href;
                }
            }).fail(function () {
                busyIndicator(false);
            });
        }

    }

    function handleToggleClick(event) {
        var target = $(event.target);
        if (target.is('.app-btn-toggle')) {
            target.addClass('ui-btn-active');
            $body.focus();
            setTimeout(function () {
                target.removeClass('ui-btn-active');
                var collapsibleText = target.prev(),
                    listItem,
                    wrapper;

                function collapse() {
                    collapsibleText.removeClass('app-text-expanded');
                    target.attr('title', resourcesForm.Maximize).toggleClass('ui-icon-carat-u ui-icon-carat-d');
                    stickyHeader();
                }

                if (collapsibleText.is('.app-text-expanded')) {
                    listItem = collapsibleText.closest('.dv-item,.ui-field-contain');
                    if (listItem.length) {
                        wrapper = findScrollable(target);
                        animatedScroll(wrapper, listItem.offset().top - (wrapper.offset().top - wrapper.scrollTop()) - wrapper.height() * .33, collapse);
                    }
                    else
                        collapse();
                }
                else {
                    collapsibleText.addClass('app-text-expanded');
                    target.attr('title', resourcesForm.Minimize).toggleClass('ui-icon-carat-u ui-icon-carat-d');
                }
            }, feedbackDelay);
            return false;
        }
    }

    function toggleSidebarState(mini) {
        if (appBars.left.visible) {
            var toggled;
            if (!arguments.length) {
                mini = !appBars.left.mini;
                toggled = true;
                $settings('ui.sidebar.mini', mini);
                userVariable('minisidebar', mini);
                mobile.busy(true);
            }
            appBars.left.mini = mini;
            $body.toggleClass('app-has-minisidebar-left', appBars.left.mini);
            //appBars.left.width = appBars.left.inner.outerWidth() - scrollbarInfo.width;
            updateSidebarInner();
            updateMenuStripPosition(true);
            if (notifyBar && notifyBar.is(':visible') && !notifyBar.is('.app-bar-notify-left,.app-bar-notify-center'))
                notifyBar.css('left', appBars.left.width);
            pageResized(true);
            $(document).trigger('sidebarstatechanged.app');
            refreshContext(false, 0, function () {
                if (appBars.left.visible) {
                    var inner = appBars.left.inner;
                    inner.css({ 'transform': 'translate3d(' + (mini ? '100' : '-66') + '%,0,0)' });
                    setTimeout(function () {
                        inner.css({ 'transition': 'transform 96ms ease-in-out' });
                        setTimeout(function () {
                            inner.css('transform', '').one('transitionend', function () {
                                inner.css('transition', '');
                            });
                            mobile.busy(false);
                        });
                    });
                }
            });
        }
    }

    function showAllApps() {
        showApps(null, true);
    }

    function showApps(position, all, ignoreTabBar) {
        var context = [];
        if (all) {
            var oldContext = currentContext,
                context = [
                    {
                        text: resourcesMobile.Back, icon: iconBack, callback: function () {
                            currentContext = oldContext;
                            showContextPanel(context, '#app-panel-apps');
                        }
                    },
                    {}
                ];
        }
        if (showHideTabBar() && !ignoreTabBar)
            enumerateMenuItems(context, true, menu.nodes, 1);
        else
            enumerateMenuItems(context, true, all ? menu.nodes : null, all ? 1 : 0, !ignoreTabBar);
        showContextPanel(context, '#app-panel-apps' + (all ? '-all' : ''), { position: position || 'left' });
    }

    function handleMenuButtonClick(e) {
        var menuButton = $(e.target);
        if (skipTap) return;
        noTap();
        activeLink(menuButton, false);
        hideTooltip();
        if (menuButton.attr('data-action') == '#app-back') {
            mobile._backText.addClass('ui-btn-active');
            callWithFeedback(menuButton, function () {
                mobile._backText.removeClass('ui-btn-active');
                goBack();
            });
        }
        else {
            closePopupsAndPanels(true);
            callWithFeedback(menuButton, function () {
                if (appBars.left.visible) {
                    toggleSidebarState();
                }
                else {
                    var context = [{ text: appName(), itemClassName: 'app-logo' }],
                        menuPanel = $('#app-panel-menu-scope.ui-panel-open');
                    if (menuPanel.length)
                        menuPanel.panel('close');
                    else {
                        if (!mobile._toolbar.find('.app-icon-avatar').parent().is(':visible'))
                            enumerateUserContext(context, true);
                        if (context.length)
                            context.push({});
                        if ((!menuStripIsVisible() || menu.nodesWithIcons.length && $settingsEnabled('ui.menu.tiles')) || !appBars.left.visible && $settings('ui.menu.location') != 'toolbar') {
                            if (showHideTabBar(mobile.pageInfo()))
                                enumerateMenuItems(context, true, menu.nodes, 1)
                            else
                                enumerateMenuItems(context, true);
                            context.push({});
                        }
                        if ($settingsEnabled('settings.enabled'))
                            context.push({ text: resourcesMobile.Settings, icon: 'material-icon-settings', transition: true, callback: configureSettings });
                        showContextPanel(context, '#app-panel-menu', { position: 'left' });
                    }
                }
            });
        }
        return false;
    }

    function handleLinkClick(event) {
        if (event.isDefaultPrevented())
            return;
        var eventTarget = $(event.target),
            link = eventTarget.is('a') ? eventTarget : eventTarget.closest('a'),
            href = link.attr('href') || (link.attr('data-action-path') ? '#app-action' : ''),
            target;
        //if (pageEditMode()) {
        //    if (link.attr('data-editable') == 'true')
        //        event.preventDefault();
        //}
        if (isInTransition)
            return;
        switch (href) {
            case '#app-menu':
                target = '#app-btn-menu';
                break;
            case '#app-context':
                target = '#app-btn-context';
                break;
            case '#app-back':
                target = goBack;
                break;
            case '#app-details':
                target = function () {
                    var pageInfo = getPageInfo(),
                        extension;
                    if (pageInfo && pageInfo.dataView) {
                        extension = pageInfo.dataView.extension();
                        extension.command(extension.commandRow(), 'Select');
                        _pendingPageText = link.attr('data-field-text');
                        pageInfo.dataView._viewDetails(link.attr('data-field-name'));
                    }
                };
                break;
            case "#app-refresh":
                target = function () {
                    var pageInfo = getPageInfo();
                    if (pageInfo && pageInfo.dataView)
                        pageInfo.dataView.sync();
                };
                break
            case "#app-clear-filter":
                target = function () {
                    var pageInfo = getPageInfo();
                    if (pageInfo && pageInfo.dataView)
                        clearDataFilter(pageInfo.dataView, false);
                };
                break;
            case "#app-filter":
                target = function () {
                    var pageInfo = getPageInfo();
                    if (pageInfo && pageInfo.dataView)
                        configureFilter({ mode: 'everything' });
                };
                break;
            //case '#app-lookup':
            //    target = function () {
            //        var context = link.data('data-context');
            //        blurFocusedInput();
            //        mobile.showLookup2(context);
            //        context.query = null;
            //        activeLink(link, false);
            //    };
            //    break;
            case '#app-action':
                if (link.is('.app-btn-disabled')) {
                    link.removeClass('ui-btn-active');
                    return false;
                }
                target = function () {
                    var icon = link.attr('class').match(/ui-icon-([\w\-]+)/) || [0, 'carat-r'],
                        path = link.attr('data-action-path');
                    if (path == 'wizard-next')
                        setTimeout(function () {
                            wizard('next', { container: findScrollable() });
                        });
                    else if (path == 'wizard-prev')
                        setTimeout(function () {
                            wizard('prev', { container: findScrollable() });
                        });
                    else if (link.is('.app-btn-more'))
                        showMoreButtonsInForm(link);
                    else if (icon) {
                        if (icon[1] == 'carat-r')
                            mobile.executeInContext(null, link.text(), path);
                        else
                            mobile.executeInContext(icon[1], null, path);
                    }
                };
                break;
            case "#close-popup":
                target = function () {
                    $('.app-popup-image').popup('close');
                };
                event.preventDefault();
                break;
            default:
                if (href) {
                    if (href.match(/^tel/)) {
                        openHref(href);
                        target = nop;
                    }
                    else if (link.attr('target'))
                        _window.open(href, link.attr('target'));
                    else {
                        var contentType = link.attr('data-content-type'),
                            previewPopup;
                        if (contentType && contentType.match(/^image/))
                            target = function () {
                                previewPopup = $('#app-popup-image');
                                if (!previewPopup.length) {
                                    previewPopup = $(
                                        '<div id="app-popup-image" class="app-popup-image" data-role="popup" data-overlay-theme="b" data-theme="b" data-position-to="window">' +
                                        '<a href="#close-popup" class="ui-btn ui-corner-all ui-shadow ui-btn ui-icon-close-circle ui-btn-icon-notext ui-btn-right"/>' +
                                        '<img class="app-image-preview" style="max-width:10000px"/><div class="app-image-preview-box"></div>' +
                                        '</div>').appendTo($body).popup(defaultPopupOptions('none')).popup('option', 'history', true);
                                    previewPopup.find('.app-image-preview').one('load', function (event) {
                                        var image = $(event.target);
                                        setTimeout(function () {
                                            busyIndicator(false);
                                            image.width('').height('');
                                            var imageBox = previewPopup.find('.app-image-preview-box'),
                                                screen = mobile.screen(),
                                                imageWidth = image.width(),
                                                maxImageWidth = screen.width * .9,
                                                imageHeight = image.height(),
                                                maxImageHeight = screen.height * .9;
                                            if (imageWidth > maxImageWidth) {
                                                imageHeight *= maxImageWidth / imageWidth;
                                                imageWidth = maxImageWidth;
                                                if (imageHeight > maxImageHeight) {
                                                    imageWidth *= maxImageHeight / imageHeight;
                                                    imageHeight = maxImageHeight;
                                                }
                                            }
                                            else if (imageHeight > maxImageHeight) {
                                                imageWidth *= maxImageHeight / imageHeight;
                                                imageHeight = maxImageHeight;
                                            }
                                            image.hide();
                                            imageBox.css({
                                                'background': '',
                                                'width': imageWidth + 'px',
                                                'height': imageHeight + 'px'
                                            }).show();
                                            previewPopup.popup('reposition', { positionTo: 'window' });
                                            imageBox.css({
                                                'background': String.format('url({0})', image.attr('src')),
                                                'background-size': String.format('{0}px {1}px', imageWidth, imageHeight)
                                            });
                                        }, 100);
                                    });
                                }
                                busyIndicator(true);
                                previewPopup.find('.app-image-preview-box').hide();
                                previewPopup.find('.app-image-preview').attr('src', '').width(100).height('').show().attr('src', href + '&_ticks=' + new Date().getTime());
                                popupCloseCallback = function () {
                                    destroyPopup(previewPopup);
                                };
                                previewPopup.popupopen();
                            }
                        /*else if (href == '#') {
                        animatedScroll(findScrollable(), 0);
                        }*/
                        else {
                            target = mobile.openExternalUrl(href, link.is('[rel="external"]'));
                            //var loc = $mobile.path.parseUrl(href),
                            //    locationHash = loc.hash;
                            //if (loc.host)
                            //    target = function () {
                            //        // external link
                            //        if (busyIndicator()) return;
                            //        if (loc.host == 'maps.apple.com' || loc.host == 'maps.google.com' || link.is('[rel="external"]'))
                            //            openHref(href);
                            //        else {
                            //            var pageId = loc.pathname.replace(/\//g, '-').substring(1) || loc.host.replace(/\W/g, '-'),
                            //                text = loc.filename.replace(/\W/g, ' '),
                            //                page = mobile.page(pageId),
                            //                iframe = page.find('iframe');
                            //            busyIndicator(true);
                            //            if (iframe.length)
                            //                iframe.remove();
                            //            iframe = $('<iframe class="app-page-external"/>').attr('src', href).appendTo(findScrollable(page)/*.find('.ui-content .app-wrapper')*/.addClass('app-wrapper-external'))
                            //                .load(function () {
                            //                    if (getActivePageId() == pageId)
                            //                        busyIndicator(false);
                            //                    else
                            //                        setTimeout(function () {
                            //                            if (!getPageInfo(pageId))
                            //                                mobile.pageInfo({ id: pageId, /*text: text, headerText: text,*/external: true });
                            //                            mobile.changePage(pageId);
                            //                        }, 100);

                            //                });
                            //            if (iOS)
                            //                findScrollable(page)/*.find('.ui-content .app-wrapper')*/.css('overflow', 'auto');
                            //        }
                            //    }
                            if (!target && !link.closest('.ui-panel-inner').length) {
                                var loc = $mobile.path.parseUrl(href),
                                    locationHash = loc.hash;
                                if (locationHash) {
                                    if (link.closest('.app-content-framework').length) {
                                        // hash link
                                        if (eventTarget.data('app-click-test'))
                                            return;
                                        else {
                                            eventTarget.data('app-click-test', true);
                                            $mobile.linkBindingEnabled = false;
                                            event.type = 'click';
                                            $(document).trigger(event);
                                            eventTarget.data('app-click-test', null);
                                            $mobile.linkBindingEnabled = true;
                                            if (!event.isDefaultPrevented()) {
                                                if (locationHash == '#')
                                                    target = function () {
                                                        animatedScroll(findScrollable(), 0);
                                                    };
                                                else {
                                                    var section = locationHash && locationHash.length > 1 && findActivePage(locationHash + ',a[name="' + locationHash.substring(1) + '"]'),
                                                        wrapper = findScrollable(),
                                                        top;
                                                    if (section && section.length)
                                                        target = function () {
                                                            top = section.offset().top - (wrapper.offset().top - wrapper.scrollTop());
                                                            callWithFeedback(link, function () {
                                                                animatedScroll(wrapper, top);
                                                            });
                                                        }
                                                    else
                                                        target = function () {
                                                            if ($(locationHash).is('.ui-page'))
                                                                mobile.changePage(locationHash.substring(1));
                                                        };
                                                }
                                            }
                                        }
                                        if (target)
                                            event.preventDefault();
                                    }
                                    else if (locationHash != '#')
                                        target = function () {
                                            $mobile.navigate(locationHash);
                                        }
                                }
                                else
                                    // internal link
                                    target = function () {
                                        loadInternalPage(href, link.attr('data-transition'), link.attr('rel') == 'external');
                                    }
                            }
                        }
                    }
                }
        }
        if (target && !mobile.busy()) {
            if (link.attr('download')) {
                link.click();
                return;
            }
            callWithFeedback(link, function () {
                mobile.busy(false);
                if (typeof target == 'string') {
                    var selector = target;
                    target = function () {
                        $(selector).trigger('vclick');
                    }
                }
                target();
            });
            return false;
        }
    }

    if (typeof Web == 'undefined') Web = { DataView: {} }

    Web.DataView.MobileBase = function () {
        Web.DataView.MobileBase.initializeBase(this);
    }

    Web.DataView.MobileBase.prototype = {
        initialize: function () {
        },
        show: function () {

        },
        hide: function () {

        },
        systemFilter: function () {
            return null;
        },
        reset: function (full) {

        },
        notify: function (sender) {
            //var that = this,
            //    dataView = that.dataView(),
            //    pageInfo = mobile.pageInfo(dataView);
            //$(mobile._pages).each(function () {
            //    var dv = this.dataView;
            //    if (dv && dv != dataView && dv.get_parentDataView() == dataView && dv.get_isForm())
            //        dv._calcNotify = sender; // mark the form view to recalculate "controller:..." field values from the server
            //});

            //pageInfo.initCallback = function () {
            //    dataView.sync();
            //}
        },
        wait: function () {

        },
        dataView: function (owner) {
            if (owner == null)
                return this._dataView;
            else
                this._dataView = owner;
        },
        inserting: function () {
            return this.dataView().inserting();
        },
        editing: function () {
            return this.dataView().editing();
        },
        content: function () {
            var dataView = this._dataView;
            return mobile.content(dataView._id);
        },
        commandRow: function (value) {
            var that = this;
            if (arguments.length == 0)
                return that._commandRow;
            else {
                if (value) {
                    var row = that._commandRow = value.slice(0),
                        dataView = that.dataView();
                    dataView._rows = [row.slice(0)];
                    if (!dataView.get_isForm()) {
                        dataView._editRow = null;
                        dataView._originalRow = null;
                    }
                    return row;
                }
                else
                    return value;
            }
        },
        command: function (row, commandName, argument, causesValidation, path) {
            var that = this,
                dataView = that.dataView(),
                rowIndex = 0,
                keyFields = dataView._keyFields,
                obj;
            if (row && !row.length)
                if (keyFields.length && keyFields[0].Name in row) {
                    obj = row;
                    row = [];
                    $(dataView._allFields).each(function () {
                        row.push(obj[this.Name]);
                    });
                }
                else {
                    row = null;
                    rowIndex = null;
                }
            that.commandRow(row);
            dataView.executeRowCommand(row ? rowIndex : null, commandName, argument, causesValidation, path);
        },
        action: function (row, scope, actionIndex, rowIndex, groupIndex, confirmed) {
            this.commandRow(row);
            var dataView = this.dataView().
                a;
            if (arguments.length == 1) {
                a = arguments[0];
                this.executeRowCommand(0, a.CommandName, a.CommandArgument, a.CausesValidation, a.Path)
            }
            else
                dataView.executeAction(0, scope, actionIndex, rowIndex, groupIndex, confirmed);
        },
        itemMap: function (listMode) {
            return createItemMap(this.dataView(), listMode);
        },
        stateChanged: function () {
            refreshContext();
        },
        lookupInfo: function (value) {
            var dataView = this.dataView();
            if (arguments.length) {
                dataView._lookupInfo = value;
            }
            else
                return dataView._lookupInfo;
        },
        viewDescription: function () {
            var dataView = this.dataView(),
                showDescription = dataView._showDescription != false,
                viewDescription = showDescription && dataView.get_view().HeaderText;
            viewDescription = showDescription ? dataView._formatViewText(resourcesViews.DefaultDescriptions[viewDescription], true, viewDescription) : '';
            return viewDescription ? viewDescription.replace(/\n/g, '<p/>') : null;
        },
        executeInContext: function (command, argument, ignoreLookup, testOnly) {
            var oldLookupInfo = this.lookupInfo(),
                context = [],
                result;
            if (ignoreLookup)
                this.lookupInfo(null);
            this.context(context);
            if (ignoreLookup)
                this.lookupInfo(oldLookupInfo);
            $(context).each(function () {
                var item = this,
                    itemCommand = item.command;
                if (itemCommand && itemCommand == command && (argument == null || item.argument == argument)) {
                    result = item;
                    if (!testOnly)
                        executeContextAction(item);
                    return false;
                }
            });
            return result;
        },
        tagged: function (tag) {
            return this.dataView().get_isTagged(tag);
        },
        filterStatus: function (brief, ignoreAdvancedSearch) {
            var that = this,
                dataView = that.dataView(),
                sb,
                searchFilter = advancedSearchFilter(dataView),
                filter = dataView ? dataView.get_filter() : null,
                isSearched = searchFilter.length > 0,
                isFiltered = dataView && filter.length > 0 && !dataView.filterIsExternal();
            if ((isFiltered || isSearched) && that.options().filterDetails) {
                sb = new Sys.StringBuilder();
                if (isSearched && !ignoreAdvancedSearch)
                    dataView._renderFilterDetails(sb, searchFilter, false);
                if (isFiltered)
                    dataView._renderFilterDetails(sb, filter, !brief);
                return sb.toString().replace(filterDetailsRegex, '').replace(filterDetailsRegex2, '\"').replace(filterDetailsRegex3, '\"$1');
            }
            return null;
        },
        aggregates: function () {
            var aggregates = this._dataView._aggregates;
            return aggregates && aggregates.length ? aggregates : null;
        },
        aggregateLabels: function () {
            var labels = [];
            $(this._dataView._fields).each(function () {
                var f = this;
                labels.push(f.Aggregate == 0 ? null : String.format(Web.DataViewResources.Grid.Aggregates[Web.DataViewAggregates[f.Aggregate]].FmtStr, '').trim());
            });
            return labels;
        },
        //calculate: function (causedBy) {
        //},
        //afterCalculate: function (values) {
        //},
        _disposeSession: function () {
            var dataView = this.dataView(),
                pageSession = dataView._pageSession,
                value, key;
            if (pageSession) {
                for (key in pageSession) {
                    value = pageSession[key];
                    if (value && typeof value == 'object') {
                        if (value.length == 1 && value[0] && value[0].tagName == 'STYLE')
                            value.remove();
                        delete pageSession[key];
                    }
                }
                delete dataView._pageSession;
            }
        },
        focus: function (fieldName, message) {
            var that = this,
                container = findActivePage('[data-input-container="' + that._dataView._id + '"]');
            if (container.length)
                _input.focus({ container: container, fieldName: fieldName, message: message });
            /* else {
                 var activePage = findActivePage(),
                     fieldInput = activePage.find('.app-field-' + fieldName),
                     item,
                     popup = $('.app-popup-message'),
                     tabs = activePage.find('.app-tabs-form');
                 if (popup.length)
                     return;
                 if (fieldInput.length) {
                     item = fieldInput.closest('li');
                     if (fieldInput.attr('type') == 'hidden') {
                         fieldInput = fieldInput.prev();
                         if (!fieldInput.is('.app-container-scrollable'))
                             fieldInput = item.find('input[type="text"]');
                     }
                     if (tabs.length) {
                         var dataView = mobile.dataView(),
                             field = dataView.findField(fieldName);
                         $(dataView._categories).each(function () {
                             var category = this;
                             if (category.Index == field.CategoryIndex) {
                                 tabs.find('.ui-btn').each(function () {
                                     var tabLink = $(this);
                                     if (category.Tab == tabLink.text()) {
                                         if (!tabLink.is('.ui-btn-active'))
                                             tabLink.trigger('vclick');
                                         return false;
                                     }
     
                                 });
                                 return false;
                             }
                         });
                     }
     
                     //focusFormInputOld(activePage, fieldInput, function () {
                     //    popup = $('<div class="ui-content app-popup-message"></div>').html(message).popup({
                     //        history: false,
                     //        arrow: 't,b',
                     //        overlayTheme: 'b',
                     //        positionTo: fieldInput,
                     //        afteropen: function () {
                     //        },
                     //        afterclose: function () {
                     //            destroyPopup(popup);
                     //            fieldInput.focus();
                     //        }
                     //    }).popupopen().on('vclick', function () {
                        //        closePopup(popup);
                        //        return false;
                        //    });
                        //});
                    }
                    }*/
        }
    }

    /* implementation of extensions */

    Web.DataView.Extensions = {}

    /* dataview */

    Web.DataView.prototype.pageProp = function (name, value) {
        name = this._id + '_' + name;
        if (arguments.length == 1)
            return pageVariable(name);
        else
            pageVariable(name, value);
    }

    Web.DataView.prototype.viewProp = function (name, value) {
        name = (this._viewId || 'grid1') + '_' + name;
        if (arguments.length == 1)
            return this.pageProp(name);
        else
            this.pageProp(name, value);
    }

    Web.DataView.prototype.session = function (name, value, viewId) {
        var that = this,
            pageSession = that._pageSession;
        if (!pageSession)
            pageSession = that._pageSession = {}
        name = /*'_session_' + this._id + '_' +*/ (viewId || that._viewId || 'grid1') + '_' + name;
        if (arguments.length == 1)
            return pageSession[name];// $(document).data(name);
        else
            //$(document).data(name, value);
            if (value)
                pageSession[name] = value;
            else
                delete pageSession[name];
    }

    Web.DataView.prototype.sessionRemove = function (name) {
        var that = this,
            pageSession = that._pageSession,
            list = [], p;
        if (pageSession) {
            name = that._viewId + '_' + name;
            for (p in pageSession)
                if (p.indexOf(name) == 0)
                    list.push(p);
            list.forEach(function (name) {
                delete pageSession[name];
            });
        }
    }

    Web.DataView.prototype.mobileUpdated = function () {
        var that = this,
            userViewId,
            userSortExpression,
            userGroupExpression,
            filter;
        if (that.tagged('history-search-none'))
            pageVariable(that._id + '_*', { viewTabs: null, viewId: null, filter: null, advancedSearchFilter: null, quickFind: null });

        if (!that._startPage && !that.get_useCase() && !that.get_lastCommandName()) {
            userViewId = that.pageProp('viewId');
            if (userViewId)
                that._viewId = userViewId;
            userSortExpression = that.viewProp('sortExpression');
            userGroupExpression = that.viewProp('groupExpression');
            filter = that.viewProp('filter');
            if (userSortExpression)
                that._sortExpression = userSortExpression;
            if (userGroupExpression)
                that._groupExpression = userGroupExpression;
            if (filter && filter.length)
                that._filter = (that._filter || []).concat(filter);
        }


        var elem = $(that._element),
            activator = parseActivator(elem, document.title),
            pageHeader = _app.eval(elem.attr('data-page-header')),
            dataText = mobile._dataText,
            info = { id: that.get_id(), text: pageHeader || activator.text, headerText: dataText || pageHeader || activator.text, dataView: that, activator: activator };
        if (dataText)
            info.headerTextLocked = true;
        mobile._dataText = null;
        that._pageSize = userAgent.match(/iPad;.*CPU.*OS \d_\d/i) || !isTouchPointer ? 30 : 30 // 6 -debug; 24 - production; // possible page size that works for 1, 2, and 3 columns must divide by 2 and 3
        getPageInfo(info);
        if (!that._hidden && !that._filterSource && !mobile._appLoaded)
            $('<a class="app-action-navigate"/>')
                .attr('href', '#' + info.id)
                .appendTo($('<li>').appendTo(mobile.pageMenu())).text(activator.text);
        $(that._element).remove();
        that._element = null;
    }

    Web.DataView.prototype.gridSettings = function (settings) {
        var that = this,
            hasWidth, hasHidden;
        if (!arguments.length) {
            settings = that.viewProp('gridSettings');
            if (!settings) {
                settings = { sequence: [], width: {}, hidden: {} };
                //dataView.viewProp('gridSettings', settings);
            }
            return settings;
        }
        else {
            //if (settings)
            //    if (!settings.sequence.length && !settings.width.length && !settings.hidden.length)
            //        settings = null;
            if (settings) {
                for (hasWidth in settings.width);
                for (hasHidden in settings.hidden);
                if (!settings.sequence.length && !hasWidth && !hasHidden)
                    settings = null;
            }
            that.viewProp('gridSettings', settings)
        }
    }

    Web.DataView.prototype.gridChanged = function () {
        var that = this;
        gridStyleChanged(that);
        resetGridHeaderStyle(that);
        yardstick();
        setupGridHeaderStyle();
        restoreGridScrolling();
        //invalidateEmbeddedEcho(that._id);
        syncEmbeddedViews();
        fetchOnDemand();
    }


    /* grid view */

    Web.DataView.Extensions.Grid = function (dataView) {
        return new Web.DataView.MobileGrid(dataView);
    }

    Web.DataView.Extensions.DataSheet = function (dataView) {
        return new Web.DataView.MobileGrid(dataView);
    }

    Web.DataView.MobileGrid = function (dataView) {
        Web.DataView.MobileGrid.initializeBase(this);
        this.dataView(dataView);
    }

    Web.DataView.MobileGrid.prototype = {
        initialize: function () {
            var that = this,
                style = that.dataView().pageProp('viewStyle');
            if (!style)
                if (that.tagged('view-style-map') && !that.tagged('view-style-map-disabled'))
                    style = 'Map';
                else if (that.tagged('view-style-cards') && !that.tagged('view-style-cards-disabled'))
                    style = 'Cards';
                else if (that.tagged('view-style-list') && !that.tagged('view-style-list-disabled'))
                    style = 'List';
                else if (that.tagged('view-style-grid') && !that.tagged('view-style-grid-disabled'))
                    style = 'Grid'
                else if (that.tagged('view-style-charts') && !that.tagged('view-style-charts-disabled'))
                    style = 'Charts';
                else if (that.tagged('view-style-calendar') && !that.tagged('view-style-calendar-disabled'))
                    style = 'calendar';
                else {
                    style = /*isDesktop()*/_screen.width > 480 ? 'Grid' : 'List';
                    $(that._dataView._fields).each(function () {
                        if (this.OnDemand && this.OnDemandStyle != 1) {
                            style = 'Cards'; // thumbnails are detected
                            return false;
                        }
                    });
                    $(that._dataView._fields).each(function () {
                        if (this.Rows > 1) {
                            style = 'List'; // Notes or Rich Text is detected
                            return false;
                        }
                    });
                }
            that._viewStyle = style;
        },
        options: function () {
            var dataView = this.dataView();
            return { quickFind: dataView.get_isGrid() && dataView.get_showQuickFind(), filterDetails: true };
        },
        viewStyle: function (value, keyValue) {
            var that = this,
                dataView = that.dataView(),
                viewStyle = that._viewStyle;
            if (arguments.length == 0)
                return viewStyle;
            var activePage = findActivePage(),
                originalViewStyle = viewStyle/*,
                isCustomViewStyle = mobile.presenter('supports', originalViewStyle)*/;
            that._viewStyle = value;
            //if (value == 'Grid')
            //    dataView._pageSize = 30;
            //else
            //    dataView._pageSize = 18;
            if (activePage) {
                dataView.pageProp('viewStyle', value);
                that._instructed = false;
                if (mobile.presenter('supports', value)) {
                    // //that._reset = true;
                    //that._instructed = false;

                    // IMPORTANT: do not call show here - callback from sync/refresh will do that
                    //mobile.presenter('show', { name: value, id: dataView._id, container: activePage.find('.app-wrapper') });
                }
                else /*if (originalViewStyle == 'Grid' || value == 'Grid' || originalViewStyle == 'Map' || value == 'Map' || isCustomViewStyle)*/ {
                    that._reset = true;
                    //that._instructed = false;
                    //if (keyValue)
                    //    dataView.sync(keyValue);
                    //else
                    //    dataView.sync();
                }
                if (value == 'Grid')
                    resetGridScrolling(dataView);
                dataView.sync();
            }
            refreshContext();
        },
        tap: function (value, action) {
            if (!value) return;
            var dataView = this.dataView(),
                pageInfo = getPageInfo(dataView),
                row = value.row || value;
            if (dataView._busy() || mobile.busy()) return;
            if (dataView._hasKey()) {
                this.command(row, 'Select');
                var headerField = dataView.headerField(),
                    headerFieldValue = row[headerField.Index];
                if (headerFieldValue) {
                    mobile._dataText = headerField.format(headerFieldValue);
                    if (headerField.TextMode == 2)
                        mobile._dataText = htmlToText(mobile._dataText);
                }
                if (value.pageIndex != null)
                    this.currentPageIndex(value.pageIndex);
                if (action)
                    dataViewUILinks(dataView).each(function () {
                        var link = $(this),
                            dataContext = link.data('data-context');
                        if (dataContext && dataView.rowIsSelected(dataContext.row)) {
                            link.addClass('app-selected');
                            return false;
                        }
                    });
                if (!action || action == 'select') {
                    if (this.lookupInfo())
                        this.executeInContext('Select');
                    else {
                        var context = [];
                        mobile.navContext(context);
                        $(context).each(function () {
                            var option = this;
                            if (option.text && option.icon != 'dots' && !option.system && !option.isStatic) {
                                executeContextAction(option);
                                return false;
                            }
                        });
                    }
                }
            }
            else
                mobile.infoView(dataView, true, row);
            refreshContext();
        },
        clearSelection: function (updateUI) {
            var that = this,
                dataView = that.dataView(),
                selectedKey = dataView._selectedKey,
                pageInfo,
                clearEvent;
            if (selectedKey && selectedKey.length) {
                if (dataView.multiSelect() && dataView._selectedKeyList.length) {
                    toggleSelectedRows(dataView);
                    return;
                }
                clearEvent = $.Event('clear.dataview.app');
                dataView._clearSelectedKey();
                dataView._forgetSelectedRow(true);

                that._commandRow = null;
                that.currentPageIndex(null);
                clearEvent = $.Event('clear.dataview.app');
                clearEvent.dataView = dataView;
                $(document).trigger(clearEvent);

                if (updateUI) {
                    getEcho(dataView)/*$('#' + dataView._id + '_echo')*/.find('ul[data-role="listview"] a.app-selected').removeClass('app-selected');
                    getPageInfo(dataView).page/* $('#' + dataView._id)*/.find('.app-wrapper > ul[data-role="listview"] a.app-selected').removeClass('app-selected ui-btn-active');
                    refreshEchoToolbarWithDelay(dataView);
                }
                refreshContext();
            }
        },
        quickFind: function (value) {
            var dataView = this.dataView();
            if (arguments.length) {
                if (value && $settingsEnabled('search.quickFind.history.enabled')) {
                    var quickFindHistory = dataView.viewProp('quickFindHistory'),
                        maxDepth = $settings('search.quickFind.history.depth') || 100;
                    if (!quickFindHistory)
                        quickFindHistory = [];
                    var index = quickFindHistory.indexOf(value);
                    if (index > -1)
                        quickFindHistory.splice(index, 1);
                    quickFindHistory.splice(0, 0, value);
                    while (quickFindHistory.length > maxDepth && quickFindHistory.length)
                        quickFindHistory.splice(quickFindHistory.length - 1, 1);
                    dataView.viewProp('quickFindHistory', quickFindHistory)
                }
                dataView.viewProp('quickFind', value);
                dataView._executeQuickFind(value);
                persistDataFilter(dataView);
            }
            else {
                value = dataView.viewProp('quickFind') || '';
                return value;
            }
        },
        //useAdvancedSearch: function (value) {
        //    var dataView = this.dataView(),
        //        useAS;
        //    if (arguments.length)
        //        dataView.viewProp('useAdvancedSearch', value);
        //    else {
        //        useAS = dataView.viewProp('useAdvancedSearch');
        //        if (useAS == null)
        //            useAS = dataView.get_searchOnStart();
        //        return useAS == true;
        //    }
        //},
        dispose: function () {
            var that = this,
                dataView = that.dataView(),
                lookupInfo = dataView._lookupInfo,
                pageInfo = getPageInfo(dataView),
                content = pageInfo ? findScrollable(pageInfo.page) : null;
            if (content) {
                mobile.presenter('dispose', { id: dataView._id, container: content });
                disposeListViews(content);
                content.prev().find('h3, .app-bar-controls').off(); // clear action bar event handlers
                content.find('.app-map').each(function () {
                    var mapView = $(this),
                        mapInfo = mapView.data('data-map');
                    if (mapInfo) {
                        clearMarkers(mapInfo);
                        mapInfo.map = null;
                        mapView.data('data-map', null);
                    }
                });
            }
            if (lookupInfo) {
                lookupInfo.field = null;
                lookupInfo.callback = null;
            }
            that._disposeSession();
        },
        refresh: function () {
            var that = this,
                pageIndex = that.pageIndex(),
                pageCount = that.pageCount(),
                dataView = that.dataView(),
                totalRowCount = dataView._totalRowCount,
                pageInfo = getPageInfo(dataView),
                fields = dataView._fields,
                allFields = dataView._allFields,
                content = that.content(),
                page = pageInfo.page,// $('#' + pageInfo.id),
                rows = that.visibleDataRows(pageIndex),
                additionalRows,
                listview = content.find('ul[data-role="listview"]').show(),
                footer,
                gridFooter = page.find('.app-bar-hscrollbar'),
                aggregateFooter = page.find('.app-bar-aggregates'),
                aggregateItem,
                aggregates = that.aggregates(),
                pageSize = this.pageSize(),
                requiresReset = that._reset,
                keepKeyList = dataView._keepKeyList,
                allowLoadAtTop = pageIndex > 0,
                allowLoadAtBottom = pageIndex < pageCount - 1,
                scrollCount,
                skipClick,
                itemMap,
                showRowNumber = dataView.get_showRowNumber() == true,
                viewStyle = that.viewStyle(),
                isGrid,
                scrollable = content,
                scrollTop = scrollable.scrollTop(),
                scrollableCover,
                initialSelectedItemOffsetFromTop,
                selectedItemOffsetFromTop,
                header = scrollable.find('.app-page-header'),
                context, tabs,
                pageIsInvisible,
                hasMultipleViews,
                requiresPromoSpacing,
                actionBar = content.prevAll('.app-bar-actions');

            if (that.echoCallback) {
                that.echoCallback();
                return;
            }

            function registerRequiredInitialization(callback) {
                if (pageInfo.requiresInitCallback) {
                    pageInfo.initCallback = function () {
                        if (dataView.get_searchOnStart())
                            whenPageShown(function () {
                                setTimeout(function () {
                                    _app.search('show', dataView._id);
                                    //_app.search('show', { id: dataView._id, field: 'EmployeeID' });
                                }, 100);
                            });
                        else {
                            //refreshPresenterInstance();
                            callback();
                        }
                    }
                    pageInfo.requiresInitCallback = false;
                    mobile.navigate(pageInfo.id);
                    return true;
                }
                else
                    callback();
            }

            function ensurePageVisibility(visible) {
                if (visible) {
                    pageIsInvisible = page.css('display') != 'block';
                    if (pageIsInvisible) {
                        page.css({ 'display': 'block', 'z-index': -10 });
                        resetPageHeight(page);
                        //scrollWrapper(scrollable, initialScrollTop);
                    }
                }
                else {
                    if (pageIsInvisible) {
                        saveScrolling(page);
                        page.css({ 'display': '', 'z-index': '' });
                    }
                }
            }

            function clearSelectedKeyList() {
                if (!keepKeyList) {
                    var key = dataView.get_selectedKey();
                    dataView._selectedKeyList = key.length ? [key.join(';')] : [];
                    resetInstruction(dataView);
                }
            }


            function updatePageHeader() {
                var masterDataView = dataView.get_master(),
                    masterRow, row,
                    identifyingField;
                if (masterDataView)
                    if (masterDataView.inserting())
                        pageHeaderText(pageInfo.text, header);
                    else {
                        row = masterDataView.extension().commandRow();
                        identifyingField = masterDataView._fields[0];
                        identifyingField = masterDataView._allFields[identifyingField.AliasIndex];
                        var identifyingText = identifyingField.format(row[identifyingField.Index]);
                        if (identifyingField.TextMode == 2)
                            identifyingText = htmlToText(identifyingText);
                        pageHeaderText([identifyingText, pageInfo.text], header);
                    }
                if (dataView._lookupInfo && pageInfo.headerText != false) {
                    pageHeaderText(pageInfo.headerText, header);
                    if (topRowIndex != 0) {
                        page.attr('data-page-header', false);
                        pageHeaderText(false, header);
                    }
                }
            }

            if (!rows) {
                if (requiresReset)
                    clearListView(listview);
                dataView.goToPage(pageIndex, true);
                return;
            }

            var pendingNotification = dataView._pendingNotification;
            if (pendingNotification) {
                mobile.notify(pendingNotification);
                dataView._pendingNotification = null;
            }

            if (pageInfo.echoId)
                if (!pageInfo.echoInitialized) {
                    refreshEcho(pageInfo.echoId);
                    if (!pageInfo.displayed)
                        pageInfo.initialized = false;
                    return;
                }

            dataView._keepKeyList = false;

            if (requiresReset) {
                pageInfo.echoChanged = true;
                //if (that.commandRow())
                that.currentPageIndex(pageIndex);
            }

            if (!isInTransition && pageInfo.id != getActivePageId() && pageInfo.id != rootDataViewId && !dataView._lookupInfo) {
                clearSelectedKeyList();
                //executeRefreshCallback(pageInfo);
                fetchEchos();
                dataView._keepKeyList = true;
                return;
            }

            pageInfo.initialized = true;
            pageInfo.displayed = true;

            mobile.makeModalOrPanel(pageInfo);

            var showHeader = dataView.tagged(/\bpage\-header\-(\w+)\b/);
            if (showHeader)
                if (showHeader[1] == 'none') {
                    pageInfo.headerText = false;
                    pageHeaderText(false, header);
                }
                else
                    page.addClass('app-page-header-show');
            if (pageInfo.headerText != false)
                createPageHeaderIcon(dataView, page, header);

            checkStartCommand(dataView);

            if (that._autoSelect/* && pageInfo.requiresInitCallback*/) {
                var autoSelect = that._autoSelect;
                that._autoSelect = null;
                whenPageShown(function () {
                    //pageTransitions(false);
                    //whenPageShown(function () {
                    //    pageTransitions(true);
                    //});
                    that.tap(autoSelect.row, autoSelect.action);
                });
                //mobile.promo(false);
                //pageInfo.initCallback = function () {
                //    var autoSelect = that._autoSelect;
                //    that._autoSelect = null;
                //    mobile.busy(false);
                //    skipRefreshContext = true;
                //    that.tap(autoSelect.row, autoSelect.action);
                //    skipRefreshContext = false;
                //    //dataView._syncKey = dataView.get_selectedKey();
                //    requestDataViewSync(dataView, dataView.get_selectedKey()/*, false*/);
                //}
                //pageInfo.requiresInitCallback = false;
                //pageInfo.loading = true;
                //$('<h1 class="app-page-loading"/>').appendTo(content).text(loadingStatusText);
                //mobile.navigate(pageInfo.id);
                //return;
            }

            if (pageInfo.loading) {
                pageInfo.loading = false;
                page.find('.app-page-loading').remove();
            }

            selectedItem = listview.find('a.app-selected').first();
            if (selectedItem.length)
                initialSelectedItemOffsetFromTop = selectedItem.offset().top - scrollable.offset().top;
            if (requiresReset) {
                selectedItemOffsetFromTop = initialSelectedItemOffsetFromTop;
                clearSelectedKeyList();
            }
            if (dataView._requiresContextRefresh) {
                dataView._requiresContextRefresh = false;
                refreshContext();
            }


            if (!that._checkedViews) {
                that._checkedViews = true;

                if (!dataView._lookupInfo && dataView.get_showActionBar()) {
                    // create action bar
                    actionBar = createActionBar(dataView, content);
                    //if (dataView._id == getActivePageId())
                    //    refreshContext();
                }
                else {
                    // create tabs
                    context = [];
                    if (enumerateAvailableViews(context, false, pageInfo) > 1) {
                        tabs = [];
                        $(context).each(function () {
                            var option = this;
                            tabs.push({ text: option.text, active: option.icon == 'checked', callback: option.callback });
                        });
                        mobile.tabs('create', { tabs: tabs, className: 'ui-header-fixed app-tabs-views', id: dataView._id + '_viewTabs', scope: 'page', placeholder: content });
                        pageInfo.headerText = false;
                        pageHeaderText(false, header);
                        hasMultipleViews = true;
                    }
                }
            }
            if (actionBar.length)
                header.addClass('app-has-action-bar');

            if (mobile.presenter('supports', { name: viewStyle, id: dataView._id })) {

                function refreshPresenterInstance() {
                    dataView._rows.forEach(function (row) {
                        if (dataView.rowIsSelected(row)) {
                            if (!that.commandRow()) {
                                dataView._forgetSelectedRow(true);
                                that.command(row, 'Select');
                            }
                            else
                                that.commandRow(row);
                            return false;
                        }
                    });

                    updateViewTitle(actionBar, dataView, pageInfo);
                    showPresenterInstruction(scrollable, that);
                    mobile.bar('hide', gridFooter);
                    mobile.bar('hide', aggregateFooter);
                    result = mobile.presenter('show', { name: viewStyle, id: dataView._id, container: scrollable, reset: requiresReset });
                    updatePageHeader();
                    return result;
                }

                registerRequiredInitialization(refreshPresenterInstance);
                that._reset = false;
                return;
            }
            else if (!viewStyle.match(/Grid|Cards|List|Map/)) {
                viewStyle = that._viewStyle = gridViewIsPreferred() ? 'Grid' : 'List';
                dataView.pageProp('viewStyle', viewStyle);
            }

            dataView.groupBy();
            isGrid = viewStyle == 'Grid';
            itemMap = that.itemMap(viewStyle == 'List');

            configurePromoButton(dataView, itemMap.thumb != null);

            hidePresenters(scrollable, that, viewStyle == 'Map');
            if (viewStyle == 'Map') {
                mobile.bar('hide', gridFooter);
                mobile.bar('hide', aggregateFooter);
                //disposeListViews(content); // - this causes the main list view to re-create
                content.find('ul[data-role="listview"]').hide();

                removeStickyHeaderTemplate(page);
                if (!that.tagged('supports-view-style-map')) {
                    that.viewStyle(_screen.width > 480 ? 'Grid' : 'List');
                    refreshContext();
                    return;
                }
                iyf();
                if (requiresReset) {
                    that._reset = false;
                    that._mapPageWindow = null;
                    var hasSelection = false;
                    $(rows).each(function () {
                        if (dataView.rowIsSelected(this)) {
                            hasSelection = true;
                            that.tap(this, 'none');
                            return false;
                        }
                    });
                    if (!hasSelection)
                        that.clearSelection();
                    else
                        dataView.raiseSelected();

                    that.refresh();
                    return;
                }
                pageHeaderText(true);
                ensurePageVisibility(true);
                showPresenterInstruction(scrollable, that);
                updateViewTitle(actionBar, dataView, pageInfo);
                var mapView = scrollable.find('> .app-map');
                if (!mapView.length)
                    mapView = $('<div class="app-map"></div>').appendTo(scrollable).attr('data-map-for', dataView._id).hide();
                if (!mobile.registerAPI('Map')) {
                    scrollable.find('.app-presenter-instruction').hide();
                    $('<div class="app-api-error">Google MAP API Key is required. Specify a valid key in <i>Settings | Features | Touch UI</i> section of your project properties.<br/><br/><a href="https://developers.google.com/maps/documentation/javascript/get-api-key" rel="external">Get The Key Now!</a></div>').appendTo(mapView.empty().show());
                }
                fitTabs(page);
                ensurePageVisibility(false);

                function allocateMarkers(mapInfo) {
                    var address = createItemAddress(dataView),
                        unresolvedAddresses = [],
                        job = mobile.nextAsycJob(),
                        marker;

                    mapInfo.fit = true;

                    if (that._mapPageWindow == null)
                        clearMarkers(mapInfo);

                    $(rows).each(function (index) {
                        var row = this.slice(0),
                            geoLocation = rowToGeoLocation(row, address),
                            titleField = allFields[fields[0].AliasIndex],
                            title = titleField.text(row[titleField.Index]);
                        if (typeof geoLocation == 'string') {
                            if (geoLocation != 'ZERO_RESULTS') {
                                unresolvedAddresses.push({ address: geoLocation, title: title, row: row });
                                if (!mapInfo.geocoder)
                                    mapInfo.geocoder = new google.maps.Geocoder();
                            }
                        }
                        else {
                            marker = createMarker(that, mapView, geoLocation, title, row);
                            if (dataView.rowIsSelected(row))
                                selectMarker(mapInfo, marker);
                        }
                    });

                    fitMarkersOnMap(mapInfo);

                    function resolveAddress() {
                        var jobChanged = job != mobile.asyncJob();
                        if (unresolvedAddresses.length && !jobChanged) {
                            var addr = unresolvedAddresses[0],
                                time = new Date();
                            mapInfo.geocoder.geocode({ address: addr.address }, function (results, status) {
                                if (status == google.maps.GeocoderStatus.OK) {
                                    var loc = results[0].geometry.location,
                                        newMarker = createMarker(that, mapView, loc, addr.title, addr.row);
                                    if (dataView.rowIsSelected(addr.row))
                                        selectMarker(mapInfo, newMarker);
                                    cacheGeoLocation(addr.address, loc.lat(), loc.lng());
                                    fitMarkersOnMap(mapInfo);
                                    animateMarker(newMarker, 750, google.maps.Animation.DROP);
                                }
                                else {
                                    if (status == google.maps.GeocoderStatus.ZERO_RESULTS)
                                        cacheGeoLocation(addr.address);
                                    else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                                        setTimeout(resolveAddress, 1000);
                                        return;
                                    }
                                    // NEW: we are suppressing any error messages from maps.
                                    //else
                                    //    alert(status + ': ' + addr.address);
                                }
                                unresolvedAddresses.splice(0, 1);
                                var elapsedTime = new Date() - time,
                                    expectedTime = 675;
                                if (elapsedTime < expectedTime)
                                    setTimeout(function () {
                                        resolveAddress();
                                    }, expectedTime - elapsedTime);
                                else
                                    resolveAddress();
                            });
                        }
                        else {
                            if (!jobChanged && unresolvedAddresses.length == 0 && mapInfo.markers.length < maxMapMarkers) {
                                var mapPageWindow = that._mapPageWindow,
                                    nextPageIndex;
                                if (!mapPageWindow)
                                    mapPageWindow = that._mapPageWindow = { top: pageIndex, bottom: pageIndex, dir: 'up' };
                                if (mapPageWindow.dir == 'up')
                                    if (mapPageWindow.bottom < that.pageCount() - 1) {
                                        mapPageWindow.bottom++;
                                        mapPageWindow.dir = 'down'
                                    }
                                    else
                                        mapPageWindow.top--;
                                else
                                    if (mapPageWindow.top > 0) {
                                        mapPageWindow.top--;
                                        mapPageWindow.dir = 'up';
                                    }
                                    else
                                        mapPageWindow.bottom++;
                                nextPageIndex = mapPageWindow.dir == 'down' ? mapPageWindow.bottom : mapPageWindow.top;
                                if (nextPageIndex >= 0 && nextPageIndex < that.pageCount() - 1) {
                                    that.pageIndex(nextPageIndex);
                                    that.refresh();
                                    return;
                                }
                            }
                            if (!jobChanged) {
                                busyIndicator(false);
                                that._mapPageWindow = null;
                            }
                        }
                    }
                    // start geocoding job
                    busyIndicator(true);
                    resolveAddress();
                }

                function refreshMapInstance() {
                    var mapInfo = mapView.data('data-map');
                    if (mapInfo) {
                        mapView.show();
                        resetMapHeight(scrollable);
                        allocateMarkers(mapInfo);
                    }
                    else
                        if (mobile.supports('Map')) {
                            mapInfo = {
                                map: new google.maps.Map(mapView.get(0), { zoom: 8 }),
                                geocoder: null,
                                markers: []
                            };
                            mapView.data('data-map', mapInfo).show();
                            that.refresh();
                        }
                        else
                            setTimeout(refreshMapInstance, 100);
                }

                //if (pageInfo.requiresInitCallback) {
                //    //pageInfo.initCallback = function () {
                //    //    if (dataView.get_searchOnStart())
                //    //        searchOnStart(dataView);
                //    //    else
                //    //        refreshMapInstance();
                //    //}
                //    //pageInfo.requiresInitCallback = false;
                //    //mobile.navigate(pageInfo.id);
                //    pageInfo.initCallback = initRequiredCallback(refreshMapInstance);
                //}
                //else if (pageInfo.requiresReturnCallback) {
                //    pageInfo.returnCallback = function () {
                //        refreshMapInstance();
                //    }
                //    pageInfo.requiresReturnCallback = false;
                //}
                //else {
                //    refreshMapInstance();
                //}
                registerRequiredInitialization(refreshMapInstance);
                that._reset = false;
                updateVScrollbar(content);
                //executeRefreshCallback(pageInfo);
                return;
            }


            if (!ie)
                scrollableCover = $('<div class="app-scrollable-cover"></div>').appendTo(scrollable.parent()).css({ position: 'absolute', left: scrollable.offset().left, top: scrollable.offset().top, width: calcWidth(scrollable), height: scrollable.outerHeight(), zIndex: 2, backgroundColor: android ? 'transparent' : '#fff' });

            if (!listview.length) {
                listview = $('<ul data-role="listview" class="app-listview"/>').addClass(dataViewToClassNames(dataView)).appendTo(content).listview()
                    .on('taphold', function (event, originalEvent) {
                        //if (event.namespace != 'app') return;
                        if (originalEvent)
                            event = originalEvent;
                        if (tapIsCanceled())
                            return false;

                        if (dataView._busy()) return;
                        var target = $(event.target),
                            link = target.closest('a'),
                            dataContext = link.data('data-context'),
                            multiSelect = dataView.multiSelect() && false;

                        if (link.closest('li').is('.dv-item') && !link.is('.app-divider')) {
                            if (link.is('.app-selected')) {
                                link.removeClass('app-selected');
                                if (multiSelect) {
                                }
                                else {
                                    that.clearSelection();
                                    if (that.lookupInfo()) {
                                        callWithFeedback(link, function () {
                                            that.executeInContext('Clear');
                                        });
                                    }
                                    else {
                                        callWithFeedback(link, function () {
                                            // not implemented
                                        });
                                    }
                                }
                            }
                            else if (dataView._hasKey()) {
                                if (multiSelect) {
                                }
                                else
                                    removeHighlightFromSelectedRow(listview);
                                link.addClass('app-selected');
                                that.tap(dataContext, 'none');
                                pageInfo.echoChanged = true;
                                callWithFeedback(link);
                            }
                            skipClick = true;
                        }
                        //if (that.viewStyle() == 'Grid' && isTouchPointer && target.is('span'))
                        //    showToolTip(target);
                        return false;
                    })
                    .on('vclick', function (event) {
                        var target = $(event.target),
                            link = target.closest('a').removeClass('ui-btn-active'),
                            multiSelect,
                            fieldContainer, hyperlink,
                            group;
                        function loadData(below) {
                            if (!dataView._busy()) {
                                that._loadAtTop = !below;
                                that.pageIndex(that.pageIndex(below ? 'bottom' : 'top') + (below ? 1 : -1));
                                that.refresh();
                            }
                        }
                        if (target.is('.app-btn-toggle,[data-href]'))
                            return;
                        fieldContainer = target.closest('.app-field');
                        if (fieldContainer.length) {
                            hyperlink = fieldContainer.find('[data-href]');
                            if (hyperlink.length) {
                                setTimeout(function () {
                                    hyperlink.trigger('vclick');
                                }, 10);
                                return false;
                            }
                        }
                        if (link.length && !link.is('.app-divider')) {
                            if (link.is('.dv-load-at-bottom'))
                                loadData(true);
                            else if (link.is('.dv-load-at-top:visible')) {
                                setTimeout(function () {
                                    loadData(false);
                                }, 50);
                            }
                            else {
                                if (skipClick) {
                                    skipClick = false;
                                    return;
                                }
                                if (!clickable(target) || mobile.busy())
                                    return false;
                                if (event.ctrlKey) {
                                    listview.trigger('taphold', event);
                                    skipClick = false;
                                    return false;
                                }
                                if (link.is('.dv-action-none'))
                                    return false;
                                if (isActionColumnClick(event, dataView))
                                    return false;

                                multiSelect = dataView.multiSelect()
                                if (multiSelect && isMultiSelectCheckBoxClick(event))
                                    toggleRowSelection(dataView, link);
                                else {
                                    // perform tap on a regular list item
                                    var dataContext = link.data('data-context'),
                                        moreIsClicked = isMoreButtonClick(event),
                                        clickHandler;
                                    if (dataContext) {
                                        if (multiSelect)
                                            link.find('.app-btn-check').addClass('app-btn-check-selected');
                                        listview.find('a.app-selected').removeClass('app-selected ui-btn-active');
                                        if (moreIsClicked) {
                                            target = findMoreButton(target);
                                            clickHandler = function () {
                                                checkIfMultiSelect(dataView, link);
                                                that.tap(dataContext, 'none');
                                                showRowContext(target);
                                            };
                                        }
                                        else
                                            clickHandler = function () {
                                                if (dataView._hasKey()) {
                                                    link.addClass('app-selected');
                                                    if (!moreIsClicked) {
                                                        checkIfMultiSelect(dataView, link);
                                                        that.tap(dataContext);
                                                    }
                                                    pageInfo.echoChanged = true;
                                                }
                                                else
                                                    that.tap(dataContext);
                                            };
                                    }
                                    else if (link.is('.dv-action-refresh'))
                                        clickHandler = function () {
                                            dataViewSyncCallback(dataView._id);
                                        };
                                    else if (link.is('.dv-action-new'))
                                        clickHandler = function () {
                                            that.executeInContext('New', null, false);
                                        };
                                    else if (link.is('.dv-action-filter-clear'))
                                        clickHandler = function () {
                                            clearDataFilter(dataView, true);
                                        };
                                    if (clickHandler) {
                                        clickHandler();
                                        callWithFeedback(target);
                                    }
                                }
                            }
                            return false;
                        }
                        else {
                            group = target.closest('.app-group');
                            if (group.length) {
                                if (target.is('.app-group')) {
                                    // collapse group
                                }
                                else {
                                    var title = target.closest('.app-group').find('.app-group-path,.app-group-title').addClass('ui-btn-active');
                                    setTimeout(function () {
                                        title.removeClass('ui-btn-active');
                                        configureGroupBy(true);
                                    }, feedbackDelay);
                                }
                                return false;
                            }
                        }
                    }).contextmenu(function (event) {
                        return handleFieldContextMenu(that.dataView(), event);
                    });
                addSpecialClasses(dataView, listview);


                if (!aggregateFooter.length && aggregates) {
                    footer = mobile.bar('create', {
                        type: 'footer', page: page
                    });
                    var lastBar = footer.find('[data-location="bottom"]');

                    aggregateFooter = $('<div class="app-bar-aggregates"></div>');
                    if (lastBar.length)
                        aggregateFooter.insertBefore(lastBar.first());
                    else
                        aggregateFooter.appendTo(footer);
                }

                if (!gridFooter.length && viewStyle == 'Grid') {
                    gridScrollingFrozenStyle(dataView);
                }
            }

            if (requiresReset) {
                clearListView(listview);
                //initialScrollTop = 0;
            }

            function createGridRowOfAggregates(listview) {
                var aggregateItem = $('<li data-icon="false" class="dv-item"/>').appendTo(listview),
                    aggregateLink = $('<a class="ui-btn app-divider app-calculated"/>').appendTo(aggregateItem);
                createRowMarkup(dataView, aggregates, null, aggregateLink, that.aggregateLabels());
                aggregateItem.find('.app-field').attr('data-tooltip-location', 'above');
                return aggregateItem;
            }

            if (requiresReset != false && aggregateFooter.length && aggregates)
                if (isGrid)
                    createGridRowOfAggregates(aggregateListView = $('<ul class="ui-listview app-listview app-grid"/>').appendTo(aggregateFooter.empty()));
                else
                    createListOfAggregates(dataView, aggregateFooter.empty(), aggregates);

            changeViewStyle(listview, viewStyle);
            if (viewStyle == 'Grid')
                gridScrollingFrozenStyle(dataView);


            updateViewTitle(actionBar, dataView, pageInfo);

            addMultiSelectClass(dataView, listview);

            var currentItems = listview.find('.dv-item'),
                requiresCleanup = currentItems.length > pageSize * 2/*2*/,
                loadAtBottomItem = listview.find('li').last(),
                loadAtTopItem,
                topRowIndex,
                loadAtTop = that._loadAtTop,
                selectedItem,
                firstVisibleItem, firstVisileItemY,
                lastVisibleItem = loadAtBottomItem && loadAtBottomItem.length && loadAtBottomItem.prev(),
                lastVisibleItemY = lastVisibleItem && lastVisibleItem.position().top,
                topGroupHeight,
                refreshLink,
                clearFilterLink;

            topGroupHeight = removeGroups(listview);

            if (allowLoadAtTop && loadAtBottomItem.length == 0 || requiresCleanup && !loadAtTop && !listview.find('li.dv-load-at-top-parent').length) {
                header.hide();
                loadAtTopItem = $(String.format('<li data-icon="false" class="dv-load-at-top-parent"><a class="dv-load-at-top"><p>{0}</p></a></li>', loadingStatusText));
                if (requiresCleanup) {
                    loadAtTopItem.insertBefore(currentItems.get(0));
                    allowLoadAtTop = true;
                }
                else
                    loadAtTopItem.appendTo(listview);
            }

            if (loadAtTop) {
                loadAtTopItem = listview.find('li').first();
                if (loadAtTopItem.is('.app-list-instruction'))
                    loadAtTopItem = loadAtTopItem.next();
                firstVisibleItem = loadAtTopItem.length && loadAtTopItem.next()
                firstVisileItemY = firstVisibleItem && firstVisibleItem.position().top + topGroupHeight;
                rows = rows.slice(0).reverse();
            }
            else
                loadAtBottomItem.remove();

            topRowIndex = pageIndex * pageSize;

            var styleExpressions = enumerateConditionalStyleExpressions(dataView);

            $(rows).each(function (index) {
                var row = this, v,
                    item = $('<li class="dv-item" data-icon="false"/>'),
                    rowNumber = loadAtTop ? topRowIndex + pageSize - index : topRowIndex + index + 1;
                var link = $('<a class="ui-btn"/>').appendTo(item).data('data-context', { row: this.slice(0), pageIndex: pageIndex });
                if (dataView.rowIsSelected(row)) {
                    link.addClass('app-selected');
                    if (!that.commandRow()) {
                        dataView._forgetSelectedRow(true);
                        that.command(row, 'Select');
                    }
                    else
                        that.commandRow(row);
                }


                if (loadAtTop)
                    item.insertAfter(loadAtTopItem);
                else
                    item.appendTo(listview);
                if (isGrid)
                    createRowMarkup(dataView, row, showRowNumber ? rowNumber : null, link);
                else
                    createCardMarkup(dataView, row, itemMap, showRowNumber ? rowNumber : null, item, link, viewStyle == 'List');

                evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
            });


            if (allowLoadAtBottom && !loadAtTop || requiresCleanup && loadAtTop && !listview.find('.dv-load-at-bottom-parent').length)
                loadAtBottomItem = item = $(String.format('<li data-icon="false" class="dv-load-at-bottom-parent"><a class="dv-load-at-bottom"><p>{0}</p></a></li>', loadingStatusText)).appendTo(listview);
            if (loadAtTop && pageIndex == 0/* || requiresReset && pageIndex == 1*/) {
                loadAtTopItem.remove();
            }

            if (!totalRowCount || dataView.get_searchOnStart()) {
                refreshLink = $('<li><a class="dv-action-refresh ui-btn ui-btn-icon-left ui-icon-refresh"><p/></a></li>').appendTo(listview)
                    .find('a');
                refreshLink.attr('title', resourcesPager.Refresh).find('p').text(resourcesData.NoRecords);
                if (dataView._filter && dataView._filter.length && !dataView.filterIsExternal()) {
                    clearFilterLink = $('<li><a class="dv-action-filter-clear  ui-btn ui-btn-icon-left ui-icon-clear"><p/></a></li>').appendTo(listview)
                        .find('a');
                    clearFilterLink.attr('title', resourcesMobile.ClearFilter).find('p').text(resourcesMobile.ClearFilter);
                }
            }
            if (!allowLoadAtBottom) {
                if (aggregates && isGrid && totalRowCount > 0)
                    aggregateItem = createGridRowOfAggregates(listview);
                if ($settings('ui.actions.promote'))
                    requiresPromoSpacing = true;
                else if (!actionBar.length) {
                    var contextItem = that.executeInContext('New', null, false, true),
                        newLink, newItem, prevItem, paraList;
                    if (contextItem) {
                        newItem = $('<li class="dv-action-new">').appendTo(listview).attr('data-icon', contextItem.icon);
                        newLink = $('<a class="dv-action-new"/>').appendTo(newItem).attr('title', resourcesMobile.LookupNewAction);
                        if (isGrid) {
                            $('<p>').appendTo(newLink).text(contextItem.text);
                        }
                        else {
                            $('<h3>').appendTo(newLink);
                            prevItem = newItem.prev();
                            if (prevItem.is('.dv-item')) {
                                newLink.html(prevItem.find('a').html()).find('p,img,span').css('visibility', 'hidden');
                                if (prevItem.is('.ui-li-has-thumb'))
                                    newItem.addClass('ui-li-has-thumb');
                            }
                            newLink.find('h3').text(contextItem.text);
                            if (!totalRowCount)
                                $('<p>').appendTo(newLink.html('')).text(contextItem.text);
                        }
                    }
                }
            }

            if (loadAtTop) {
                page.attr('data-page-header', '');
                if (pageInfo.headerText != false)
                    pageHeaderText(topRowIndex == 0, header);
            }
            var firstItem = listview.find('li').first(),
                instruction, gridHeader,
                item;
            instruction = that.instruction();
            if ((instruction || isGrid) && !listview.find('.app-list-instruction').length) {
                item = $('<li data-role="list-divider" class="app-list-instruction"/>').insertBefore(loadAtTopItem ? loadAtTopItem : firstItem);
                if (instruction)
                    $('<span class="app-view-instruction"/>').appendTo(item).html(instruction);
                if (isGrid && !!totalRowCount) {
                    gridHeader = createGridHeader(dataView, item);
                    if (!instruction)
                        gridHeader.addClass('app-grid-header-no-description');
                }
                item.toggleClass('app-no-records', totalRowCount < 1);
            }

            if (loadAtTop && loadAtTopItem)
                loadAtTopItem.find('.ui-btn').css('height', '').find('p').css('margin-top', '');

            var stub;

            if (requiresCleanup)

                if (loadAtTop) {
                    currentItems = currentItems.slice(pageSize * (android ? 2 : 2));
                    currentItems.find('a').data('data-context', null);
                    currentItems.remove();
                    listview.find('li.dv-action-new').remove();
                }
                else {
                    header.hide();
                    stub = $(String.format('<li style="clear:left;height:{0}px"></li>', $mobile.getScreenHeight() * 10)).appendTo(listview);
                    //listview.find('li.app-list-instruction').remove();
                    listview.find('li.app-li-card').remove();
                    currentItems = currentItems.slice(0, pageSize);
                    currentItems.find('a').data('data-context', null);
                    currentItems.remove().empty();
                }

            injectGroups(dataView, listview);

            yardstick(listview);
            listview.listview('refresh');
            if (requiresPromoSpacing)
                listview.find('li.dv-item').last().addClass('app-has-promo');


            selectedItem = listview.find('a.app-selected');

            if (selectedItemOffsetFromTop == null)
                if (requiresCleanup)
                    if (loadAtTop) {
                        var newFirstVisibleItemY = firstVisibleItem.position().top;
                        //scrollable.scrollTop(scrollTop + newFirstVisibleItemY - firstVisileItemY);
                        scrollWrapper(scrollable, scrollTop + newFirstVisibleItemY - firstVisileItemY);
                    }
                    else {
                        var newLastVisibleItemY = lastVisibleItem.position().top;
                        //scrollable.scrollTop(scrollTop + newLastVisibleItemY - lastVisibleItemY);
                        scrollWrapper(scrollable, scrollTop + newLastVisibleItemY - lastVisibleItemY);
                    }
                else
                    if (loadAtTop) {
                        newFirstVisibleItemY = firstVisibleItem.position().top;
                        //scrollable.scrollTop(scrollTop + newFirstVisibleItemY - firstVisileItemY);
                        scrollWrapper(scrollable, scrollTop + newFirstVisibleItemY - firstVisileItemY);
                    }
                    else if (loadAtTop == null)
                        scrollWrapper(scrollable, 0);
            if (stub)
                setTimeout(function () {
                    stub.prev().addClass('ui-last-child');
                    stub.remove(); // timeout solves the problem of "blinking" on an incomplete last page
                }, 100);


            if (isGrid) {
                if (refreshLink)
                    refreshLink.removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
                if (newLink)
                    newLink.removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
                if (clearFilterLink)
                    clearFilterLink.removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
            }



            function syncView() {
                ensurePageVisibility(true);
                //gridFooter.toggle(isGrid);
                //aggregateFooter.toggle(aggregates != null);

                mobile.bar(isGrid ? 'show' : 'hide', gridFooter);
                var skipPageReset;
                if (aggregates)
                    if (isGrid && aggregateItem) {
                        if (scrollable[0].scrollHeight - parseCss(aggregateItem, 'margin-bottom') < scrollable.height())
                            mobile.bar('hide', aggregateFooter);
                        else {
                            aggregateItem.prev().addClass('ui-last-child' + (aggregateItem.is('.app-has-promo') ? ' app-has-promo' : ''));
                            aggregateItem.remove();
                            mobile.bar('show', aggregateFooter);
                        }
                        //resetPageHeight(page)
                    }
                    else {
                        mobile.bar(aggregates ? 'show' : 'hide', aggregateFooter);
                        skipPageReset = true;
                    }
                if (isGrid) {
                    gridScrollingFrozenStyle(dataView);
                    setupGridScrollbar(dataView, gridFooter);
                    setupGridHeaderStyle(listview);
                }
                if (!skipPageReset)
                    resetPageHeight(page);
                if (requiresReset || !that._synced) {
                    resetStickyHeaderInstruction(dataView, page, isGrid);
                    // update page header
                    updatePageHeader();
                    // scroll selected item into view
                    if (selectedItem.length) {
                        var scrollableTop = scrollable.offset().top,
                            scrollableHeight = scrollable.height(),
                            scrollHeight,
                            loadAtBottomLink, loadAtTopLink,
                            itemTop = Math.ceil(selectedItem.offset().top),
                            itemHeight = selectedItem.outerHeight(true),
                            loadingBarHeight;

                        function resizeLoadingBar(bar, height) {
                            var para = bar.find('p');
                            height += parseCss(bar, 'height');
                            bar.css('height', height);
                            para.css('margin-top', (height - para.outerHeight()) / 2);
                        }

                        scrollTop = scrollable.scrollTop();

                        // if (itemTop < scrollableTop || itemTop + itemHeight >= scrollableTop + scrollableHeight)
                        if (selectedItemOffsetFromTop && selectedItemOffsetFromTop > 0 && (selectedItemOffsetFromTop + itemHeight) < scrollableHeight) {
                            if (itemTop - scrollableTop < selectedItemOffsetFromTop) {
                                resizeLoadingBar(listview.find('.dv-load-at-top'), selectedItemOffsetFromTop - (scrollTop + itemTop - scrollableTop));
                                //loadAtTopLink = listview.find('.dv-load-at-top');
                                //if (loadAtTopLink.length) {
                                //    loadingBarHeight = parseInt(loadAtTopLink.css('height')) + selectedItemOffsetFromTop - (scrollTop + itemTop - scrollableTop);
                                //    loadAtTopLink.css('height', loadingBarHeight).find('p').css('margin-top', Math.floor(loadingBarHeight / 2));
                                //}
                            }
                            else {
                                scrollHeight = scrollable[0].scrollHeight;
                                if (scrollHeight - (scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop) < scrollableHeight) {
                                    resizeLoadingBar(listview.find('.dv-load-at-bottom'), scrollableHeight - (scrollHeight - (scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop)));
                                    //loadAtBottomLink = listview.find('.dv-load-at-bottom');
                                    //if (loadAtBottomLink.length) {
                                    //    loadingBarHeight = parseInt(loadAtBottomLink.css('height')) + scrollableHeight - (scrollHeight - (scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop));
                                    //    loadAtBottomLink.css('height', loadingBarHeight).find('p').css('margin-top', Math.floor(loadingBarHeight / 2));
                                    //}
                                }
                            }
                            scrollWrapper(scrollable, scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop);
                        }
                        else // null or 0 shall go to "ELSE" to center the item 
                            scrollWrapper(scrollable, scrollTop + itemTop - scrollableTop - (scrollableHeight - itemHeight) / 2);
                        if (requiresReset)
                            dataView.raiseSelected();
                    }
                    else
                        if (!that._synced && dataView.get_selectedKey().length && !dataView._lookupInfo) {
                            function doSync() {
                                if (getActivePageId() == pageInfo.id && !isInTransition)
                                    dataView.sync();
                                else
                                    setTimeout(doSync, 50);
                            }
                            doSync();
                        }
                        else
                            that.clearSelection();
                    that._synced = true;
                    if (selectedItem && selectedItem.length && dataView.multiSelect())
                        checkBoxState(true, findGridHeaderCheckBoxes(listview), findStickyHeaderBarCheckBox(dataView), selectedItem.find('.app-btn-check'));
                }
                else if (selectedItem && selectedItem.length && !requiresReset && !loadAtTop && initialSelectedItemOffsetFromTop != null)
                    scrollWrapper(scrollable, scrollable.scrollTop() + selectedItem.offset().top - scrollable.offset().top - initialSelectedItemOffsetFromTop);
                fitTabs(page);
                if (page.find('.ui-header-fixed').length)
                    page.addClass('app-has-fixed-bar');
                ensurePageVisibility(false);
                //that.stateChanged();
                busyIndicator(false);
                //focusScrollable();
                //scrollable.focus()
            }

            //if (pageInfo.requiresInitCallback) {
            //    syncView();
            //    pageInfo.initCallback = function () {
            //        if (dataView.get_searchOnStart())
            //            whenPageShown(function () {
            //                setTimeout(function () {
            //                    searchOnStart(dataView);
            //                });
            //            });
            //        else
            //            fetchOnDemand(200);
            //    }
            //    pageInfo.requiresInitCallback = false;
            //    mobile.navigate(pageInfo.id);
            //}
            //else if (pageInfo.requiresReturnCallback) {
            //    syncView();
            //    pageInfo.returnCallback = function () {
            //        fetchOnDemand(200);
            //    }
            //    pageInfo.requiresReturnCallback = false;
            //}
            //else {
            //    syncView();
            //    fetchOnDemand(requiresReset ? 10 : 200);
            //    stickyHeader();
            //}
            syncView();
            registerRequiredInitialization(function () {
                fetchOnDemand(requiresReset ? 10 : 200);
                //stickyHeader();
            });
            if (scrollableCover)
                if (android && requiresCleanup)
                    setTimeout(function () {
                        scrollableCover.remove();
                    }, 300);
                else
                    scrollableCover.remove();

            that._reset = false;
            that._loadAtTop = null;
            //executeRefreshCallback(pageInfo);
        },
        reset: function (full) {
            var dataView = this.dataView(),
                pageInfo = getPageInfo(dataView),
                pageHash = '#' + pageInfo.id,
                history = $mobile.navigate.history,
                visible;
            this._reset = true;
            $(history.stack).each(function (index) {
                if (index > history.activeIndex)
                    return false;
                if (this.hash == pageHash) {
                    visible = true;
                    return false;
                }
            });
            if (!visible) {
                pageInfo.initialized = false;
                pageInfo.echoInitialized = false;
                pageInfo.echoId = false;
            }
        },
        visibleDataRows: function (pageIndex) {
            var dataView = this._dataView,
                cachedPages = dataView._cachedPages;
            if (cachedPages)
                for (var i = 0; i < cachedPages.length; i++) {
                    var p = cachedPages[i];
                    if (p.index == pageIndex)
                        return p.rows;
                }
            return null;
        },
        currentPageIndex: function (value) {
            if (arguments.length)
                this._currentPageIndex = value;
            return this._currentPageIndex;
        },
        pageIndex: function (value) {
            var dataView = this._dataView;
            if (typeof value == 'string') {
                if (value == 'bottom') {
                    var bottomItemData = this.content().parent().find('ul li.dv-item').last().find('a').data('data-context');
                    if (bottomItemData)
                        return bottomItemData.pageIndex;
                }
                if (value == 'top') {
                    var topItemData = this.content().parent().find('ul li.dv-item').first().find('a').data('data-context');
                    if (topItemData)
                        return topItemData.pageIndex;
                }
                return dataView.get_pageIndex();
            }
            else if (value == null)
                return dataView.get_pageIndex();
            else
                dataView.set_pageIndex(value);
        },
        pageCount: function () {
            var dataView = this._dataView;
            return dataView.get_pageCount();
        },
        pageSize: function () {
            var dataView = this._dataView;
            return dataView.get_pageSize();
        },
        instruction: function (includeRowCount) {
            var that = this,
                lookupInfo = that.lookupInfo(),
                lookupField,
                dataView = that.dataView(),
                viewDescription = that.viewDescription() || '',
                instruction = viewDescription ? [viewDescription] : [],
                filter = that.filterStatus(),
                groupExpression = dataView.groupExpression(),
                text;
            if (lookupInfo) {
                if (instruction.length)
                    instruction.push(' ');
                lookupField = lookupInfo.field;
                instruction.push(String.format(lookupField.ItemsDescription || resourcesMobile.LookupInstruction, lookupField._autoAlias ? (lookupField.AltHeaderText || lookupField.HeaderText) : lookupField._dataView._allFields[lookupField.AliasIndex].HeaderText));
                if (lookupInfo.value) {
                    text = lookupInfo.text;
                    if (text && text.length > 50)
                        text = text.substring(0, 50) + '...';
                    instruction.push(String.format(resourcesMobile.LookupOriginalSelection, text));
                }
            }

            if (dataView.multiSelect())
                instruction.push('<span class="app-multi-select-instruction">' + multiSelectInstruction(dataView) + '</span>');

            if (includeRowCount != false && (instruction.length || filter || groupExpression) && dataView._totalRowCount > 1) {
                if (instruction.length) {
                    instruction.push(' ');
                    instruction.push(String.format(resourcesMobile.ShowingItemsInfo, dataView._totalRowCount));
                }
                $(groupExpression).each(function (index) {
                    var f = dataView.findField(this);
                    if (f) {
                        if (index == 0) {
                            if (instruction.length)
                                instruction.push(' ');
                            instruction.push(resourcesMobile.GroupedBy, ' ');
                        }
                        if (index)
                            if (index == groupExpression.length - 1)
                                instruction.push(' ', labelAnd, ' ');
                            else
                                instruction.push(', ');
                        instruction.push(f.HeaderText);
                        if (index == groupExpression.length - 1)
                            instruction.push('.');
                    }
                });
            }

            if (filter) {
                if (instruction.length)
                    instruction.push(' ');
                instruction.push(String.format('<span class="app-filter" title="{1}">{0}</span>', filter, resourcesMobile.Filter));
            }
            return instruction.join('');
        },
        context: function (list, actionScopes) {
            var that = this,
                dataView = that.dataView(),
                extension = dataView.extension(),
                totalRowCount = dataView._totalRowCount,
                viewLabel = dataView.get_view().Label,
                sortExpression = dataView.get_sortExpression(),
                row = that.commandRow() || [],
                lookupInfo = this.lookupInfo(),
                lookupField,
                existingRow = row && row.length;

            if (totalRowCount != -1) {
                if (dataView.get_showViewSelector())
                    list.push({ text: viewLabel, count: String.format('{0:N0}', totalRowCount), /*theme: 'b',*/ icon: 'gear', system: true, toolbar: false, transition: true, callback: configureView });
                if (dataView.get_showQuickFind() && ((totalRowCount > 1 || dataView._busy()) || dataView.get_filter().length > dataView.get_externalFilter().length) || advancedSearchFilter(dataView).length)
                    list.push({ text: labelSearch, desc: advancedFilterStatus(dataView), descInTooltip: false, icon: 'search', toolbar: false, system: true, context: { dataViewId: dataView._id }, callback: startSearchCallback });

                list.push({ text: resourcesMobile.Sort, icon: 'sort', transition: true, desc: sortExpressionToText(dataView), toolbar: false, system: true, callback: configureSort });
                list.push({ text: resourcesMobile.Filter, icon: 'filter', transition: true, desc: extension.filterStatus(true, true), toolbar: false, system: true, callback: configureFilter });
                list.push({ text: resourcesMobile.Group, icon: 'group', transition: true, desc: groupExpressionToText(dataView), toolbar: false, system: true, callback: configureGroupBy });

                if (!lookupInfo || lookupInfo.value != null)
                    list.push({});
                addSelectAction(dataView, list, row);
                if (lookupInfo) {
                    //if (findActivePage('.dv-heading.app-disabled').length && !sidebarIsVisible())
                    //    list.push({ text: existingRow ? that.instruction() : null });
                }
                else
                    enumerateSpecialActionContextOptions(dataView, list, row);
                if (lookupInfo) {
                    lookupField = lookupInfo.field;

                    function changeLookup(lookupField, lookupDataView, row) {
                        var values = _input.methods.lookup._rowToValues(lookupField, lookupDataView, row);
                        // go back
                        if (values) {
                            goBack(function () {
                                getPageInfo(lookupField._dataView._id).autoFocus = false;
                                lookupInfo.change(values);
                            });
                            //$body.one('pagecontainershow', function () {
                            //    lookupInfo.change(values);
                            //});
                            //goBack();
                        }
                    }

                    if (existingRow)
                        list.push({
                            text: resourcesMobile.LookupSelectAction, icon: 'material-icon-arrow-forward', command: 'Select', callback: function () {
                                changeLookup(lookupField, getPageInfo().dataView, row);
                            }
                        });
                    if (lookupInfo.value)
                        list.push({
                            text: resourcesMobile.UnSelect, icon: 'material-icon-clear', command: 'Clear', callback: function () {
                                changeLookup(lookupField, getPageInfo().dataView, null);
                            }
                        });
                    if (!String.isNullOrEmpty(lookupField.ItemsNewDataView))
                        list.push({
                            text: resourcesMobile.LookupNewAction, icon: 'material-icon-add', command: 'New', system: true, callback: function () {
                                that.executeInContext('New', lookupField.ItemsNewDataView, true);
                            }
                        });
                    list.push({});
                    if (existingRow && !lookupField.tagged('lookup-details-hidden'))
                        list.push({
                            text: resourcesMobile.LookupViewAction, icon: 'material-icon-info-outline', callback: function () {
                                Web.DataView._defaultUseCase = 'ObjectRef';
                                that.executeInContext('Select', 'editForm1', true);
                            }
                        });
                    enumerateSpecialActionContextOptions(dataView, list, row);
                    //list.push({
                    //    text: resourcesPager.Refresh, icon: 'material-icon-refresh', callback: function () {
                    //        dataView.sync();
                    //    }
                    //});
                }
                else {
                    if (!actionScopes)
                        actionScopes = ['Grid', 'ActionColumn', 'ActionBar'];
                    var defaultSpecialActionArgument;
                    if (actionScopes.length == 1 && actionScopes[0] == 'Grid') {
                        $(dataView._views).each(function () {
                            var view = this;
                            if (view.Type == 'Form' && view.Id.match(/edit/)) {
                                defaultSpecialActionArgument = view.Id;
                                return false;
                            }
                        });
                    }
                    enumerateActions(actionScopes, dataView, list, row, defaultSpecialActionArgument);
                }
            }
        }
    }

    /* form view */

    Web.DataView.Extensions.Form = function (dataView) {
        return new Web.DataView.MobileForm(dataView);
    }

    Web.DataView.MobileForm = function (dataView) {
        Web.DataView.MobileForm.initializeBase(this);
        this.dataView(dataView);
    }

    Web.DataView.MobileForm.prototype = {
        initialize: function () {
            this._editors = {};
            this._initRow();
        },
        _initRow: function () {
            var dataView = this.dataView(),
                row = this.inserting() ? dataView._newRow : dataView._rows[0];
            dataView._mergeRowUpdates(row);
            return this.commandRow(row);
        },
        reset: function (full) {
            this._reset = true;
            this._initRow();
        },
        options: function () {
            return { quickFind: false, filterDetails: false };
        },
        dispose: function () {
            this._dispose();
            this._disposeSession();
        },
        _disposeLayout: function (layoutNode) {
            layoutNode = $(layoutNode);
            // destroy layout
            function disposeNodes(rootNodes) {
                if (rootNodes)
                    for (var i = 0; i < rootNodes.length; i++) {
                        var n = rootNodes[i];
                        disposeNodes(n.children);
                        n.children = null;
                        n.self.removeData();
                        n.self = null;
                    }
            }
            layoutNode.find('.app-data-list').remove();
            layoutNode.find('.app-drop-box').each(function () {
                _app.upload('destroy', { container: this });
            });
            disposeNodes(layoutNode.data('rootNodes'));
        },
        _disposeForm: function (content) {
            var that = this,
                form;
            if (!content)
                content = that.content();
            form = content.find('[data-layout="form"]').each(function () {
                that._disposeLayout(this);
            });
            return form;
        },
        _dispose: function (forced) {
            var that = this,
                dataView = that._dataView,
                content = this.content();
            that._newValues = null;
            that._disposeForm(content);

            $(dataView._allFields).each(function () {
                var f = this,
                    dv;
                if (f._dataViewId) {
                    dv = _app.find(f._dataViewId);
                    if (dv._filterSource == dataView._id)
                        mobile.deletePage(dv._id);
                }
            });

            content.find('.app-status-bar, .app-bar-buttons,.app-stub,.app-form-grid').remove();
            var header = content.parent().find('div[data-role="header"]');
            disposeListViews(content);

            // remove echos
            var echoList = content.find('.app-echo').each(function () {
                var pageId = $(this).attr('data-for'),
                    pageInfo = getPageInfo(pageId);
                if (pageInfo) {
                    pageInfo.echoId = null;
                    pageInfo.echoInitialized = false;
                }
            });
            //echoList.find('.app-echo-toolbar').find('.ui-icon-dots, h3, .app-echo-controls, .app-echo-see-all').off();
            echoList.find('.app-echo-inner').off();
            echoList.find('.app-echo-footer').off();
            echoList.remove();
            // destroy tabs
            mobile.tabs('destroy', { container: content });
            // forced ocation
            if (forced)
                refreshContext();
            that._disposeSession();
        },
        viewStyle: function () {
            return 'Form';
        },
        refresh: function () {
            var that = this,
                dataView = that.dataView(),
                editing = that.editing(),
                pageInfo = getPageInfo(dataView),
                fields = dataView._fields,
                allFields = dataView._allFields,
                layoutElem,
                categories = dataView._categories,
                content = that.content(),
                //layout = generateLayout(dataView, content),
                row,
                tabs = [],
                tabsScroll = [],
                currentTab, currentGrid,
                //objectIdentifier,
                context,
                ///map = that.itemMap(),
                statusBar, statusBarDef, formButtons,
                inserting = this.inserting(),
                requiresReset = this._reset,
                showActionButtons = dataView.get_showActionButtons(),
                confirmContext = dataView._confirmContext,
                page = pageInfo.page,// $('#' + pageInfo.id),
                header = page.find('.app-page-header'),
                stub;

            if (that._skipRefresh) {
                that._skipRefresh = false;
                return;
            }

            if (requiresReset) {
                that._dispose();
                that._commandRow = null;
            }
            row = editing ? dataView.editRow() : (that.commandRow() || that._initRow() || []);

            mobile.makeModalOrPanel(pageInfo);

            createPageHeaderImage(dataView, page, row);

            var instruction = that.viewDescription();
            if (instruction)
                $('<div class="app-view-description"></div>').appendTo(header).html(instruction);

            var headerText = confirmContext && confirmContext.WindowTitle || dataView.get_view().Label;
            if (headerText)
                if (pageInfo.headerTextLocked) {
                    if (typeof pageInfo.headerText === 'string')
                        pageInfo.headerText = typeof headerText == 'string' && !dataView.inserting() ? [pageInfo.headerText, headerText] : headerText;
                }
                else {
                    var dataText;
                    if (dataView.inserting() && dataView._filterSource)
                        dataText = findScrollable(dataView._filterSource).find('.app-page-header h1').text(); //` + dataView._filterSource + ' .ui-content .app-wrapper .app-page-header h1').text();
                    if (dataText)
                        pageInfo.headerText = [headerText, dataText];
                    else
                        pageInfo.headerText = headerText;
                }

            if (inserting)
                header.attr('data-locked', 'false').data('data-text', null);
            var showHeaderTag = dataView.tagged(/page\-header\-(\w+)/);
            if (showHeaderTag && showHeaderTag[1] == 'none')
                pageInfo.headerText = false;

            if (!pageInfo.headerText == false)
                createPageHeaderIcon(dataView, page, header);


            if (!page.is('.app-page-modal') && pageInfo.headerText != false)
                $('<div class="app-page-header-placeholder dv-heading" data-selector=".app-page-title"><span class="app-static-text app-page-title"><span class="app-text"/></span></div>').appendTo(content);
            //if (!allowModal())
            //    $('<div class="app-page-header-placeholder dv-heading" data-selector=".app-page-title"><span class="app-static-text app-page-title"><span class="app-text"/></span></div>').appendTo(content);

            layoutElem = createLayout(dataView, calcWidth(content)/*content.width()*/);

            statusBarDef = dataView.statusBar();
            if (statusBarDef) {
                statusBar = $('<div class="app-status-bar"></div>').html(statusBarDef).appendTo(content);
                var segments = statusBar.find('li.Segment'),
                    zindex = segments.length + 10;
                segments.each(function (i) {
                    this.style.zIndex = zindex - i;
                });
                if (isTouchPointer)
                    statusBar.css('overflow-x', 'auto');
            }


            if (instruction && pageInfo.headerText == false) {
                var descList = $('<ul data-role="listview" class="app-list-instruction"/>').appendTo(content);
                $('<li data-role="list-divider" class="app-list-instruction"/>').appendTo(descList).html(instruction);
                descList.listview();
            }

            if (dataView.tagged('action-buttons-none'))
                showActionButtons = 'None';

            if (showActionButtons == 'TopAndBottom' || showActionButtons == 'Top')
                $('<div class="app-bar-buttons"></div>').appendTo(content);

            //layoutElem = createLayout(dataView, layout, content);
            layoutElem.appendTo(content);
            //if (!allowModal())
            //    $('<div class="app-page-header-placeholder dv-heading" data-selector=".app-page-title"><span class="app-static-text app-page-title"><span class="app-text"/></span></div>').insertBefore(layoutElem.children().first());

            if ((pageInfo.isModal || pageInfo.isPanel) && showActionButtons != 'None')
                showActionButtons = 'Auto';
            else if (showActionButtons == 'Auto' && !allowButtonBar())
                showActionButtons = 'None';

            if (showActionButtons == 'Auto')
                formButtons = $('<div class="app-bar-buttons"></div>').appendTo(mobile.bar('create', { type: pageInfo.isPanel ? 'header' : 'footer', page: page }));
            else {
                if (showActionButtons == 'TopAndBottom' || showActionButtons == 'Bottom') {
                    $('<div class="app-bar-buttons"></div>').appendTo(content);
                }
                formButtons = content.find('.app-bar-buttons');
            }

            context = [];
            that.context(context);


            // render context links for child views
            if (!inserting) {
                //taskAssistant(dataView, content);
                var tabs = [],
                    tabbedContainer;


                function createTabStrip() {
                    mobile.tabs('create', {
                        tabs: tabs, className: 'app-tabs-echo', scope: dataView.get_selectedKey(), change: function () {
                            //fetchEchos();
                        }
                    });
                }

                $(mobile._pages).each(function () {
                    var p = this,
                        t, activator, echo,
                        childDataView = p.dataView,
                        filterSource = childDataView && childDataView._filterSource;
                    if (filterSource && filterSource == dataView._parentDataViewId && !childDataView._dataViewFieldName) {
                        activator = p.activator;
                        if (activator && activator.type == 'Tab') {
                            $(tabs).each(function () {
                                if (activator.text == this.text) {
                                    t = this;
                                    return false;
                                }
                            });
                            if (!t) {
                                if (tabbedContainer != activator.container) {
                                    if (tabbedContainer) {
                                        createTabStrip();
                                        tabs = [];
                                    }
                                    tabbedContainer = activator.container;
                                }
                                t = { text: activator.text, content: [] };
                                tabs.push(t);
                            }
                        }
                        echo = createEcho(p.id, content);
                        if (t)
                            t.content.push(echo);
                    }
                });
                if (tabbedContainer)
                    createTabStrip();
            }

            stub = $('<div class="app-stub"></div>').appendTo(content);
            if (dataView.tagged('promo-none'))
                stub.addClass('app-hidden');
            //if (content.find('.app-echo').length)
            //    stub.height($mobile.getScreenHeight() * .6);
            that.stateChanged();


            // refresh app buttons
            that._reset = false;


            function syncView() {
                //if (statusBarDef && currentStatus.length) {
                //    statusWidth = currentStatus.outerWidth();
                //    statusLeft = currentStatus.offset().left;
                //    clientWidth = $window.width();
                //    if (sidebarIsVisible())
                //        clientWidth -= $('#app-sidebar').outerWidth();
                //    if (statusLeft + statusWidth + 20 > clientWidth)
                //        statusBar.scrollLeft(currentStatus.is('.Last') ?
                //            (statusLeft + statusWidth - clientWidth) + (currentStatus.outerWidth(true) - currentStatus.find('.Self').outerWidth()) :
                //            (statusLeft - (clientWidth - statusWidth) / 2));
                //}
                if (statusBar)
                    focusStatusBar(statusBar);
                resizeSignatures(content);
                mobile.bar('show', formButtons);
                mobile.refreshTitleState();
                mobile.refreshAppButtons(context, { buttonBars: showActionButtons != 'None' ? formButtons : [], layout: layoutElem, toolbar: false, dataView: dataView });
                //fetchOnDemand(200);
                //if (!isTouchPointer)
                //    whenPageShown(function () {
                //        _input.focus({ container: content });
                //    });
                //updateVScrollbar(content);
            }

            if (pageInfo.requiresInitCallback) {
                var pageIsInvisible = page.css('display') != 'block';
                if (pageIsInvisible)
                    page.css({ 'display': 'block', 'z-index': -10 });
                //showHideBottomButtonBar();
                //adjustScrollableContainers(content);
                //if (tabs.length)
                //    resetPageHeight(page);
                dataView._unchangedRow = row.slice(0);

                if (showActionButtons != 'None' && showActionButtons != 'Auto')
                    mobile.refreshAppButtons(context, { buttonBars: content.find('.app-bar-buttons'), toolbar: false, dataView: dataView });

                prepareLayout(dataView, row, layoutElem);
                evaluateConditionalStyleExpressions(dataView, row, layoutElem);
                if (dataView._isWizard)
                    wizard('start', { layout: layoutElem });
                syncEmbeddedViews(content);
                fitTabs(page);
                if (pageIsInvisible)
                    page.css({ 'display': '', 'z-index': '' });


                pageInfo.requiresInitCallback = false;
                isInTransition = false;
                pageInfo.initCallback = syncView;
                mobile.navigate(pageInfo.id);
                //setTimeout(function () {
                //    mobile.changePage(pageInfo.id);
                //}, 300);
            }
            else
                syncView();
            //executeRefreshCallback(pageInfo);
        },
        collect: function () {
            var that = this,
                values = [], v,
                dataView = that.dataView(),
                allFields = dataView._allFields,
                originalRow,
                inserting = that.inserting(),
                originalValue,
                fieldInfo,
                editRow;
            // if (dataView.get_view().Layout) {
            editRow = dataView.editRow();
            originalRow = dataView._originalRow;
            $(allFields).each(function (index) {
                var field = this,
                    newValue = editRow[index],
                    oldValue = originalRow[index];
                if (field.Type.match(/^Date/))
                    newValue = newValue != null ? new Date(newValue) : null;
                if (field.Type != 'DataView' && !field.OnDemand)
                    values.push({ Name: field.Name, NewValue: newValue, OldValue: oldValue, Modified: newValue != oldValue || /*inserting &&*/ newValue == null && !field.AllowNulls && !field.IsPrimaryKey, ReadOnly: !!(field.ReadOnly && !(field.IsPrimaryKey && inserting)) });
            });
            return values;
            //}

            // legacy collection of values

            /*
            originalRow = this.commandRow();
            if (!originalRow)
                return values;
            $(allFields).each(function () {
                var field = this,
                    fieldInput = $('#' + dataView._id + ' .app-field-' + field.Name + ':input'),
                    fieldInfo,
                    s;
                if (field.OnDemand) return;
                originalValue = originalRow[field.Index];
                v = { Name: field.Name, OldValue: inserting ? null : originalValue, NewValue: originalValue, Modified: inserting && originalValue != null };
                v.ReadOnly = field.ReadOnly && !(field.IsPrimaryKey && inserting);
                if (fieldInput.length) {
                    s = fieldInput.is('select') ? fieldInput.find('option:selected').data('value') : fieldInput.val().trim();
                    if (s === '')
                        s = null;
                    v.NewValue = s;
                    if (!(ie || !isTouchPointer))
                        if (field.Type.match(/^Date/)) {
                            if (field.TimeFmtStr)
                                v.NewValue = htmlStringToDateTime(v.NewValue);
                            else
                                v.NewValue = htmlStringToDate(v.NewValue);
                        }
                    v.Modified = true;
                }
                else {
                    fieldInfo = that._editors[field.Name];
                    if (fieldInfo) {
                        v.NewValue = fieldInfo.value;
                        v.Modified = v.NewValue != v.OldValue;
                    }
                    else {
                        newValues = that._newValues;
                        if (newValues && field.Name in newValues) {
                            v.NewValue = newValues[field.Name];
                            v.Modified = true;
     
                        }
                    }
                }
                values.push(v);
            });
            return values;*/
        },
        //_readWrite: function () {
        //    var that = this,
        //        dataView = that.dataView(),
        //        viewId = dataView._id,
        //        editing = that.editing(),
        //        inserting = that.inserting(),
        //        editors = that._editors,
        //        fieldName, v, t, items,
        //        fieldInfo, field, originalField, aliasField, fieldLabel, item,
        //    /*map = that.itemMap(),*/itemsStyle,
        //        fieldInput, inputId, inputContainer, fieldContainer,
        //        fieldClass,
        //        content = that.content(),
        //        listview = content.find('.ui-collapsible ul'),
        //        fieldLink,
        //        //requiresDatePicker,
        //        legacyCalculatedFields = {}, populateFields = {},
        //        causesFieldRef, causesCalculate, causesPopulate, causesCopy,
        //        hyperlink,
        //        undefinedLookup,
        //        row = that.commandRow();

        //    function showHide(elements, show) {
        //        $(elements).each(function () {
        //            if (show) {
        //                if (fieldInfo.item.children().length == 1)
        //                    this.appendTo(fieldInfo.item);
        //            }
        //            else
        //                this.detach();
        //        });
        //    }

        //    function initFieldInput() {
        //        inputId = viewId + '_' + field.Name + '_Input';
        //        fieldLabel.attr('for', inputId);
        //        fieldInput.appendTo(item).attr('id', inputId).addClass(fieldClass);
        //        if (field.Len > 0)
        //            fieldInput.attr('maxlength', field.Len);
        //        if (field.Watermark)
        //            fieldInput.attr('placeholder', field.Watermark);
        //        if (causesCalculate)
        //            fieldInput.attr('data-causes-calculate', causesCalculate);
        //        if (causesPopulate)
        //            fieldInput.attr('data-causes-populate', causesPopulate);
        //        if (causesCopy)
        //            fieldInput.attr('data-causes-copy', causesCopy);
        //    }

        //    function initOnDemandThumbnail(fieldText) {
        //        if (!v || v.match(/^null/))
        //            fieldText.text(nullValueInForms);
        //        else {
        //            var blobHref = dataView.resolveClientUrl(dataView.get_appRootPath()),
        //                blobLink = $('<a rel="external"/>').appendTo(fieldText).attr('href', String.format('{0}blob.ashx?{1}=o|{2}', blobHref, field.OnDemandHandler, t)),
        //                contentType,
        //                loweredFieldName = field.Name.toLowerCase();
        //            if (field.OnDemandStyle != 1) {
        //                $('<img class="app-image-thumb">').appendTo(blobLink).attr({ 'src': String.format('{0}blob.ashx?{1}=t|{2}&_nocrop', blobHref, field.OnDemandHandler, t), 'title': resourcesData.BlobDownloadHint });
        //                $(dataView._allFields).each(function () {
        //                    var f = this,
        //                        loweredName = f.Name.toLowerCase();
        //                    if (loweredName == loweredFieldName + 'contenttype' || loweredName == loweredFieldName + 'content_type') {
        //                        contentType = row[f.Index];
        //                        return false;
        //                    }
        //                });
        //                $(dataView._allFields).each(function () {
        //                    var f = this,
        //                        loweredName = f.Name.toLowerCase();
        //                    if (loweredName == 'contenttype' || loweredName == 'content_type') {
        //                        contentType = row[f.Index];
        //                        return false;
        //                    }
        //                });
        //                if (!contentType)
        //                    contentType = 'image'
        //                if (contentType.match(/^image/i))
        //                    blobLink.attr('data-content-type', contentType);
        //                else if (!isTouchPointer)
        //                    blobLink.attr('target', '_blank');
        //            }
        //            else {
        //                blobLink.text(resourcesData.BlobDownloadLink).addClass('ui-btn ui-btn-icon-left ui-icon-arrow-d ui-btn-inline ui-mini ui-shadow ui-corner-all').appendTo(fieldText.parent());
        //                if (!isTouchPointer)
        //                    blobLink.attr('target', '_blank');
        //                fieldText.remove();
        //            }
        //        }
        //    }

        //    //if (editing)
        //    //    listview.addClass('app-editing');
        //    //else
        //    //    listview.removeClass('app-editing');

        //    if (editing)
        //        listview.addClass('app-form-editing');
        //    else
        //        listview.removeClass('app-form-editing');

        //    $(dataView._allFields).each(function () {
        //        var field = this,
        //            triggerField,
        //            contextFields = field.ContextFields;
        //        if (field.Calculated && contextFields) {
        //            $(contextFields.split(/\s*,\s*/)).each(function () {
        //                if (dataView.findField(this))
        //                    legacyCalculatedFields[this] = true;
        //            });
        //        }
        //        if (contextFields) {
        //            var iterator = /(\w+)\s*=\s*(\w+)/g,
        //                m = iterator.exec(contextFields);
        //            while (m) {
        //                populateFields[m[2]] = true;
        //                m = iterator.exec(contextFields);
        //            }
        //        }
        //    });

        //    for (fieldName in editors) {
        //        fieldInfo = editors[fieldName];
        //        field = fieldInfo.field;
        //        originalField = fieldInfo.originalField,
        //        fieldLabel = fieldInfo.label;
        //        item = fieldInfo.item;
        //        v = fieldInfo.value;
        //        t = fieldInfo.text;
        //        if (!editing)
        //            t = fieldInfo.trimmedText;
        //        fieldClass = 'app-field-' + field.Name;
        //        itemsStyle = originalField.ItemsStyle;
        //        causesFieldRef = originalField.Name + '.' + dataView._id + '.app';
        //        causesCalculate = originalField.CausesCalculate || legacyCalculatedFields[originalField.Name] ? causesFieldRef : null;
        //        causesPopulate = populateFields[originalField.Name] ? causesFieldRef : null;
        //        causesCopy = !String.isBlank(originalField.Copy) ? causesFieldRef : null;

        //        undefinedLookup = field.Index != originalField.Index && !originalField.ItemsStyle;
        //        if (editing && !originalField.isReadOnly()) {
        //            showHide(fieldInfo.readers, false);
        //            if (fieldInfo.writers.length) {
        //                showHide(fieldInfo.writers, true);
        //            }
        //            else {
        //                if (undefinedLookup) {
        //                    field = originalField;
        //                    fieldClass = 'app-field-' + field.Name;
        //                    fieldInput = $('<input type="text" />');
        //                    initFieldInput();
        //                    fieldInput.val(v == null ? '' : v);
        //                    inputContainer = fieldInput.textinput({ clearBtn: !isTextArea, clearBtnText: resourcesMobile.ClearText });
        //                    if (!isTouchPointer)
        //                        inputContainer.parent().find('.ui-input-clear').attr('tabindex', -1);
        //                    else
        //                        inputContainer.parent().find('.ui-input-clear').remove();
        //                    fieldInfo.label.text(field.HeaderText);
        //                }
        //                else if (!String.isNullOrEmpty(itemsStyle)) {
        //                    aliasField = field;
        //                    field = originalField;
        //                    fieldClass = 'app-field-' + field.Name;
        //                    v = fieldInfo.originalValue;
        //                    if (itemsStyle == 'Lookup' || itemsStyle == 'AutoComplete') {
        //                        fieldInput = $('<input type="hidden"/>').val(v);
        //                        initFieldInput();
        //                        inputContainer = $('<div></div>').appendTo(item);
        //                        fieldInput.appendTo(inputContainer);
        //                        var dummy = $('<input type="text" class="app-lookup-input"/>').insertBefore(fieldInput).attr('id', inputId),
        //                            link = $('<a href="#app-lookup" class="ui-btn ui-icon-carat-r ui-btn-icon-right ui-corner-all app-lookup"/>').insertBefore(fieldInput)
        //                            .text(t).data('data-context', { field: originalField, aliasField: aliasField, value: v, text: t, pageId: viewId });
        //                        if (!isTouchPointer)
        //                            link.attr('tabindex', -1);
        //                    }
        //                    else if (itemsStyle == 'CheckBox') {
        //                        fieldInput = $('<select data-role="slider"/>');
        //                        var maxTextLength = 0;
        //                        $(lovOf(originalField, fieldInfo)).each(function () {
        //                            var value = this[0],
        //                                text = this[1],
        //                                option = $('<option/>').attr('value', value != null ? value.toString() : '').data('value', value).text(text).appendTo(fieldInput);
        //                            if (text.length > maxTextLength)
        //                                maxTextLength = text.length;
        //                        });
        //                        initFieldInput();
        //                        fieldInput.val(v != null ? v.toString() : '');
        //                        inputContainer = fieldInput.slider();
        //                        fieldInput.next().css('width', maxTextLength + 2 + 'em');
        //                    }
        //                    else if (itemsStyle == 'CheckBoxList' || itemsStyle == 'RadioButtonList' || itemsStyle == 'ListBox') {
        //                        fieldInput = $('<input type="hidden"/>');
        //                        initFieldInput();
        //                        fieldInput.val(v != null ? v.toString() : '').attr('data-field', field.Name);
        //                        renderScrollableContainer(field, fieldInput, fieldInfo);
        //                        inputContainer = fieldInput;
        //                    }
        //                    else {
        //                        fieldInput = $('<select/>').addClass('app-lookup');
        //                        $(lovOf(originalField, fieldInfo)).each(function () {
        //                            var value = this[0],
        //                                text = this[1],
        //                                option = $('<option></option>').attr('value', value != null ? value.toString() : '').data('value', value).text(text).appendTo(fieldInput);
        //                        });
        //                        initFieldInput();
        //                        fieldInput.val(v != null ? v.toString() : '');
        //                        inputContainer = fieldInput.selectmenu().selectmenu('refresh');
        //                    }
        //                }
        //                else if (field.OnDemand) {
        //                    inputContainer = $('<div class="ui-input-text ui-body-inherit ui-corner-all app-drop-box-input"></div>').appendTo(item).addClass(fieldClass);
        //                    initOnDemandThumbnail(inputContainer);
        //                    _app.upload('create', {
        //                        container: $('<div></div>').appendTo(inputContainer).addClass('drop-box-' + field.Index),
        //                        dataViewId: dataView._id,
        //                        fieldName: field.Name
        //                    })
        //                }
        //                else {
        //                    //requiresDatePicker = false;
        //                    var isTextArea = field.Rows > 1;
        //                    fieldInput = isTextArea ? $('<textarea/>') : $('<input type="text" />');
        //                    if (isTextArea) {
        //                        fieldInput.attr('rows', field.Rows);
        //                        if (!isTouchPointer || (!iOS || true))
        //                            fieldInput.attr('data-autogrow', 'false');
        //                        fieldInput.css('white-space', 'pre-wrap');
        //                    }
        //                    else if (field.TextMode == 1)
        //                        fieldInput.attr('type', 'password');
        //                    else if (field.Type == 'String') {
        //                        if (isPhoneField(field))
        //                            fieldInput.attr('type', 'tel');
        //                        else if (isEmailField(field))
        //                            fieldInput.attr('type', 'email');
        //                        else if (isUrlField(field))
        //                            fieldInput.attr('type', 'url');
        //                    }
        //                    else
        //                        if (field.Type.match(/^Date/)) {
        //                            //requiresDatePicker = true;
        //                            fieldInput.addClass('app-input-date');
        //                        }
        //                        else if (field.Type != 'TimeSpan')
        //                            fieldInput.data('format', { type: 'number', value: v, text: v == null ? '' : t, field: field });
        //                    initFieldInput();
        //                    fieldInput.val(v == null ? '' : t);
        //                    inputContainer = fieldInput.textinput({ clearBtn: !isTextArea, clearBtnText: resourcesMobile.ClearText });
        //                    if (isTextArea)
        //                        inputContainer.textinput('refresh');
        //                    else {
        //                        if (!isTouchPointer)
        //                            inputContainer.parent().find('.ui-input-clear').attr('tabindex', -1);
        //                        else
        //                            inputContainer.parent().find('.ui-input-clear').remove();
        //                    }
        //                    //if (requiresDatePicker) {
        //                    //    $(fieldInput).attr({ 'data-input-type': 'datepicker', 'data-format-string': field.DataFormatString }).datepicker();

        //                    //    //_app.touch.CalendarInput('attach', {
        //                    //    //    input: $(fieldInput).attr('data-field', field.Name).attr('type', 'text'),
        //                    //    //    dataView: dataView,
        //                    //    //    keyboard: !(iOS || android)
        //                    //    //});
        //                    //}
        //                }
        //                fieldInfo.item.children().each(function (index) {
        //                    if (index > 0)
        //                        fieldInfo.writers.push($(this));
        //                });
        //            }
        //        }
        //        else {
        //            fieldLabel.attr('for', '');
        //            showHide(fieldInfo.writers, false);
        //            if (fieldInfo.readers.length) {
        //                showHide(fieldInfo.readers, true);
        //            }
        //            else {
        //                inputContainer = $('<div class="ui-input-text ui-body-inherit ui-corner-all app-static-text"></div>').appendTo(item);
        //                fieldText = $('<div></div>').appendTo(inputContainer).addClass(fieldClass).addClass('app-field');
        //                fieldInfo.readers.push(inputContainer);
        //                if (field.Index == dataView._fields[0].AliasIndex/*map.heading*/)
        //                    item.addClass('dv-heading');
        //                if (field.OnDemand)
        //                    initOnDemandThumbnail(fieldText);
        //                else {
        //                    if (field.Type == 'Boolean' && v != null) {
        //                        items = field.Items;
        //                        if (items && items.length >= 2)
        //                            $(String.format('<span class="glyphicon glyphicon-{0}"/>', items[items.length - 1][1] == t ? 'check' : 'unchecked')).appendTo(fieldText);
        //                        else
        //                            fieldText.html('&nbsp;');
        //                        fieldText.attr('title', t);
        //                    }
        //                    else
        //                        textOrHtml(field, t, fieldText);
        //                    fieldLink = null;
        //                    fieldText.contents().wrap('<span class="app-field-data"/>');
        //                    if (v) {
        //                        hyperlink = toHyperlink(originalField, row);
        //                        if (hyperlink)
        //                            fieldText.attr('data-href', hyperlink);
        //                    }
        //                    if (isPhoneField(field, true) && v)
        //                        fieldLink = $('<a class="ui-btn-right ui-btn ui-icon-phone ui-btn-icon-notext ui-shadow ui-corner-all app-btn" rel="external"/>').appendTo(fieldText).attr('href', 'tel:' + v);
        //                    else if (isEmailField(field, true) && v)
        //                        fieldLink = $('<a class="ui-btn-right ui-btn ui-icon-mail ui-btn-icon-notext ui-shadow ui-corner-all app-btn" rel="external"/>').appendTo(fieldText).attr('href', 'mailto:' + v);
        //                    else if (isUrlField(field, true) && v)
        //                        fieldLink = $('<a class="ui-btn-right ui-btn ui-icon-eye ui-btn-icon-notext ui-shadow ui-corner-all app-btn" rel="external"/>').appendTo(fieldText).attr({ 'href': v });
        //                    else if (isLocationField(field, true) && v)
        //                        fieldLink = $('<a class="ui-btn-right ui-btn ui-icon-location ui-btn-icon-notext ui-shadow ui-corner-all app-btn" rel="external"/>').appendTo(fieldText).attr({ 'href': rowToAddressUrl(that.commandRow(), createItemAddress(dataView), 'q') });
        //                    else if (isLookupField(originalField) && originalField.ItemsDataController && v && !originalField.tagged('lookup-details-hidden'))
        //                        fieldLink = $('<a href="#app-details" class="ui-btn-right ui-btn ui-icon-carat-r ui-btn-icon-notext ui-shadow ui-corner-all app-btn"/>').appendTo(fieldText)
        //                            .attr('data-field-name', originalField.Name).attr('data-field-text', field.HeaderText + ' - ' + dataView.get_view().Label);
        //                    if (fieldLink)
        //                        fieldLink.attr('title', field.HeaderText + ':\n' + v);
        //                    if (undefinedLookup)
        //                        fieldInfo.label.text(field.HeaderText);
        //                }
        //            }
        //            showHide(fieldInfo.writers, false);
        //        }
        //    }
        //    evaluateConditionalStyleExpressions(dataView, row, listview);
        //},
        stateChanged: function (updateContext) {
            var that = this,
                dataView = that.dataView(),
                content = that.content(),
                layoutElem = content.find('[data-layout]'),
                row;

            if (layoutElem.data('prepared')) {
                row = dataView.editRow();
                _input.evaluate({ dataView: dataView, row: row, container: layoutElem });
                _input.render({ container: layoutElem, dataView: dataView, row: row });
                if (updateContext != false) {
                    refreshContext(false, 0);
                    pageResized();
                    if (that.editing() && !isTouchPointer)
                        _input.focus({ container: layoutElem });
                }
            }
            else
                refreshContext();
        },
        context: function (list) {
            var that = this,
                dataView = that.dataView(),
                row = that.commandRow(),
                editing = that.editing();
            if (!list.isSideBar/* && !sidebarIsVisible()*/)
                addSelectAction(dataView, list, row);
            if (!editing)
                enumerateSpecialActionContextOptions(dataView, list, row);
            //if (editing)
            //    list.push({ text: resourcesForm.RequiredFiledMarkerFootnote });
            enumerateActions(['Form', 'ActionBar', 'Context'], dataView, list, row);
        }
    }

    /* mobile alerts and confirmations */

    _app.alert = function (message, callback) {
        return showConfirmation({ name: '_alert', message: message, /*icon: 'info-outline', */submit: callback, cancel: false });
    }

    _app.confirm = function (message, trueCallback, falseCallback) {
        return showConfirmation({ name: '_confirm', message: message, /*icon: 'help-outline', */submit: trueCallback, cancel: falseCallback || nop });
    }

    function showConfirmation(options) {
        var msg = options.message,
            message = msg != null ? msg.toString() : '',
            cancel = options.cancel,
            promise = $.Deferred();
        mobile.busy(false);
        whenPageShown(function () {
            var pageInfo = mobile.pageInfo();
            whenPageCanceled(function () {
                var survey = pageInfo.dataView.survey();
                if (survey) {
                    var cancel = survey._cancel;
                    if (!pageInfo._canceled) {
                        if (cancel == false)
                            cancel = survey._submit;
                        if (cancel)
                            cancel();
                        else
                            promise.resolve();
                    }
                }
            });
        });
        _app.survey({
            _submit: options.submit,
            _cancel: cancel,
            _promise: promise,
            //text: mobile.appName(),
            controller: options.name,
            questions: [{ name: 'Message', value: message, text: false, readOnly: true, rows: 3, htmlEncode: !message.match(/<\/\w+>/) }],
            //tags: 'modal-fit-content modal-always modal-max-xxs promo-none modal-buttons-more-none',// + ' material-icon-' + options.icon,
            options: {
                modal: {
                    fitContent: true,
                    always: true,
                    max: 'xxs',
                    buttons: {
                        more: false
                    },
                    gapRequired: true
                },
                contentStub: false,
                promo: false
            },
            submit: 'alertconfirmed.app',
            cancel: cancel != false ? 'alertnotconfirmed.app' : cancel,
            layout: '<div data-container="panel"><span data-control="field" data-field="Message">[Message]</span></div>'
        });
        return promise;
    }

    $(document).on('alertconfirmed.app alertnotconfirmed.app', function (e) {
        var dataView = e.rules.dataView(),
            survey = dataView.survey(),
            confirmed = e.type == 'alertconfirmed',
            callback = confirmed ? survey._submit : survey._cancel,
            promise = survey._promise;
        mobile.pageInfo(dataView)._canceled = true;
        pageTransitions(false);
        whenPageShown(function () {
            pageTransitions(true);
            if (callback)
                callback();
            else if (confirmed)
                promise.resolve();
            else
                promise.reject();

        });
    });

    /* menu */

    menu = Web.Menu = {};

    menu.Nodes = {};

    // empty stub components of the desktop menu
    _window.$nextTabIndex = _window.$closeHovers = nop;

    function buildHierarchyLinks(level, list, depth) {
        $(level).each(function () {
            var menuItem = this,
                href = menuItem.url,
                item = $('<li/>').appendTo(list).addClass('app-depth' + depth),
                hrefParts,
                target;
            if (href) {
                hrefParts = href.match(menuItemUrlRegex);
                if (hrefParts) {
                    href = hrefParts[2];
                    target = hrefParts[1];
                }
                $('<a/>').appendTo(item).data('node', menuItem).attr({ 'href': href, target: target, rel: 'external' }).text(menuItem.title);
            }
            else
                $('<span/>').appendTo(item).text(menuItem.title);
            if (menuItem.children)
                buildHierarchyLinks(menuItem.children, list, depth + 1);
        });
    };


    function initializeMainMenu() {
        for (var menuId in menu.Nodes) {
            menu.nodes = menu.Nodes[menuId]; // create a global variable with the list of main menu nodes
            break;
        }
        if (!menu.nodes) return;

        var contextButton = $('#app-btn-context').on('vclick', function () {
            if (mobile.busy() || contextButton.data('skipClick'))
                return;
            callWithFeedback(contextButton, function () {
                if (($('.ui-panel-open').attr('id') || '').match(/^app-panel-context/))
                    closePopupsAndPanels();
                else {
                    closePopupsAndPanels(true);
                    var position = $body.is('.app-has-panel-right') ? 'left' : '';
                    mobile.showContextMenu({ position: position, scope: position ? mobile.dataView() : null });
                }
            });
            return false;
        });

        // shift context button to the left to account for the permanent vertical scrollbar in wrappers 
        //var contextButtonRight = parseFloat(contextButton.css('right')) + scrollbarInfo.width;
        //contextButton.css('right', contextButtonRight);

        //menu.footerIterators.unshift(function (depth) {
        //    if ($(this).is('.level0')) {
        //        var settingsItem = $('<a/>').text(resourcesMobile.Settings).appendTo($('<li data-icon="gear" data-theme="b"/>').appendTo(this)).on('vclick', function () {
        //            if (!skipMenuActionOnClose)
        //                activeLink(settingsItem);
        //            menuActionOnClose = function () {
        //                mobile.contextScope('_contextMenu');
        //                configureSettings();
        //            }
        //            closeActivePanel(true);
        //        });
        //        return true;
        //    }
        //});

        $('[data-app-role="sitemap"]').attr('class', 'app-site-map').each(function () {
            var siteMap = $(this),
                list = $('<ul data-inset="false" />').appendTo(siteMap),
                isLoggedIn = membership && membership.loggedIn();
            function addLoginStatus() {
                var link = $('<li><a rel="external"/></li>').appendTo(list).find('a');
                if ($('#app-welcome').length && !isLoggedIn)
                    link.attr('href', '#app-welcome').text(resourcesMembershipBar.LoginButton);
                else
                    membership.loginStatus(link);
            }
            if (membership && !isLoggedIn)
                addLoginStatus();
            buildHierarchyLinks(menu.nodes, list, 1);
            if (membership && isLoggedIn)
                addLoginStatus();
            list.listview().on('vclick', 'a[rel="external"]', function (event) {
                var link = $(event.target),
                    href = link.attr('href'),
                    target = link.attr('target'),
                    hrefIsPageId = href.match(/^#/);
                if (!clickable(link))
                    return false;
                if (!hrefIsPageId && !target)
                    busyBeforeUnload();
                callWithFeedback(link, function () {
                    if (hrefIsPageId)
                        mobile.changePage(href.substring(1));
                    else
                        menuItemNodeCallback(link.data('node'));

                });
                return false;
            }).filterable({ filterPlaceholder: resourcesMobile.FilterSiteMap });
        });
    }

    /* membership bar */

    if (typeof Web.Membership != 'undefined') {

        Web.Membership.prototype.initialize = function () {
            var that = this;
            // initialize global varaibles
            authenticationEnabled = that.get_authenticationEnabled();
            displayMyAccount = that.get_displayMyAccount();
            loggedIn = that.loggedIn();
            userName = that.get_user();
            // parse supported cultures
            var cultures = that.get_cultures();
            if (!String.isNullOrEmpty(cultures) && !(__tf != 4)) {
                var selectedCulture = { value: 'Detect,Detect', text: resourcesMembershipBar.AutoDetectLanguageOption, selected: false };
                var cultureList = [selectedCulture];
                var selected = null;
                $(cultures.split(/;/)).each(function () {
                    if (this.length) {
                        var info = this.split('|');
                        var culture = { value: info[0], text: info[1], selected: info[2] == 'True' };
                        cultureList.push(culture);
                        if (culture.selected)
                            selectedCulture = culture;
                    }
                });
                _app.cultureList = cultureList;
            }

            // add header iterator for navigation menu
            //menu.headerIterators.push(function () {
            //    var parentList = $(this),
            //        cultures = that.get_cultures(), // initialize the language selector
            //        result;
            //    if (!String.isNullOrEmpty(cultures) && !(__tf != 4)) {
            //        var selectedCulture = { value: 'Detect,Detect', text: resourcesMembershipBar.AutoDetectLanguageOption, selected: false };
            //        var cultureList = [selectedCulture];
            //        var selected = null;
            //        $(cultures.split(/;/)).each(function () {
            //            if (this.length) {
            //                var info = this.split('|');
            //                var culture = { value: info[0], text: info[1], selected: info[2] == 'True' };
            //                cultureList.push(culture);
            //                if (culture.selected)
            //                    selectedCulture = culture;
            //            }
            //        });
            //        var languageItem = $('<a/>').text(selectedCulture.text).appendTo($('<li data-icon="location" data-theme="b"/>').appendTo(parentList))
            //            .on('vclick', function () {
            //                if (!skipMenuActionOnClose)
            //                    activeLink(languageItem);
            //                menuActionOnClose = function () {
            //                    currentContext = [
            //                        {
            //                            text: resourcesMobile.Back, icon: iconBack, callback: function () {
            //                                mobile._menuPanel.panel('toggle');
            //                            }
            //                        },
            //                        { text: resourcesMembershipBar.ChangeLanguageToolTip, instruction: true }]
            //                    $(cultureList).each(function (index) {
            //                        var culture = this;
            //                        currentContext.push({
            //                            text: culture.text, icon: index == 0 ? '' : (culture.selected ? 'check' : false), context: culture, callback: function (newCulture) {
            //                                that.changeCulture(newCulture.value);
            //                            }
            //                        });
            //                        if (index == 0)
            //                            currentContext.push({});
            //                    });
            //                    showContextPanel(currentContext, '#app-panel-languague', { position: 'left' });
            //                }
            //                closeActivePanel(true);
            //                return false;
            //            });
            //        result = true;
            //    }
            //    // update the welcome message and create Login link when needed
            //    var welcomePlacehoder = this.find('.welcome');
            //    if (loggedIn) {
            //        var welcome = that.get_welcome();
            //        if (String.isNullOrEmpty(welcome))
            //            welcomePlacehoder.hide();
            //        else
            //            welcomePlacehoder.html(String.localeFormat(welcome, that.get_user(), new Date()));
            //    }
            //    else if (that._allowLoginInMenu) {
            //        welcomePlacehoder.hide();
            //        var loginItem = $('<a/>').text(resourcesMembershipBar.LoginLink).appendTo($('<li data-icon="lock" data-theme="b"/>').appendTo(parentList));
            //        loginItem.on('vclick', function () {
            //            if (!skipMenuActionOnClose)
            //                activeLink(loginItem);
            //            menuActionOnClose = function () {
            //                activeLink();
            //                that.showLogin();
            //            }
            //            closeActivePanel();
            //        });
            //        result = true;
            //    }
            //    return result;
            //});
            //if (loggedIn && (displayMyAccount || authenticationEnabled))
            //    menu.footerIterators.push(function (depth) {
            //        var result = false;
            //        if (displayMyAccount && $(this).is('.level0') && false) {
            //            $(String.format('<li>{0}</li>', resourcesMembershipBar.MyAccount)).appendTo(this);
            //            result = true;
            //        }
            //        if (authenticationEnabled) {
            //            var logoutItem = $('<a/>').text(resourcesMembershipBar.LogoutLink).appendTo($('<li data-icon="power" data-theme="b"/>').appendTo(this));
            //            logoutItem.on('vclick', function () {
            //                if (!skipMenuActionOnClose)
            //                    activeLink(logoutItem);
            //                menuActionOnClose = function () {
            //                    halt();
            //                    that.logout();
            //                }
            //                closeActivePanel();
            //            });
            //            result = true;
            //        }
            //        return result;
            //    });
        };

        Web.Membership.prototype.dispose = function () {
        };

        Web.Membership.prototype.updated = function () {
            membership = this;
            userActivity();
            if (this.get_idleTimeout())
                $(document).on('awake.app', function (event) {
                    return !membership.idle();
                });
            this.idleInterval(true);
            if (mobile)
                this.mobileUpdated();
        };

        Web.Membership.prototype._idle = function () {
            var that = this;
            that.idleInterval(false);
            signOut();
        };

        Web.Membership.prototype.loginStatus = function (selector) {
            var that = this,
                loggedIn = that.loggedIn(),
                loginStatus = $(selector).text(loggedIn ? resourcesMembershipBar.LogoutLink : resourcesMembershipBar.LoginLink).on('vclick', function (e) {
                    callWithFeedback(loginStatus, function () {
                        if (loggedIn)
                            signOut();
                        else
                            that.showLogin();
                    });
                    return false;
                });
        }

        Web.Membership.prototype.mobileUpdated = function () {
            var that = this,
                loggedIn;
            $(document).one('start.app', function () {
                that._allowLoginInMenu = that.get_displayLogin();
            });
            this.loginStatus('a[data-app-role="loginstatus"]');
            if (!_app.AccountManager.enabled())
                $(document).one('start.app', function () {
                    if (mobile.returnUrl() && !isDedicatedLoginPage())
                        mobile.showAccountManager(null);
                });
        };

        Web.Membership.prototype.showLogin = function () {
            mobile.showAccountManager(null, true);
        };
    };

    Web.Mobile = function () {
        var that = this,
            toolbar;
        that._asyncJob = 0;
        that._pageMap = {};
        that._pages = [];
        toolbar = $('#app-bar-toolbar');
        if (isHosted)
            toolbar.css('visibility', 'hidden');
        that._toolbar = toolbar;
        that._logo = toolbar.find('.app-logo');
        that._actionButton = $('.app-btn-promo');
        that._toolbarButtons = toolbar.find('.app-btn');
        that._title = toolbar.find('h1').addClass('app-hidden');
        //that._stickyHeaderBar = $('#app-bar-heading');
        that._menuButton = $('#app-btn-menu');
        that._backText = toolbar.find('.app-back-text').hide().attr('title', resourcesMobile.Back);
        that._contextButton = $('#app-btn-context');
        that._modalDataViews = [];
        that._modalStack = [];
        that._pagesToDelete = [];
    }

    Web.Mobile.prototype = {
        settings: function (selector, value) {
            if (arguments.length == 1)
                return $settings(selector);
            else
                $settings(selector, value);
        },
        appName: function () {
            var that = this,
                meta;
            if (!that._appName)
                that._appName = mobile._logo.text() || $('#PageHeaderBar').text() || $('head meta[name="application-name"]').attr('content');
            return that._appName;
        },
        height: function () {
            var height = _screen.height;
            if (navigator.userAgent.match(/Mobile.+Safari/) && !navigator.userAgent.match(/Chrome/))
                height += 60;
            return height;
        },
        page: function (id) {
            if (!id)
                id = 'Main';
            var p = $('#' + id);
            if (!p.length) {
                p = $(String.format('<div data-role="page" id="{0}"><div data-role="content"></div></div>', id)).appendTo($body).page();
                var pageInfo = getPageInfo(p),
                    stickyHeader = $('<div id="app-bar-heading" class="app-bar-heading"><div class="app-bar-text"></div></div>').hide().appendTo(p);
                if (pageInfo) {
                    pageInfo.page = p;
                    pageInfo.stickyHeader = stickyHeader;
                    pageInfo.scrollable = createScroller(p).data('sticky-header', stickyHeader);
                    if (pageInfo.home && pageInfo.dataView && pageInfo.dataView.get_isForm() && !pageInfo.dataView._selectedKey.length)
                        stickyHeader.remove();
                }
                resetPageHeight(p);
            }
            return p;
        },
        makeModalOrPanel: function (pageInfo) {
            var page = pageInfo.page,// $('#' + pageInfo.id),
                dataView = pageInfo.dataView,
                isHomePage = pageInfo.home,
                isPanel = false,
                isFullscreen,
                isModal = false;

            if (dataView) {
                if (dataView.tagged('content-stub-none'))
                    page.addClass('app-content-stub-hidden');
                var dock = dataView && dataView.tagged(/\bmodal\-dock\-(top|left|right|bottom)\b/);
                if (dock && (dataView.tagged('modal-fit-content') || !$('.app-page-modal-background').filter(visibleFilterFunc).length))
                    page.addClass('app-page-modal-dock app-page-modal-dock-' + dock[1]);
                if (dataView.tagged('modal-gap-required'))
                    page.addClass('app-page-modal-gap-required');
                if (dataView.tagged('modal-fullscreen')) {
                    page.addClass('app-page-modal-fullscreen');
                    isFullscreen = true;
                }
            }

            if (!isHomePage) {

                if ($('.app-page-modal-root').length)
                    isModal = true;
                else if (useFullscreenWhenSeeAll) {
                    dataView.tag('modal-never-' + dataView.get_viewId());
                    pageInfo.headerText = false;
                    if (dataView.get_view().Label != mobile.title())
                        pageInfo.backText = mobile.title();
                }
                else {
                    var modalWhen = dataView && dataView.tagged(/\bmodal\-(never|always|(when\-(tn|xxs|xs|sm|md|lg|xl|xxl)))\b/),
                        modalNever, modalNeverId;
                    if (modalWhen) {
                        page.addClass('app-page-' + modalWhen[0]);
                        isModal = modalWhen[1] == 'always' || !(modalWhen[1] == 'never' || _screen.width < toPhysicalWidth(modalWhen[3]));
                        if (!isModal && modalWhen[1] == 'never') {
                            modalNeverId = dataView.tagged(/\bmodal-never\-(\w+)\b/);
                            if (modalNeverId && modalNeverId[1] != dataView.get_viewId())
                                isModal = allowModal();
                        }
                    }
                    else {
                        isModal = dataView && allowModal();
                        pageInfo.backText = mobile.title();
                    }
                }

                var panelSpec = dataView && dataView.tagged(/\bsplit(\-(single|multiple))?\-(right|bottom|top|left)(\d+)?\b/);
                if (panelSpec) {
                    var parentDataView = dataView.get_parentDataView(),
                        panels,
                        panelInfo;
                    if (parentDataView) {
                        panels = parentDataView._panels;
                        if (!panels)
                            panels = parentDataView._panels = [];
                        var panelLocation = panelSpec[3],
                            panelAccepts = panelSpec[2] || 'single',
                            panelSize = panelSpec[4] ? parseInt(panelSpec[4]) : (panelLocation == 'top' ? 33 : 66),
                            panelInfo,
                            parentPage = getPageInfo(parentDataView).page;// $('#' + parentDataView._id);
                        $(panels).each(function () {
                            var p = this;
                            if (p.location == panelLocation) {
                                panelInfo = p;
                                return false;
                            }
                        });
                        if (panelLocation == 'right' && toPhysicalWidth('md') < _screen.width) {
                            isModal = false;
                            if (panelInfo) {
                                if (panelInfo.size < panelSize)
                                    panelInfo.size = panelSize;
                                if (panelInfo.accepts == 'single') {
                                    mobile.deletePage(getPageInfo(panelInfo.pages[0].attr('id')));
                                    //mobile.garbageCollector(getPageInfo(panelInfo.pages[0].attr('id')));
                                    panelInfo.pages = [];
                                }
                            }
                            else
                                panelInfo = { pages: [], location: panelLocation, size: panelSize, accepts: panelAccepts/*, history: !panelSpec[2]*/ }
                            panelInfo.pages.push(page);
                            panels.push(panelInfo);
                            dataView._panelContainer = parentPage;
                            page.appendTo($body);
                            $(panelInfo.pages).removeClass('app-page-panel-active');
                            page.addClass('app-page-panel app-page-panel-active app-page-panel-' + panelLocation + ' app-page-panel-' + panelAccepts);
                            findScrollable(page).css('top', getToolbarHeight() - 1);
                            pageInfo.isPanel = true;
                            var modalDataViews = mobile._modalDataViews,
                                modalIndex = modalDataViews.indexOf(pageInfo.id);
                            if (modalIndex != -1)
                                modalDataViews.splice(modalIndex, 1);
                            parentPage.addClass('app-has-panel app-has-panel-' + panelLocation);
                        }
                    }
                }
            }

            if (isModal && !page.is('.app-page-modal')) {
                page.find('.app-page-header-fixed').remove();
                page.addClass('app-page-modal');
                if (!dataView || !dataView.tagged('modal-title-none')) {
                    var title = $('<div class="app-page-modal-title"><span class="app-text"/></div>').insertBefore(findScrollable(page)/*.find('.ui-content .app-wrapper')*/);
                    $('<a class="app-btn app-btn1 app-btn-search"/>').appendTo(title).hide().attr('title', labelSearch);
                    if (!dataView || !dataView.tagged('modal-buttons-more-none'))
                        $('<span class="app-btn-context app-btn app-btn2 ui-icon-dots"/>').appendTo(title).attr('title', labelMore);
                    if (!dataView || !dataView.tagged('modal-buttons-fullscreen-none')) {
                        var fullscreen = $('<span class="app-btn app-btn3 app-btn-fullscreen"/>').appendTo(title).attr('title', isFullscreen ? resourcesMobile.ExitFullscreen : resourcesMobile.Fullscreen);
                        if (isFullscreen)
                            fullscreen.addClass('app-btn-fullscreen-exit');
                    }
                    $('<span class="app-btn app-btn4 app-btn-close"/>').appendTo(title).attr('title', resourcesModalPopup.Close);
                }
                var modalMax = dataView && dataView.tagged(/\bmodal\-max\-(tn|xxs|xs|sm|md|lg|xl|xxl|any)\b/);
                if (modalMax)
                    page.addClass('app-page-' + modalMax[0]);
            }
            else if (!isModal && page.is('.app-page-modal')) {
                page.removeClass('app-page-modal').css({ left: '', top: '', width: '', minWidth: '', maxWidth: '', paddingTop: '' });
                page.find('.app-page-modal-title').remove();
                pageInfo.scrollable.css({ left: '', top: '', width: '', minWidth: '', maxWidth: '' });
            }
            if (!!pageInfo.isModal != isModal) {
                pageInfo.isModal = isModal;
                //if (isModal) {
                //    var modalSize = dataView && dataView.tagged(/\bmodal\-(size\-(tn|xxs|xs|sm|md|lg|xl))\b/);
                //    if (modalSize)
                //        page.addClass('app-page-' + modalSize[0]);
                //}
                resetPageHeight(page);
            }
        },
        activeLink: function (elem, autoRemove) {
            if (!$($mobile.activeClickedLink).is('.app-tab-active'))
                $mobile.removeActiveLinkClass(true);
            if (elem) {
                var link = $(elem).closest('a');
                if (link.length)
                    elem = link;
                if (!elem.is('.app-btn-static')) {
                    elem.addClass('ui-btn-active');
                    if (autoRemove == null || autoRemove)
                        $mobile.activeClickedLink = elem;
                }
            }
        },
        blink: function (elem, callback) {
            activeLink(elem);
            setTimeout(function () {
                activeLink();
                setTimeout(function () {
                    activeLink(elem);
                    setTimeout(function () {
                        activeLink();
                        if (callback)
                            callback();
                    }, 200);
                }, 200);
            }, 200);
        },
        content: function (id) {
            var pageInfo = getPageInfo(id),
                p = pageInfo && pageInfo.page ? pageInfo.page : mobile.page(id),// this.page(id),
                c = pageInfo && pageInfo.scrollable ? pageInfo.scrollable : findScrollable(p);//.find('.ui-content .app-wrapper').last();
            return c.length ? c : p.find('[data-role="content"]');
        },
        showContextPanel: function (context, id, options) {
            showContextPanel(context, '#' + id, options);
        },
        toggleContextPanel: function (id) {
            if (this.contextScope())
                id += '-scope';
            $(id).panel('toggle');
        },
        causesCalculate: function (value) {
            //if (arguments.length == 0)
            //    return calculateCausedBy.length ? calculateCausedBy[0] : null;
            //else if (value == false) {
            //    if (calculateCausedBy.length)
            //        calculateCausedBy.splice(0, 1);
            //    calculateLastCausedBy = null;
            //}
            //else
            //    calculateCausedBy.push(value);
        },
        pageVar: function (name, value) {
            if (arguments.length == 1)
                return pageVariable(name);
            pageVariable(name, value);
        },
        userVar: function (name, value) {
            if (arguments.length == 1)
                return userVariable(name);
            userVariable(name, value);
        },
        callWithFeedback: function (link, callback) {
            link = $(link);
            if (link && link.length)
                callWithFeedback(link, callback);
        },
        progress: function (method, options) {
            var screen = $('.app-progress-screen');

            function show() {
                if (!screen.length)
                    screen = $('<div class="app-progress-screen"><div class="app-progress-text"></div><div class="app-progress-bar"><div class="app-progress-indicator"></div></div></div>').appendTo($body);
                var text = screen.find('.app-progress-text'),
                    bar = screen.find('.app-progress-bar'),
                    indicator = bar.find('.app-progress-indicator');

                if (options.text)
                    text.text(options.text).show();
                else
                    text.hide();

                if (options.progress != null)
                    indicator.width((options.progress * 100).toString() + '%').removeClass('app-progress-marquee');
                else
                    indicator.css({ 'width': '100%', 'margin-left': '-100%' }).addClass('app-progress-marquee');
            }

            function hide() {
                screen.remove();
            }

            switch (method) {
                case 'show':
                    show();
                    break;
                case 'hide':
                    hide();
                    break;
            }
        },
        pageHeader: function (value) {
            var pageInfo = getPageInfo(value.id),
                headerText = [value.text];
            if (value.text2)
                headerText[1] = value.text2;
            if (pageInfo) {
                pageInfo.headerText = headerText;
                if (pageInfo.id == getActivePageId())
                    pageHeaderText(headerText);
            }
        },
        dataView: function () {
            var pageInfo = this.pageInfo();
            return pageInfo ? pageInfo.dataView : null;
        },
        prevPageInfo: function () {
            var stack = $mobile.navigate.history.stack,
                prevPageId, prevPage;
            if (stack.length > 1) {
                prevPageId = stack[stack.length - 2].pageUrl;
                if (prevPageId) {
                    prevPage = getPageInfo(prevPageId);
                }
            }
            return prevPage;
        },
        pageInfo: function (value) {
            if (!value)
                value = getActivePageId();
            else
                if (value._id && value._controller)
                    value = value._id;
                else if (value.selector != null && value.length != null)
                    value = value.attr('id') || '';
            if (typeof value == 'string')
                return this._pageMap[value];
            else
                if (!value)
                    return null;
                else {
                    this._pageMap[value.id] = value;
                    if (value.dataView && value.dataView._id)
                        this._pageMap[value.dataView._id] = value;
                    this._pages.push(value);
                }
        },
        scrollable: function () {
            var scrollable = findScrollable();
            if (arguments[0] == 'refresh')
                updateScrollbars(scrollable, false);
            return scrollable;
        },
        unloading: function () {
            busyBeforeUnload();
        },
        refresh: function (cancel, delay, callback) {
            refreshContext(cancel, delay, callback);
        },
        refreshEchoToolbarWithDelay: function (dataView, echo) {
            refreshEchoToolbarWithDelay(dataView, echo)
        },
        listPopup: function (options) {
            showListPopup(options);
        },
        cardPopup: function (options) {
            cardPopup(options);
        },
        busyIndicator: function (show) {
            busyIndicator(show);
        },
        viewStyle: function (dataViewId, viewStyle, key) {
            changeViewStyleWithFeedback(dataViewId, viewStyle, key);
        },
        bar: function (method, options) {
            var bar,
                actionBar,
                child,
                promo;

            function positionHeader() {
                actionBar = bar.prevAll('.app-bar-actions');
                var modalHeader = actionBar.parent().find('.app-page-header-fixed');
                if (actionBar.is('.app-bar-actions') && actionBar.is(':visible')) {
                    var barTop = actionBar.position().top + actionBar.height();
                    bar.css('top', barTop);
                    modalHeader.css('top', barTop + bar.outerHeight() - 1).closest('.ui-page').addClass('app-has-header-bar');
                }
                else
                    bar.css('top', '');
            }

            function hideBarIfEmpty() {
                var empty = true,
                    hasCustomContent;
                bar.children().each(function () {
                    var c = $(this);
                    if (c.css('display') != 'none') {
                        empty = false;
                        //if (!c.is('.app-bar-system'))
                        //    hasCustomContent = true;
                    }
                });
                if (empty) {
                    bar.hide();
                    if (bar.is('.app-bar-footer'))
                        mobile.promo().css('margin-bottom', '');
                    else
                        bar.parent().find('.app-page-header-fixed').closest('.ui-page').removeClass('app-has-header-bar');
                    doResetPageHeight();
                }
                else {
                    bar.show();
                    //if (hasCustomContent)
                    //    bar.removeClass('app-bar-system');
                    //else
                    //    bar.addClass('app-bar-system');
                }
            }

            function doResetPageHeight() {
                resetPageHeight(bar.closest('.ui-page'));
            }

            if (method == 'create') {
                var type = options.type,
                    page = options.page,
                    scrollable = findScrollable(page),// page.is('.ui-page') ? page.find('.ui-content .app-wrapper') : findScrollable($(page)),
                    scrollbar;
                bar = page.find('.app-bar-' + type);
                if (!bar.length) {
                    if (type == 'header') {
                        bar = $('<div class="app-bar-header ui-header ui-bar-inherit ui-header-fixed"></div>').hide().insertBefore(scrollable);
                        positionHeader();
                    }
                    else if (type == 'footer') {
                        scrollbar = scrollable.next();
                        bar = $('<div class="app-bar-footer ui-footer ui-bar-inherit ui-footer-fixed"></div>').hide().insertAfter(scrollbar.is('.app-vscrollbar') ? scrollbar : scrollable);
                    }
                }
                return bar;
            }
            else {
                child = options;
                if (!child || !child.length)
                    return;
                bar = child.parent();
                if (method == 'show') {
                    if (bar.is('.app-bar-header'))
                        positionHeader();
                    //else {
                    //    bar.css('opacity', 0);
                    //    setTimeout(function () {
                    //        bar.css('opacity', '');
                    //    });
                    //}
                    bar.show();
                    child.show();
                    //if (bar.is('.app-bar-footer')) {
                    //    promo = mobile.promo();
                    //    promo.css('margin-bottom', '').css('margin-bottom', cssUnitsToNumber(promo.css('margin-bottom')) + bar.outerHeight());
                    //}
                    doResetPageHeight();
                    fitTabs();
                }
                else if (method == 'hide') {
                    child.hide();
                    hideBarIfEmpty();
                }
                else if (method == 'remove') {
                    child.remove();
                    hideBarIfEmpty();
                }
            }
        },
        promo: function (value, tooltip) {
            var button = this._actionButton,
                icon, isModalPage,
                pageFooter;
            function showButton() {
                if (button.is('.ui-disabled') || !($settings('ui.actions.promote')))
                    button.hide();
                //else if ($('.ui-popup-active').length) {
                //    //button.hide().addClass('app-hidden');
                //}
                else {
                    isModalPage = $('.ui-page-active').is('.app-page-modal');
                    //button.css({ 'margin-bottom': isModalPage ? 0 : '' });
                    var isVisible = button.is(':visible'),
                        pageInfo,
                        icon = button.attr('data-icon'),
                        movePromo = isPromoMovedWithNotification();
                    if (!isVisible) {
                        pageInfo = getPageInfo();
                        if (pageInfo && icon) {
                            if (!pageInfo._promo)
                                pageInfo._promo = {};

                            if (pageInfo._promo[icon])
                                isVisible = true;
                            else
                                pageInfo._promo[icon] = true;
                        }
                        button.one('transitionend', function () {
                            skipTap = false;
                        });
                        if (notifyBar && notifyBar.is(':visible')) {
                            button.show();
                            movePromo = isPromoMovedWithNotification();
                            button.hide();
                        }
                        button.css({ 'margin-bottom': isModalPage ? 0 : '', transform: isVisible ? 'none' : 'scale(.5)', transition: isVisible ? 'none' : 'transform 200ms' }).show();
                    }
                    button.css('margin-bottom', '');
                    var marginBottom = parseCss(button, 'margin-bottom');
                    if (movePromo)
                        marginBottom = parseCss(button, 'margin-bottom') + (notifyBar.is(':visible') ? notifyBar.outerHeight() : 0);
                    pageFooter = findActivePage('.app-bar-footer');
                    button.css({ 'margin-bottom': isModalPage ? 0 : marginBottom + (pageFooter.is(':visible') ? pageFooter.outerHeight() : 0) })
                    if (!isVisible) {
                        setTimeout(function () {
                            skipTap = true;
                            button.css('transform', 'none');
                        }, 50);
                    }
                }
            }

            if (arguments.length == 0)
                return button;
            else if (typeof value == 'boolean') {
                if (value)
                    showButton();
                else
                    button.hide();
                return button;
            }
            else if (typeof value == 'string') {
                button.find('.app-icon').remove();
                value = toMaterialIcon(value);
                materialIcon(value, button.attr({ 'title': tooltip, 'data-icon': value }));
                if (value.match(noPromoRegex)) {
                    button.hide().addClass('ui-disabled');
                    return false;
                }
                else {
                    button.removeClass('ui-disabled');
                    showButton();
                    return true;
                }
            }
        },
        toolbar: function (value) {
            var toolbar = this._toolbar;
            if (typeof value == 'boolean') {
                if (value)
                    toolbar.show();
                else
                    toolbar.hide();
            }
            //else if (typeof value == 'string') {
            //    //$('<span/>').text(value).appendTo(this._title.empty()); //      this._title.text(value);
            //}
            return toolbar;
        },
        stickyHeaderBar: function (selector) {
            var scrollable = findScrollable(selector);
            return scrollable.data('sticky-header') || $();
        },
        enumerateFields: function (dataView, context, fields, row) {
            // render fields
            var allFields = dataView._allFields,
                summaryOnly = fields == null;
            if (!row)
                row = dataView.extension().commandRow();
            if (summaryOnly) {
                fields = [];
                $(allFields).each(function () {
                    if (this.ShowInSummary && !this.Hidden)
                        fields.push(this);
                });
            }
            else
                context.push({ text: dataView.get_view().Label, theme: 'a', isStatic: false, instruction: true });
            $(fields).each(function () {
                var field = allFields[this.AliasIndex],
                    v = row[field.Index],
                    t = v == null ? '' : (field.TextMode == 2 ? htmlToText(v) : field.text(v));
                if (v != null)
                    if (field.OnDemand) {
                        if (field.OnDemandStyle != 1 && v && typeof v == 'string' && !v.match(/^null/))
                            context.push({ src: String.format('{0}blob.ashx?{1}=t|{2}{3}', dataView.resolveClientUrl(dataView.get_appRootPath()), field.OnDemandHandler, v, field.OnDemandStyle == 2 ? '&_nocrop' : ''), desc: field.HeaderText, display: 'before' });
                    }
                    else {
                        if (t == '')
                            t = nullValueInForms;
                        if (!summaryOnly && isPhoneField(field) && v)
                            context.push({ text: t, desc: field.HeaderText, href: 'tel:' + t, icon: 'phone' });
                        else if (!summaryOnly && isEmailField(field) && v)
                            context.push({ text: t, desc: field.HeaderText, href: 'mailto:' + t, icon: 'material-icon-email' });
                        else
                            context.push({ text: t, desc: field.HeaderText, isStatic: true, display: 'before' });
                    }
            });
            if (fields.length)
                context.push({});
        },
        infoView: function (dataView, standalone, row, pos) {
            var context = [],
                position = standalone ? 'left' : pos || '',
                map, allFields, fields, startIndex;
            if (!standalone)
                context.push({ text: resourcesMobile.Back, callback: backToContextPanel, icon: iconBack });
            while (dataView) {
                // create a list of fields that matches info bar
                startIndex = context.length;
                map = dataView.extension().itemMap();
                allFields = dataView._allFields;
                fields = [allFields[map.heading]];
                if (!standalone)
                    $(map.desc).each(function () {
                        fields.push(allFields[this]);
                    });
                // add extra fields that are not on the info bar
                $(dataView._fields).each(function () {
                    if (!this.Hidden && fields.indexOf(allFields[this.AliasIndex]) == -1)
                        fields.push(this);
                });
                this.enumerateFields(dataView, context, fields, row);
                //if (startIndex <= context.length - 2)
                //    context[startIndex + 1].theme = 'b';
                dataView = _app.find(dataView._filterSource);
            }
            showContextPanel(context, '#app-panel-info-view' + (position ? '-standalone' : ''), { position: position, className: 'app-panel-info-view' });
        },
        deletePage: function (pageInfo) {
            if (typeof pageInfo == 'string')
                pageInfo = getPageInfo(pageInfo);
            var page = pageInfo.page,// $('#' + pageInfo.id),
                dataView = pageInfo.dataView,
                index, scrollable;
            if (dataView)
                dataView.dispose();
            if (page) {
                //findScrollable(page).removeData().off();
                scrollable = pageInfo.scrollable;
                if (scrollable)
                    scrollable.removeData().off();
                page.page('destroy').remove().empty();
            }
            index = mobile._modalDataViews.indexOf(pageInfo.id);
            if (index != -1)
                mobile._modalDataViews.splice(index, 1);
            index = mobile._pages.indexOf(pageInfo);
            if (index != -1)
                mobile._pages.splice(index, 1);
            var navStack = navigationHistory.stack;
            $(navStack).each(function (index) {
                var entry = this;
                if (entry.hash == '#' + pageInfo.id) {
                    navStack.splice(index, 1);
                    if (index < navigationHistory.activeIndex)
                        navigationHistory.activeIndex--;
                    return false;
                }
            });
            pageInfo.dataView = null;
            pageInfo.page = null;
            pageInfo.scrollable = null;
            delete mobile._pageMap[pageInfo.id];
        },
        garbageCollector: function (pageInfo) {
            var pagesToDelete = mobile._pagesToDelete;
            if (arguments.length)
                pagesToDelete.push(pageInfo);
            else if (pagesToDelete.length)
                setTimeout(function () {
                    $(pagesToDelete).each(function () {
                        mobile.deletePage(this);
                    });
                    pagesToDelete.splice(0, pagesToDelete.length);
                }, 32);
        },
        modalDataView: function (id, delayed) {
            var that = this;
            if (delayed != false && that.busy())
                return;
            if (id)
                that.busy(true);
            if (delayed) {
                setTimeout(function () {
                    if (id != getActivePageId())
                        that.modalDataView(id, false);
                });
            }
            var pagesToDelete = [];
            if (!id) {
                $(that._modalStack).each(function () {
                    that.deletePage(this);
                    //mobile.garbageCollector(this);
                });
                that._modalStack = [];
            }
            else {
                var pageInfo = that.pageInfo(id),
                    page = that.page(id);
                if (_pendingPageText) {
                    pageInfo.text = _pendingPageText;
                    _pendingPageText = null;
                }
                if (!pageInfo.dataView._lookupInfo) {
                    //if (!page.is('app-form-page'))
                    //    page.addClass('app-form-page');
                    pageInfo.dataView._isModal = true;
                }
                if (that._modalDataViews.indexOf(id) == -1)
                    that._modalDataViews.push(id);

                // NOTE: do not refresh context before the page is displayed. It will create an illusion of delay.
                //if (!isModalPage())
                //    refreshContext(false, false);

                that.changePage(id);
            }
        },
        unloadPage: function (page, activePage) {
            var that = this,
                pageInfo = that.pageInfo(page),
                index;
            function addToModalStack() {
                if (that._modalStack.indexOf(pageInfo) == -1)
                    that._modalStack.push(pageInfo);
            }
            if (pageInfo) {
                index = that._modalDataViews.indexOf(pageInfo.id);
                if (index >= 0) {
                    var dataView = pageInfo.dataView,
                        masterView = _app.find(dataView._parentDataViewId),
                        activePageInfo = that.pageInfo(activePage),
                        activePageIndex = activePageInfo ? that._modalDataViews.indexOf(activePageInfo.id) : -1;
                    if (activePageInfo && (masterView == activePageInfo.dataView || activePageInfo.home) || activePage.attr('id') == 'Main' || activePageIndex >= 0 && index > activePageIndex)
                        addToModalStack();
                }
                //else if (pageInfo.dynamic)
                //    addToModalStack();
            }
        },
        sidebar: function () {
            return contextSidebar();
        },
        desktop: function () {
            return !isTouchPointer;
        },
        rowContext: function (uiElement, options) {
            showRowContext(uiElement, options);
        },
        animate: function () {
            return enablePanelAnimation();
        },
        clearHtmlSelection: function (delay) {
            clearHtmlSelection(delay);
        },
        lastTouch: function () {
            return _lastTouch;
        },
        //positionEmbeddedDataView: function (elem) {
        //    eleme = $(elem);
        //    if (!elem.is('.app-echo'))
        //        elem = elem.closest('.app-echo');
        //    if (elem.length && elem.is('.app-echo-embedded'))
        //        ensureEmbeddedEchoHeight(elem, true);
        //},
        syncEmbeddedViews: function (scrollable) {
            syncEmbeddedViews(scrollable);
        },
        animatedScroll: function (scrollable, scrollTop, callback) {
            animatedScroll(scrollable, scrollTop, callback);
        },
        scroll: function (scrollable, scrollTop) {
            scrollWrapper(scrollable, scrollTop);
        },
        configureFilter: function (options) {
            mobile.contextScope(options.scope);
            configureFilter(options);
            mobile.contextScope(null);
        },
        pointer: function () {
            return isTouchPointer ? 'touch' : 'mouse';
        },
        busy: function (value) {
            var that = this,
                result = that._busy == true,
                glassPane;
            if (arguments.length == 1) {
                //if (value == false && that._busy == true)
                //    debugger
                that._busy = value;
                glassPane = that._glassPane;
                if (!glassPane)
                    glassPane = that._glassPane = $('<div class="app-glass-pane"></div>');
                if (value) {
                    if (!glassPane.is('.app-glass-pane-active'))
                        glassPane.addClass('app-glass-pane-active').appendTo($body)
                }
                else if (glassPane.parent().length)
                    glassPane.detach().removeClass('app-glass-pane-reject app-glass-pane-active');
            }
            else
                return that._busy == true;
        },
        executeInContext: function (icon, text, path) {
            if (!mobile.busy()) {
                var context = [];
                mobile.navContext(context);
                $(context).each(function () {
                    var action = this;
                    if (!path && (icon && action.icon == icon || !icon && action.text == text) || path && path == action.path) {
                        executeContextAction(action);
                        return false;
                    }
                });
            }
        },
        navigate: function (options) {
            if (typeof options == 'string') {
                //setTimeout(function () {
                //    if (options.match(/^#/))
                //        options = options.substring(1);
                //    mobile.changePage(options);
                //}, 300);
                if (options.match(/^#/))
                    options = options.substring(1);
                mobile.changePage(options);
            }
            else if (options.id && $('#' + options.id).length) {
                //$(document).trigger('navigating.' + options.id.toLowerCase());
                //mobile.changePage(options.id);
                $('#' + options.id).trigger('navigating.app');
                mobile.changePage(options.id);
            }
            else if (options.href) {
                //mobile.modalDataView();
                loadInternalPage(options.href, options.transition);
            }
        },
        changePage: function (id, changeHash) {
            if (getActivePageId() != id)
                mobile.busy(true);
            var activePage = findActivePage(),
                page,
                activePageInfo = activePage && this.pageInfo(activePage.attr('id')),
                pageInfo = this.pageInfo(id),
                navigatingEvent = $.Event('navigating.app');
            if (pageInfo) {
                if (pageInfo.isPanel) {
                    if (!appBars.left.mini && $settings('ui.sidebar.mini') != false)
                        toggleSidebarState(true);
                    pageReady({ toPage: pageInfo.page, toPageInfo: pageInfo, prevPage: activePage });
                    return;
                }
                if (pageInfo.navigating)
                    pageInfo.navigating = false;
                else {
                    //$(document).trigger(navigatingEvent);
                    if (pageInfo.page) {
                        pageInfo.page/* $('#' + id)*/.trigger(navigatingEvent);
                        if (navigatingEvent.isDefaultPrevented()) {
                            pageInfo.initialized = false;
                            pageInfo.navigating = true;
                        }
                    }
                }
            }
            transitionStatus(true);
            if (this.pageInit(id)) {
                page = this.page(id).css('padding-top', activePage.css('padding-top'));
                var defaultTransition = settings.pageTransition,
                    targetPageInfo = this.pageInfo(id),
                    isHome = targetPageInfo.home,
                    transition = 'none',//isHome ? 'none' : (targetPageInfo.transition || defaultTransition),
                    navStack,
                    dataUrl, asbUrl,
                    navEntry,
                    navInfo = targetPageInfo.navigateInfo;
                if (navInfo) {
                    targetPageInfo.navigateInfo = null;
                    $mobile.navigate(navInfo.href, { transition: navInfo.transition });
                    navStack = navigationHistory.stack;
                    navStack[navStack.length - 1].hash = '#' + targetPageInfo.id;
                    return;
                }
                dataUrl = targetPageInfo.replaceUrl;
                if (activePageInfo && activePageInfo.deleted) {
                    _window.location.replace('#' + id);
                    //$body.one('pagecontainershow', function () {
                    //    var activeDataView = mobile.dataView();
                    //    activeDataView._doneCallback = activePageInfo.dataView._doneCallback;
                    //    activeDataView._cancelCallback = activePageInfo.dataView._cancelCallback;
                    //    mobile.deletePage(activePageInfo);
                    //});
                    whenPageShown(function () {
                        var activeDataView = mobile.dataView();
                        activeDataView._doneCallback = activePageInfo.dataView._doneCallback;
                        activeDataView._cancelCallback = activePageInfo.dataView._cancelCallback;
                        mobile.deletePage(activePageInfo);
                        arrangeModalPages(findActivePage());
                    });
                }
                $mobile.changePage('#' + id, {
                    changeHash: !(changeHash == false) && !isHome, transition: transition
                });
                navStack = navigationHistory.stack;
                navEntry = navStack[navStack.length - 1];
                if (dataUrl) {
                    targetPageInfo.replaceUrl = null;
                    //dataUrl = $mobile.path.convertUrlToDataUrl(absUrl);
                    $('#' + id).attr('data-url', decodeURIComponent(dataUrl));
                    if (navEntry.hash != '#advanced-search')
                        $mobile.navigate.navigator.squash(dataUrl);
                    navEntry.url = decodeURIComponent($mobile.path.makeUrlAbsolute(dataUrl, $mobile.path.documentBase));
                }
                if (isHome) {
                    navEntry.transition = defaultTransition;
                    //navHistory.stack[0].url = $mobile.path.documentBase.hrefNoSearch;
                    $mobile.path.documentBase.hrefNoHash = $mobile.path.documentBase.hrefNoSearch;
                    $mobile.path.documentBase.href = $mobile.path.documentBase.hrefNoSearch + $mobile.path.documentBase.hash;
                }
            }
        },
        title: function () {
            return document.title;
        },
        navContext: function (context, childrenOnly) {
            var that = this,
                activePageInfo = that.contextPageInfo(),
                rootPageInfo = activePageInfo,
                activeDataView = activePageInfo && activePageInfo.dataView,
                rootDataView = activeDataView,
                rootExtension = rootDataView && rootDataView.extension(),
                activeUseCase = activeDataView && activeDataView.get_useCase(),
                activeExtension = activeDataView && activeDataView.extension(),
                firstNavOption = true,
                backInHistory = -1;
            if (identityConfirmationRequested)
                // add Exit button
                context.push({
                    text: resourcesDevice.Exit,
                    icon: 'material-icon-exit-to-app',
                    toolbar: true,
                    system: true,
                    callback: exitToHost
                }, {});
            // enumerate data view context options
            if (activeExtension) {
                if (!childrenOnly)
                    if (activeExtension)
                        activeExtension.context(context);
                if (activePageInfo.dataView._parentDataViewId) {
                    activePageInfo = that.pageInfo(activePageInfo.dataView._parentDataViewId);
                    activeDataView = activePageInfo.dataView;
                    backInHistory--;
                }
            }
            if (rootExtension && !rootExtension.inserting() && !rootExtension.lookupInfo())
                $(that._pages).each(function (index) {
                    var pageInfo = this,
                        pageDataView = pageInfo.dataView,
                        pageExtension = pageDataView && pageDataView.extension(),
                        allowNavigate,
                        master = false;
                    if (pageDataView) {
                        allowNavigate = !pageDataView._hidden && !pageDataView._parentDataViewId;
                        if (allowNavigate) {
                            if (activeDataView && activeDataView._filterSource) {
                                allowNavigate = _app.find(activeDataView._filterSource) == pageDataView;
                                master = allowNavigate;
                                if (!allowNavigate)
                                    allowNavigate = _app.find(pageDataView._filterSource) == activeDataView;
                            }
                            else if (pageDataView._filterSource)
                                allowNavigate = _app.find(pageDataView._filterSource) == activeDataView;
                            else
                                allowNavigate = false;
                        }
                    }
                    if (allowNavigate && !activeUseCase && !pageInfo.external) {
                        if (firstNavOption) {
                            if (!childrenOnly)
                                context.push({});
                            firstNavOption = false;
                        }
                        //if (master && !that.contextScope())
                        //    addSelectAction(pageDataView, context, pageDataView.extension().commandRow());

                        if (!master && (!that.contextScope() || !master) && (pageDataView._autoHide != 0 || activeDataView.extension().commandRow()/* get_selectedRow()*/))
                            context.push(
                                {
                                    text: master ? resourcesMobile.Back : pageInfo.text/*, desc: master ? this.text : null*/, icon: master ? 'back' : null, /*dataRel: master ? 'back' : null,*/
                                    count: master ? null : (pageExtension && (!pageExtension._reset || getPageInfo(pageDataView).echoInitialized) ? pageDataView._totalRowCount : null),
                                    callback: master ?
                                        function () {
                                            _history.go(backInHistory);
                                        } :
                                        function () {
                                            that.changePage(pageInfo.id);
                                        },
                                    system: true,
                                    navigateTo: master ? 'master' : 'detail',
                                    pageTransition: !master,
                                    sidebarCollapse: master ? null : 'detail',
                                    context: pageInfo && pageInfo.id,
                                    activator: pageInfo && pageInfo.activator

                                });
                    }
                });
            if (!context.isSideBar && !context.isTaskAssistant) {
                if (context.length)
                    context.push({});
                // if (settings.siteContent && false) {
                //    if (!editItem) {
                //        editItem = { text: 'Edit', system: true, callback: editPage };
                //        editItem.isStatic = true;
                //        editItem.icon = 'glyphicon-edit';
                //        editItem.desc = 'Page';
                //        pagePropItem = { text: 'Properties', system: true, callback: viewPageProperties };
                //        pagePropItem.icon = 'glyphicon-wrench'
                //    }
                //    if (!editItem.disabled) {
                //        //if (context.length && !context[context.length - 1].text)
                //        //    context[context.length - 1].text = 'Page Actions';
                //        //else
                //        //    context.push({ text: 'Page Actions' });
                //        context.push(editItem);
                //        context.push(pagePropItem);
                //        context.push({});
                //    }
                //}
                //context.push(taskAssistantItem);
                if ($settingsEnabled('help.enabled') && !_window.location.pathname.match(/\/help(\/|$)/) && membership) {
                    if (!helpItem)
                        helpItem = {
                            text: resourcesMembershipBar.HelpLink, system: true, toolbar: false, icon: 'material-icon-info', callback: function () {
                                membership.help();
                            }
                        };
                    context.push(helpItem);
                }
            }
            if (shortcuts.list.length) {
                shortcuts.list.splice(0);
                shortcuts.keyCodes.splice(0);
            }
            $(context).each(function () {
                var shortcut = this.shortcut;
                if (shortcut) {
                    var shortcutObject = shortcuts.cache[shortcut];//,
                    //key, keyList, i;
                    if (!shortcutObject) {
                        shortcutObject = createShortcutObject(shortcut);
                        //shortcutObject = { shortcut: shortcut, ctrlKey: false, altKey: false, shiftKey: false };
                        //keyList = shortcut.split(/\s*\+\s*/g);
                        //for (i = 0; i < keyList.length; i++) {
                        //    key = keyList[i].toLowerCase();
                        //    if (key.length > 1) {
                        //        switch (key) {
                        //            case 'ctrl':
                        //                shortcutObject.ctrlKey = true;
                        //                break;
                        //            case 'alt':
                        //                shortcutObject.altKey = true;
                        //                break;
                        //            case 'shift':
                        //                shortcutObject.shiftKey = true;
                        //                break;
                        //            default:
                        //                shortcutObject.which = _app.keyCode[key]
                        //                if (!shortcutObject.which)
                        //                    shortcutObject.invalid = true;
                        //                break;
                        //        }
                        //    }
                        //    else
                        //        shortcutObject.which = key.toUpperCase().charCodeAt(0);
                        //}
                        shortcuts.cache[shortcut] = shortcutObject;
                    }
                    if (shortcutObject.which && !shortcut.invalid) {
                        shortcuts.keyCodes.push(shortcutObject.which);
                        shortcuts.list.push(shortcutObject);
                    }
                }
            });
            if (isLocalHost() && !context.isSideBar) {
                // add Design button
                //context.push({
                //    text: 'Customize',
                //    system: true,
                //    icon: 'material-icon-build',
                //    toolbar: false,
                //    callback: _app.loadDesigner
                //}, {});
                context.push({
                    text: resourcesDevelop.Tools,
                    system: true,
                    icon: false,
                    toolbar: false,
                    transition: true,
                    callback: developerTools
                });
            }
        },
        refreshAppButtons: function (context, options) {
            var that = this,
                title = that._title,
                titleRight = Math.max(/*_screenWidth*/parseCss(mobile._toolbar, 'width') / 2, title.offset().left + (title.is('.app-hidden') ? 0 : title.outerWidth() - 1)),
                logo = that._logo,
                btn, icon, toolbar,
                contextButton = mobile._contextButton,
                contextButtonIsVisible = true,
                visibleButtons = [], numberOfVisibleButtons,
                icons = [], iconLabels = { search: labelSearch, user: userName, apps: resourcesMobile.Apps }, iconPath = {},
                promoIcon, offlineIcon,
                usedIcons = [], actionBarIcons = [],
                hasCall, hasRefresh, hasEye, hasEmail, hasSearch,
                dataView = options && options.dataView || mobile.dataView(),
                firstVisibleButton = 0, i,
                buttonBars = options && options.buttonBars || findActivePage('.app-bar-buttons'),
                layout = options && options.layout || findActivePage('[data-layout]'),
                toolbar = dataView && mobile.content(dataView._id).prevAll('.app-bar-actions'),
                toolbarTitle, x1, x2, doesNotHaveActionBar,
                iconIndex;
            if (options && options.promo) {
                /*if (advancedSearchPageIsActive())
                    promoteSearch();
                else */if (dataView) {
                    var appBtn1 = getPageInfo(dataView).page.find('.app-page-modal-title .app-btn1').hide(); //$('#' + dataView._id + ' .app-page-modal-title .app-btn1').hide();
                    doesNotHaveActionBar = !dataView || (!dataView.get_showActionBar() || dataView.get_isForm());
                    $(context).each(function () {
                        var option = this;
                        icon = option.icon;
                        //var showOnToolbar = option.toolbar != false && icon != 'dots' && icon != 'back'; 
                        var showOnToolbar = option.toolbar != false && icon && !icon.match(/more|back|undo/);
                        if (icon && ((doesNotHaveActionBar || option.uiScope == 'ActionBar' && (icon == 'material-icon-add' || icon == 'material-icon-edit')) || option.system && icon != 'material-icon-info-outline') /*&& !iconIsGlyph(icon)*/) {
                            if (icon == 'search') {
                                appBtn1.show();
                            }
                            else if ((icon.match(/^(refresh|phone|email|eye)$/) || showOnToolbar) && !dataView.get_isForm() && promoIcon != 'material-icon-add') {
                                mobile.promo(icon, option.text);
                                promoIcon = icon;
                            }
                        }
                    });
                }
            }
            if (!options || options.toolbar) {
                contextButton.attr('title', labelMore).removeClass('ui-icon-carat-u').addClass('ui-icon-dots');
                if (context.length)
                    contextButton.show();
                else {
                    //contextButton.hide();
                    //contextButtonIsVisible = false;
                }
                resetToolbarButtons();
                var btnWidth;
                that._toolbarButtons.each(function () {
                    btn = $(this).show();
                    if (!btnWidth)
                        btnWidth = btn.show()[0].offsetWidth;
                    if (btn.offset().left > titleRight - (isVirtualScreen() ? _screen.left : 0))
                        visibleButtons.push(btn);
                    btn.hide();
                });
                numberOfVisibleButtons = visibleButtons.length;
                if (numberOfVisibleButtons > 0) {
                    doesNotHaveActionBar = !dataView || (!dataView.get_showActionBar() || dataView.get_isForm());
                    $(context).each(function () {
                        var option = this;
                        icon = option.icon;
                        //var showOnToolbar = option.toolbar != false && icon != 'dots' && icon != 'back';
                        var showOnToolbar = option.toolbar != false && icon && !icon.match(/more|back|undo/);
                        if (icon && ((doesNotHaveActionBar || option.uiScope == 'ActionBar' && (icon == 'material-icon-add' || icon == 'material-icon-edit')) || option.system && icon != 'material-icon-info-outline')/* && !iconIsGlyph(icon)*/) {
                            if (icon == 'search')
                                hasSearch = true;
                            else if (icon == 'refresh')
                                hasRefresh = true;
                            else if (icon == 'phone')
                                hasCall = true;
                            else if (icon == 'email')
                                hasEmail = true;
                            else if (icon == 'eye' && showOnToolbar)
                                hasEye = true;
                            else if (showOnToolbar && icons.indexOf(icon) == -1)
                                icons.push(icon);
                            else
                                icon = null;
                            if (icon)
                                iconLabels[icon] = actionToTooltip(option) + (option.desc && option.descInTooltip != false ? '\n' + option.desc : '');
                            if (option.path)
                                iconPath[icon] = option.path;
                            if (option.uiScope == 'ActionBar')
                                actionBarIcons.push(icon);
                        }
                    });
                    if (hasEmail)
                        icons.push('email');
                    if (hasCall)
                        icons.push('phone');
                    if (hasEye)
                        icons.push('eye');
                    if (hasRefresh)
                        icons.push('refresh');
                    // figure the promo icon
                    else if (icons.length && (!dataView || !dataView.editing() && !(dataView.get_isForm() && allowButtonBar())) && $settings('ui.actions.promote')) {
                        if (dataView) {
                            var dataViewPreferredIcon = dataView.get_isForm() ? 'material-icon-edit' : 'material-icon-add';
                            iconIndex = icons.indexOf(dataViewPreferredIcon);
                            if (iconIndex > 0) {
                                icons.splice(iconIndex, 1);
                                icons.unshift(dataViewPreferredIcon);
                            }
                        }
                        //promoIcon = icons[0];
                        $(icons).each(function (index) {
                            var icon = this;
                            if (!icon.match(noPromoRegex)) {
                                promoIcon = icon.toString();
                                return false;
                            }
                        });
                        if ((!dataView || /*!dataView._lookupInfo &&*/ !getPageInfo(dataView).loading && !dataView.get_searchOnStart() && !dataView._requiresContextRefresh) && mobile.promo(promoIcon, iconLabels[promoIcon])) {
                            mobile.promo().data('icon-list',
                                {
                                    icons: icons.slice().reverse(),
                                    labels: iconLabels
                                });
                            usedIcons.push(promoIcon);
                            icons.splice(icons.indexOf(promoIcon), 1);
                        }
                    }
                    else
                        mobile.promo(false);
                    // figure the buttons that will be on the toolbar
                    if (hasSearch)
                        if (icons.length < numberOfVisibleButtons)
                            icons.push('search');
                        else
                            icons[numberOfVisibleButtons - 1] = 'search';
                    if (!isHosted) {
                        if (_screen.width >= toPhysicalWidth('md')) {
                            if (_app.odp.offline()) {
                                icons.push(offlineIcon = _app.odp.offline('icon'));
                                iconLabels[offlineIcon] = _app.odp.offline('tooltip');
                            }
                            if ($settings('ui.menu.apps.location') == 'toolbar')
                                icons.push('apps');
                            if (loggedIn)
                                icons.push('user');
                        }
                    }
                    while (actionBarIcons.length > 0) {
                        icon = actionBarIcons[0];
                        actionBarIcons.splice(0, 1);
                        if (icons.indexOf(icon) != -1)
                            icons.splice(icons.indexOf(icon), 1);
                    }
                    if (icons.length < numberOfVisibleButtons)
                        firstVisibleButton = numberOfVisibleButtons - icons.length;
                    for (i = 0; i < firstVisibleButton; i++)
                        $(visibleButtons[i]).hide();
                    while (i < numberOfVisibleButtons) {
                        btn = $(visibleButtons[i]);
                        icon = icons[i - firstVisibleButton];
                        var lastIcon = btn.data('icon');
                        btn.attr('title', iconLabels[icon]);
                        btn.data('action-path', iconPath[icon]);
                        usedIcons.push(icon);
                        //if (icon == 'ok')
                        //    icon = 'check';
                        //btn.removeClass('ui-icon-' + lastIcon).addClass('ui-icon-' + icon).data('icon', icon).show();
                        btn.empty().removeClass('app-avatar');
                        if (icon == 'user') {
                            var userLetters = _window._userLetters,
                                userName = _app.userName();
                            if (!userLetters)
                                _window._userLetters = userLetters = userNameToInitials(userName);
                            avatar(userName, $('<i class="app-icon-avatar"/>').text(userLetters).appendTo(btn.addClass('app-avatar').attr('title', userName)));
                        }
                        else
                            materialIcon(toMaterialIcon(icon), btn);
                        btn.data('icon', icon).show();
                        i++;
                    }
                    mobile._usedToolbarIcons = usedIcons.slice(0);
                }
            }
            if (buttonBars.length) {
                var firstBar,
                    buttons;
                buttonBars.each(function (barIndex) {
                    var bar = $(this),
                        button, moreButton,
                        buttonList, cancelButtonIndex,
                        barWidth, totalWidthOfButtons, additionalWidth;
                    if (bar.is(':visible')) {
                        bar.children().remove();
                        if (firstBar)
                            bar.append(firstBar.html()).toggleClass('app-bar-buttons-md', firstBar.is('.app-bar-buttons-md'));
                        else {
                            firstBar = bar;
                            var isWizard = dataView && dataView._isWizard;
                            if (!buttons) {
                                buttons = [];
                                $(context).each(function () {
                                    var option = this,
                                        icon = option.icon;
                                    if (!option.system && icon != 'dots' && option.text && option.uiScope == 'Form') {
                                        buttons.push(option);
                                        if (option.command == 'Cancel')
                                            cancelButtonIndex = buttons.length - 1;
                                    }
                                });
                            }
                            // reverse buttons
                            if (isWizard) {
                                buttons = buttons.reverse();
                                if (cancelButtonIndex != null)
                                    cancelButtonIndex = buttons.length - 1 - cancelButtonIndex;
                            }
                            barWidth = bar.width();
                            if (isWizard) {
                                buttons.splice(0, 0,
                                    { text: resourcesMobile.Prev, path: 'wizard-prev'/*, buttonIcon: 'material-icon-chevron-left'*/ },
                                    { text: resourcesMobile.Next, path: 'wizard-next'/*, buttonIcon: 'material-icon-chevron-right'*/ });
                                if (cancelButtonIndex != null) {
                                    cancelButtonIndex += 2;
                                    cancelButton = buttons[cancelButtonIndex];
                                    buttons.splice(cancelButtonIndex, 1);
                                    if (barWidth > 375)
                                        buttons.splice(0, 0, cancelButton);
                                }
                            }
                            $(buttons).each(function () {
                                var option = this,
                                    path = option.path,
                                    //icon = option.buttonIcon,
                                    button = $('<a class="ui-btn ui-mini"/>').text(option.text).attr('data-action-path', option.path).appendTo(bar);
                                if (option.shortcut)
                                    button.attr('title', actionToTooltip(option));
                                if (path && path.match(/^wizard/))
                                    button.addClass('app-btn-has-icon')
                                //if (icon)
                                //    materialIcon(icon, button);
                            });
                            wizard('status', { layout: layout });
                            button = bar.toggleClass('app-bar-buttons-md', barWidth >= toPhysicalWidth('md')).find('.ui-btn').last();
                            if (button.length) {
                                var right = bar.offset().left + barWidth,
                                    right2 = button.offset().left + button.outerWidth() - parseCss(button, 'margin-right') - 1;

                                if ((button.position().left + button.outerWidth() - 1 > barWidth + 2)) {
                                    bar.find('.ui-btn').css('min-width', '8em');
                                    if (button.length && (button.position().left + button.outerWidth() - 1 > barWidth + 2)) {
                                        bar.find('.ui-btn').css('min-width', '4em');
                                        if (button.length && (button.position().left + button.outerWidth() - 1 > barWidth + 2) && isWizard)
                                            bar.find('.app-btn-has-icon').addClass('app-btn-icon-notext');
                                        if (button.length && (button.position().left + button.outerWidth() - 1 > barWidth + 2)) {
                                            moreButton = $('<a data-action-path="more" class="ui-btn ui-corner-all ui-mini app-btn-more app-btn-icon-notext"/>').html('&nbsp;').attr('title', labelMore).appendTo(bar);
                                            while (button.length && moreButton.position().left + moreButton.outerWidth() - 1 > barWidth + 2)
                                                button = button.hide().prev();
                                        }
                                        //if (!$body.is('.app-buttons-text-only')) {
                                        //    totalWidthOfButtons = 0;
                                        //    buttonList = bar.find('.ui-btn:visible').each(function () {
                                        //        totalWidthOfButtons += $(this).outerWidth(true);
                                        //    });
                                        //    additionalWidth = Math.ceil((barWidth - totalWidthOfButtons) / (buttonList.length - (moreButton ? 1 : 0)));
                                        //    bar.find('.ui-btn:visible:not(.app-btn-more)').each(function () {
                                        //        var btn = $(this);
                                        //        btn.width(btn.width() + additionalWidth);
                                        //    });
                                        //}
                                    }
                                }
                            }
                            if (dataView) {
                                var forceReverse = $settings('ui.actions.reverse') == true;
                                if ((!isWin || forceReverse) && !(isWizard || dataView._controller == 'MyProfile' && dataView._viewId.match(/^(pas|ide)/)) && ($settingsEnabled('ui.actions.autoReverse') || forceReverse))
                                    bar.append(bar.find('.ui-btn').get().reverse());
                            }
                        }
                    }
                });
            }
            if (layout.length) {
                var layoutDataViews = {};
                layout.find('[data-control="action"]').each(function () {
                    var actionControl = $(this),
                        inputContainer = layout.attr('data-input-container'),
                        dataView, action, actionContainer;
                    dataView = layoutDataViews[inputContainer];
                    if (!dataView) {
                        dataView = _app.find(inputContainer);
                        layoutDataViews[inputContainer] = dataView;
                    }
                    if (dataView) {
                        action = dataView.findAction(actionControl.attr('data-action'));
                        //if (action)
                        //    actionControl.toggleClass('app-disabled', !dataView._isActionAvailable(action));
                        if (!action) {
                            actionControl.css('visibility', 'hidden');
                            actionContainer = actionControl.closest('[data-container="row"]');
                            if (actionContainer.length && !actionContainer.find('[data-control]').filter(function () { return $(this).css('visibility') != 'hidden' }).length)
                                actionContainer.remove();
                        }
                    }
                });
            }
            while (usedIcons.length) {
                i = 0;
                if (usedIcons[0] == 'user' || usedIcons[0] == 'apps' || usedIcons[0] == offlineIcon)
                    usedIcons.splice(0, 1);
                else
                    while (i < context.length)
                        if (usedIcons.length && context[i].icon == usedIcons[0]) {
                            context.splice(i, 1);
                            usedIcons.splice(0, 1);
                        }
                        else
                            i++;
            }
            if ((!options || options.toolbar != false || options.actionBar == true) && toolbar && toolbar.length) {
                toolbarTitle = toolbar.find('h3').next();
                x1 = Math.floor(toolbarTitle.offset().left) + toolbarTitle.outerWidth(true);
                x2 = Math.floor(toolbar.offset().left) + /*toolbar.outerWidth()*/calcWidth(toolbar) - 8;
                toolbar.data('selector').toggleClass('app-hidden', !dataView.get_showViewSelector() || appBars.left.visible && $settings('ui.sidebar.views.collapsed') == true);
                refreshToolbarButtons(dataView, toolbar.data('controls'), x1, x2, true, promoIcon);
            }
        },
        endModalState: function (dataView, contextDataView, callback) {
            if (isInTransition)
                return;
            isInTransition = true;
            var page = mobile.page(contextDataView._id);
            goBack();
            //var dataViewPage = this.pageInfo(dataView),
            //    contextDataViewPage = this.pageInfo(contextDataView._id);
            //dataViewPage.refreshCallback = function () {
            //    _history.go(-1);
            //}
            //pageChangeCallback = function () {
            //    $mobile.navigate.history.clearForward();
            //    mobile.modalDataView();
            //    var parentDataView = dataView.get_parentDataView(),
            //        parentPageInfo;
            //    if (parentDataView) {
            //        parentPageInfo = mobile.pageInfo(parentDataView._id);
            //        parentPageInfo.echoChanged = true;
            //        if (!parentDataView.editing())
            //            parentPageInfo.initCallback = function () {
            //                parentDataView.sync();
            //            }
            //    }
            //    if (callback)
            //        if (dataViewPage.echoInitialized != null && dataViewPage.id != getActivePageId())
            //            dataViewPage.echoRefreshCallback = callback;
            //        else
            //            callback();
            //}
            //busyIndicator(true);
            //dataViewPage.requiresReturnCallback = true;
            //dataView.sync();
        },
        renderContext: function (listview, context, filter) {
            var lastItemIsSeparator = false,
                collapse,
                isSideBar = context.isSideBar,
                isMini = isSideBar && appBars.left.mini,
                itemsToCollapse, i,
                collapsedMap = {};
            $(context).each(function () {
                if (filter && !filter(this))
                    return;
                var option = this,
                    text = option.text,
                    shortcut = option.shortcut,
                    count = option.count || shortcut,
                    originalIcon = isMini && option.miniIcon || option.icon,
                    isMaterialIcon = iconIsMaterial(originalIcon),
                    icon = originalIcon == 'check' || isMaterialIcon ? 'false' : (originalIcon == 'ok' ? 'check' : originalIcon),
                    href = option.href,
                    itemClassName = option.itemClassName,
                    item, link,
                    sidebarCollapse = option.sidebarCollapse,
                    isSeparator = false,
                    separator;
                if (isSideBar && appBars.left.mini && (!originalIcon && (text && !option.transition || option.src)))
                    return;
                item = $('<li/>').attr({
                    'data-icon': !icon && option.pageTransition && !isMaterialIcon ? 'false' : icon,
                    'data-theme': option.theme || 'a'
                }).appendTo(listview);

                if (option.callback || option.dataRel || href) {
                    link = $('<a/>').appendTo(item)/*.text(text)*/.data('context-action', option);
                    if (isMini) {
                        link.html('&nbsp;').attr('title', text);
                        if (text && option.transition)
                            $('<span/>').text(text.substring(0, 1)).appendTo(link);
                    }
                    else
                        link.text(text);
                    if (href)
                        link.attr({ rel: 'external', href: href });
                    if (count && (!isSideBar && !isTouchPointer || !shortcut))
                        $('<span class="ui-li-count"/>').appendTo(link.addClass('ui-li-has-count')).html(count);
                    if (option.dataRel)
                        link.attr('data-rel', option.dataRel);
                    if (option.isStatic)
                        link.addClass('app-summary-btn');
                }
                else if (option.isStatic)
                    item.html(text); //.find('a').attr('rel', 'external')
                else if (option.src)
                    $('<img class="ui-li-thumb"/>').appendTo(item.addClass('ui-li-has-thumb')).attr({ src: option.src });
                else {
                    if (lastItemIsSeparator)
                        item.remove();
                    else {
                        separator = item.attr('data-role', 'list-divider').html(text);
                        if (!option.isStatic && text && option.instruction != false)
                            separator.addClass('app-list-instruction');
                    }
                    lastItemIsSeparator = true;
                    isSeparator = true;
                }
                if (!isSeparator)
                    lastItemIsSeparator = false;
                if (option.desc && !isMini) {
                    var displayBefore = option.display == 'before',
                        para;
                    if (displayBefore)
                        $('<p class="app-item-desc app-item-desc-before"/>').insertBefore((link ? link : item).contents()).text(option.desc);
                    para = $('<p class="app-item-desc"/>').appendTo(link ? link : item).text(option.desc);
                    if (displayBefore)
                        para.addClass('app-item-desc-after');

                }
                if (option.wrap)
                    item.addClass(option.callback ? 'app-wrap-text' : 'app-wrap');
                if (option.disabled)
                    item.addClass('ui-disabled');
                if (itemClassName)
                    item.addClass(itemClassName);
                if (option.linkClassName)
                    link.addClass(option.linkClassName);
                if (option.keepOpen) {
                    link.addClass('app-keep-open');
                    if (!option.animate && !option.count)
                        link.addClass('app-btn-icon-transparent');
                }
                if (option.animate)
                    link.addClass('app-animated app-animation-spin');

                if (option.selected || originalIcon == 'check') {
                    //$(iconCheck).appendTo(link);
                    if (isSideBar)
                        link.addClass('app-option-selected');
                    else if (!option.depth)
                        materialIcon(option.radio && false ? 'material-icon-radio-button-checked' : 'material-icon-check', link);
                    if (option.depth) {
                        link.addClass('app-item-selected');
                        if (isMaterialIcon)
                            materialIcon(originalIcon, link);
                    }
                }
                else if (isMaterialIcon)
                    materialIcon(originalIcon, link);

                if (option.state)
                    link.addClass('app-selected');

                if (option.tooltip) {
                    link.attr('title', option.tooltip);
                    if (!itemClassName || !itemClassName.indexOf(/tile$/))
                        link.addClass('app-btn-tooltip');
                }

                if (sidebarCollapse && isSideBar) {
                    if (!collapsedMap[sidebarCollapse])
                        collapsedMap[sidebarCollapse] = [];
                    collapsedMap[sidebarCollapse].push(item);
                }
                var user = option.user;
                if (user)
                    avatar(user, $('<i class="app-icon-avatar"/>').appendTo(link.addClass('app-avatar')).text(userNameToInitials(user)));
                if (option.depth) {
                    item.addClass('app-has-depth');
                    link.addClass('app-depth' + option.depth);
                }
                if (option.transition && !option.reverse || option.pageTransition)
                    materialIcon(isMini ? 'material-icon-navigate-next' : 'material-icon-chevron-right', link.addClass('app-group-actions'));
                if (option.popOut && !isMini)
                    materialIcon('material-icon-chevron-right', link);
                if (option.color)
                    $('<span class="app-color-block"/>').appendTo(link).css('background-color', option.color);
            });
            for (collapse in collapsedMap) {
                itemsToCollapse = collapsedMap[collapse];
                if (itemsToCollapse.length > 4) {
                    for (i = 3; i < itemsToCollapse.length; i++)
                        itemsToCollapse[i].hide();
                    $('<a/>').appendTo($('<li data-icon="false" data-theme="a"/>').insertBefore(itemsToCollapse[3])).text('+' + (itemsToCollapse.length - 3) + ' ' + labelMore.toLowerCase()).data('context-action', {
                        callback: expandCollapsedItems
                    });
                }
            }
        },
        tabs: function (method, options) {

            if (!this._initialized) {
                this._initialized = true;
                $(document).on('vclick', '.app-tabs .ui-btn', function (event) {
                    var link = $(event.target).closest('a'),
                        placeholder = link.closest('.app-tabs'),
                        options = placeholder.data('options'),
                        list = placeholder.find('ul'),
                        activeLink = list.find('.app-tab-active'),
                        scrollable = findScrollable(placeholder),
                        stub = scrollable.find('.app-stub,.app-stub-main'),
                        //forceSelectedTab = arguments.length != 2 ? null : arguments[1].selectedTab,
                        forceSelectedTab = options.forceSelectedTab,
                        tabs = options.tabs,
                        text = options.selectedTab || options.forceSelectedTab || link.attr('data-text'),
                        activePage = findActivePage(),
                        activeTab,
                        hiddenHeight = 0,
                        skip,
                        context,
                        headingIsVisible;

                    if (!_input.cancel()) return;

                    function makeMoreButtonActive() {
                        if (!list.find('.app-tab-active').is(':visible'))
                            list.find('.app-tab-more').addClass('ui-btn-active');
                    }

                    if (forceSelectedTab)
                        options.selectedTab = forceSelectedTab;
                    if (link.length)
                        if (!options.selectedTab && link.is('.app-tab-more')) {
                            var buttons = list.find('.ui-btn').removeClass('ui-btn-active');
                            callWithFeedback(link, function () {
                                link.addClass('ui-btn-active');
                                context = [];
                                $(options.tabs).each(function (index) {
                                    var t = this;
                                    if (!$(buttons[index]).data('hidden'))
                                        context.push({
                                            text: t.text, icon: t.active ? 'check' : false, wrap: true, context: { text: t.text, index: index }, linkClassName: 'app-btn-icon-transparent', callback: function (selection) {
                                                link.removeClass('ui-btn-active');
                                                options.selectedTab = selection.text;
                                                $(list.find('.ui-btn')[selection.index]).trigger('vclick');
                                            }
                                        });
                                });
                                showListPopup({
                                    items: context, anchor: link,
                                    afterclose: function () {
                                        setTimeout(function () {
                                            link.removeClass('ui-btn-active');
                                            list.find('.app-tab-active').addClass('ui-btn-active');
                                            makeMoreButtonActive();
                                        }, 50);

                                    }
                                });
                            });
                        }
                        else {
                            list.find('.ui-btn').removeClass('app-tab-active ui-btn-active');
                            link.addClass('app-tab-active ui-btn-active');
                            $(tabs).each(function () {
                                var t = this;
                                if (t.active) {
                                    if (text == t.text)
                                        skip = true;
                                    $(t.content).each(function () {
                                        hiddenHeight += Math.ceil($(this).outerHeight(true));
                                    });
                                }
                                t.active = t.text == text;
                                if (t.active)
                                    activeTab = t;
                            });

                            if (skip) {
                                options.selectedTab = null;
                                makeMoreButtonActive();
                                return;
                            }

                            if (options.scope == 'page')
                                pageVariable(options.id, text);
                            else if (options.scope == 'user')
                                userVariable(options.id, text);
                            else
                                persistedTab(options.scope, text);
                            if (hiddenHeight && stub.length && stub.offset().top + stub.outerHeight() - hiddenHeight < scrollable.offset().top + scrollable.height())
                                stub.height(hiddenHeight + stub.outerHeight());
                            saveScrolling(activePage);
                            //update(placeholder);


                            if (options.selectedTab) {
                                options.selectedTab = null;
                                fit(placeholder);
                            }

                            function doCallback() {
                                update(placeholder);
                                makeMoreButtonActive();
                                if (activeTab.callback)
                                    activeTab.callback();
                                if (options.change) {
                                    touchScrolling = false;
                                    options.change(activeTab);
                                    fetchEchos();
                                    if (options.restoreScrolling != false)
                                        restoreScrolling(activePage);
                                }
                                if (options.stickyHeader)
                                    stickyHeader();
                                trimContentStub(scrollable, stub);
                            }
                            //if (false && activeTab.content)
                            //    doCallback();
                            //else
                            //    setTimeout(function () {
                            //        doCallback();
                            //    });
                            setTimeout(function () {
                                doCallback();
                            });
                        }
                    return false;
                });
            }

            function persistedTab(scope, value) {
                if (!scope || scope == 'page' || scope == 'user')
                    return null;

                var tabs = sessionVariable(options.id) || [],
                    tabInfo, tabInfoIndex;
                scope = scope.toString();

                $(tabs).each(function (index) {
                    var ti = this;
                    if (ti.oid == scope) {
                        tabInfo = ti;
                        tabInfoIndex = index;
                        return false;
                    }
                });

                if (arguments.length == 1)
                    return tabInfo ? tabInfo.tab : null;
                else {
                    if (tabInfo)
                        tabs.splice(tabInfoIndex, 1);
                    else
                        tabInfo = { oid: scope };
                    tabInfo.tab = value;
                    tabs.push(tabInfo);
                    if (tabs.length > 10)
                        tabs.splice(0, 1);
                    sessionVariable(options.id, tabs);
                }
            }

            function create() {
                var tabs = options.tabs,
                    scope = options.scope,
                    firstContentItem = options.placeholder || $((tabs[0].content || [])[0]),
                    placeholder = options.container || $('<div class="app-tabs ui-header ui-bar-inherit"></div>').insertBefore(firstContentItem).addClass(options.className),
                    list = $('<ul/>').appendTo(placeholder),
                    activeTab = tabs[0].text;//,
                //selectedTab;



                $(tabs).each(function () {
                    var t = this;
                    if (t.active)
                        activeTab = t.text;
                    $(t.content).each(function () {
                        $(this).addClass('app-tab-content');
                    });
                });
                if (!options.id) {
                    options.id = firstContentItem.attr('id');
                    if (options.id)
                        options.id += '_tabs';
                }
                if (options.id) {
                    placeholder.attr('id', options.id);
                    activeTab = persistedTab(scope) || scope == 'page' && pageVariable(options.id) || scope == 'user' && userVariable(options.id) || activeTab;
                }

                if (!$(tabs).filter(function () { return this.text == activeTab; }).length)
                    activeTab = tabs[0].text;
                $(tabs).each(function (index) {
                    var t = this,
                        link = $('<a class="ui-btn"/>').appendTo($('<li/>').appendTo(list)).text(t.text).attr('data-text', t.text),
                        content = t.content,
                        hasVisibleContent;
                    t.active = t.text == activeTab;
                    if (t.active) {
                        // ensure that the contents of the tab are visible
                        if (index > 0) {
                            if (content && content.length && $(content[0]).is('[data-container="tab"]'))
                                content = content.children();
                            $(content).each(function () {
                                var style = this.style;
                                if (style && style.display != 'none') {
                                    hasVisibleContent = true;
                                    return false;
                                }
                            });
                        }
                        if (!hasVisibleContent || index == 0)
                            link.addClass('ui-btn-active app-tab-active');
                        else {
                            activeTab = null;
                            t.active = false;
                        }
                    }
                });
                if (!activeTab) {
                    // force the first tab to be active
                    tabs[0].active = true;
                    list.find('.ui-btn').first().addClass('ui-btn-active app-tab-active');
                }

                //list.on('vclick', function (event) {
                //    var link = $(event.target).closest('a'),
                //        activeLink = list.find('.app-tab-active'),
                //        scrollable = findScrollable(placeholder),
                //        stub = scrollable.find('.app-stub,.app-stub-main'),
                //        forceSelectedTab = arguments.length != 2 ? null : arguments[1].selectedTab,
                //        text = selectedTab || forceSelectedTab || link.attr('data-text'),
                //        activePage = findActivePage(),
                //        activeTab,
                //        hiddenHeight = 0,
                //        skip,
                //        context,
                //        headingIsVisible;

                //    if (!_input.cancel()) return;

                //    if (forceSelectedTab)
                //        selectedTab = forceSelectedTab;
                //    if (link.length)
                //        if (!selectedTab && link.is('.app-tab-more')) {
                //            var buttons = list.find('.ui-btn').removeClass('ui-btn-active');
                //            callWithFeedback(link, function () {
                //                link.addClass('ui-btn-active');
                //                context = [];
                //                $(options.tabs).each(function (index) {
                //                    var t = this;
                //                    if (!$(buttons[index]).data('hidden'))
                //                        context.push({
                //                            text: t.text, icon: t.active ? 'check' : false, wrap: true, context: { text: t.text, index: index }, linkClassName: 'app-btn-icon-transparent', callback: function (selection) {
                //                                link.removeClass('ui-btn-active');
                //                                selectedTab = selection.text;
                //                                $(list.find('.ui-btn')[selection.index]).trigger('vclick');
                //                            }
                //                        });
                //                });
                //                showListPopup({
                //                    items: context, anchor: link,
                //                    afterclose: function () {
                //                        setTimeout(function () {
                //                            link.removeClass('ui-btn-active');
                //                            list.find('.app-tab-active').addClass('ui-btn-active');
                //                            makeMoreButtonActive();
                //                        }, 50);

                //                    }
                //                });
                //            });
                //        }
                //        else {
                //            list.find('.ui-btn').removeClass('app-tab-active ui-btn-active');
                //            link.addClass('app-tab-active ui-btn-active');
                //            $(tabs).each(function () {
                //                var t = this;
                //                if (t.active) {
                //                    if (text == t.text)
                //                        skip = true;
                //                    $(t.content).each(function () {
                //                        hiddenHeight += $(this).outerHeight(true);
                //                    });
                //                }
                //                t.active = t.text == text;
                //                if (t.active)
                //                    activeTab = t;
                //            });

                //            if (skip) {
                //                selectedTab = null;
                //                makeMoreButtonActive();
                //                return;
                //            }

                //            if (options.scope == 'page')
                //                pageVariable(options.id, text);
                //            else if (options.scope == 'user')
                //                userVariable(options.id, text);
                //            else
                //                persistedTab(options.scope, text);
                //            if (hiddenHeight && stub.length && stub.offset().top + stub.outerHeight() - hiddenHeight < scrollable.offset().top + scrollable.height())
                //                stub.height(hiddenHeight + stub.outerHeight());
                //            saveScrolling(activePage);
                //            //update(placeholder);


                //            if (selectedTab) {
                //                selectedTab = null;
                //                fit(placeholder);
                //            }

                //            function doCallback() {
                //                update(placeholder);
                //                makeMoreButtonActive();
                //                if (activeTab.callback)
                //                    activeTab.callback();
                //                if (options.change) {
                //                    touchScrolling = false;
                //                    options.change(activeTab);
                //                    fetchEchos();
                //                    if (options.restoreScrolling != false)
                //                        restoreScrolling(activePage);
                //                }
                //                if (options.stickyHeader)
                //                    stickyHeader();
                //                trimContentStub(scrollable, stub);
                //            }
                //            //if (false && activeTab.content)
                //            //    doCallback();
                //            //else
                //            //    setTimeout(function () {
                //            //        doCallback();
                //            //    });
                //            setTimeout(function () {
                //                doCallback();
                //            });
                //        }
                //    return false;
                //});
                options.forceSelectedTab = arguments.length != 2 ? null : arguments[1].selectedTab;
                //options.selectedTab = selectedTab;
                placeholder.data({ 'data-tabs': options.tabs, 'options': options });
                update(placeholder);
                fit(placeholder, false);
            }

            function destroy(placeholder) {
                if (!placeholder)
                    placeholder = options.container ? options.container.find('.app-tabs') : findScrollable().find('.app-tabs');//findActivePage('.ui-content .app-wrapper .app-tabs');
                placeholder.find('ul').off();
                placeholder.data({ 'data-tabs': null, options: null }).remove();
            }

            function update(placeholder) {
                if (!placeholder)
                    placeholder = findScrollable().find('.app-tabs');//findActivePage('.ui-content .app-wrapper .app-tabs');
                $(placeholder).each(function () {
                    $($(this).data('data-tabs')).each(function () {
                        var t = this;
                        $(t.content).each(function () {
                            $(this).toggleClass('app-tab-active', t.active);
                        });
                    });
                });
            }

            function fit(placeholder, reset) {
                if (!placeholder)
                    placeholder = (options && options.page || findActivePage()).add($('.ui-page.ui-page-active .app-bar-header.ui-header-fixed'));

                var tabs = placeholder.find('.app-tabs');
                tabs.find('ul').css('visibility', '')

                tabs.each(function () {
                    var bar = $(this);
                    //if (bar.is('.ui-header-fixed'))
                    //    bar.css({ left: appBars.left.visible ? appBars.left.width + 1 : 0, width: 'auto', right: appBars.right.visible ? appBars.right.width + 1 : 0 });
                    var barWidth = bar.width(),
                        config = bar.data('data-tabs'),
                        barLeft = bar.offset().left + parseCss(bar, 'padding-left'),
                        buttons,
                        lastButton, btn, lastVisibleTab,
                        lastVisibleTabIndex, activeTabIsHidden, visibleTabs;
                    if (barWidth || bar.data('dynamic')) {
                        bar.find('.app-tab-more').parent().remove();
                        buttons = bar.find('.ui-btn').css({ 'padding-left': '', 'padding-right': '', 'min-width': '', 'max-width': '', 'display': '' }).removeData('hidden');
                        // verify that content of each tab is visible
                        $(config).each(function (index) {
                            var t = this,
                                //isVisible = true,
                                hiddenContentCount = 0,
                                content = Array.isArray(t.content) ? ($(t.content).map(function () { return this.toArray(); })) : $(t.content), tabButton;
                            if (content.length == 1 && $(content[0]).is('[data-container="tab"]'))
                                content = $(t.content).children();
                            if (content.length) {
                                content.each(function () {
                                    var c = this,
                                        style = c.style;
                                    if (style && style.display == 'none')
                                        hiddenContentCount++; //isVisible = false;
                                });
                                if (/*!isVisible*/content.length == hiddenContentCount) {
                                    tabButton = $(buttons[index]);
                                    tabButton.css('display', 'none').data('hidden', true);
                                    if (tabButton.is('.app-tab-active'))
                                        activeTabIsHidden = true;
                                }
                            }
                        });
                        visibleTabs = buttons.filter(function () { return this.style.display != 'none' });
                        if (visibleTabs.length < 2) {
                            bar.css('display', 'none').data('dynamic', true);
                            if (activeTabIsHidden)
                                $(visibleTabs[0]).trigger('vclick');
                        }
                        else {
                            if (bar.css('display') == 'none') {
                                barWidth = bar.css('display', '').width();
                                barLeft = bar.offset().left + parseCss(bar, 'padding-left')
                                activeTabIsHidden = false;
                            }
                            bar.find('li').removeClass('app-first-child app-last-child');
                            $(visibleTabs[0]).parent().addClass('app-first-child');
                            lastButton = $(visibleTabs[visibleTabs.length - 1]).parent().addClass('app-last-child');
                            // try fitting the buttons on the tab strip
                            //lastButton = buttons.last();
                            if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                buttons.css('min-width', '8em');
                                if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                    buttons.css('min-width', '4em');
                                    if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                        buttons.css({ 'padding-left': '1em', 'padding-right': '1em' });
                                        if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                            buttons.css({ 'padding-left': '.5em', 'padding-right': '.5em' });
                                            if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                                lastButton.parent().removeClass('app-last-child');
                                                lastButton = $('<a class="ui-btn app-tab-more"/>').appendTo($('<li class="app-last-child"/>').appendTo(lastButton.closest('ul'))).text(labelMore).css({ 'min-width': '4em', 'padding-left': '0.5em', 'padding-right': '0.5em' });
                                                lastVisibleTabIndex = buttons.length - 1;
                                                while (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                                    if (!lastVisibleTabIndex) {
                                                        $(buttons.get(0)).css('max-width', barWidth - lastButton.outerWidth() - 12);
                                                        break;
                                                    }
                                                    btn = $(buttons.get(lastVisibleTabIndex)).css('display', 'none');
                                                    if (btn.is('.app-tab-active'))
                                                        lastButton.addClass('ui-btn-active');

                                                    lastVisibleTabIndex--;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (activeTabIsHidden)
                                $(visibleTabs[0]).trigger('vclick');
                        }
                    }
                });
            }

            switch (method) {
                case 'create':
                    if (options.tabs && options.tabs.length > 1)
                        create(options);
                    break;
                case 'destroy':
                    destroy();
                    break;
                case 'fit':
                    fit();
                    break;
            }
        },
        refreshTitleState: function () {
            mobile._title.toggleClass('app-hidden', mobile._menuButton.is('.ui-icon-bars')/*menuStripIsVisible() || !mobile._menuButton.is('.ui-icon-bars')*/);
        },
        refreshMenuStrip: function () {
            if (!menu.nodes)
                initializeMainMenu();
            var menuStripInfo = this._menuStrip,
                menuStrip = menuStripInfo && menuStripInfo.strip,
                title = this._title,
                logo = mobile._logo,
                logoRight = parseCss(logo, 'left') + logo.outerWidth(),
                x1 = appBars.left.visible ? (appBars.left.mini ? logoRight : appBars.left.width) + 1 : logoRight, // + title.outerWidth(),
                toolbar = mobile._toolbar,
                leftMostButton = toolbar.find('.app-btn-cluster-right .ui-btn').filter(visibleFilterFunc).first(),
                x2 = (leftMostButton.length ? leftMostButton.offset().left : /*this._toolbar.outerWidth()*/calcWidth(toolbar)) - 16,
                rootNodes = menu.nodes,
                list,
                itemLinks, moreItem, moreLink, moreWidth,
                stripWidth,
                showItems = $settings('ui.menu.location') == 'toolbar',
                item, itemLeft, itemWidth;
            if (!menuStrip) {
                menuStripInfo = this._menuStrip = { strip: $('<div class="app-menu-strip"></div>').appendTo(toolbar) }
                menuStrip = menuStripInfo.strip;
                if (showItems) {
                    list = $('<ul/>');
                    for (var i = 0; i < rootNodes.length; i++) {
                        var n = rootNodes[i],
                            item = $('<li/>').appendTo(list),
                            link = $('<a class="ui-btn"/>').appendTo(item).text(n.title).attr({ title: n.description }).data('data-node', n);
                        if (n.children)
                            link.addClass('app-has-children');
                        if (n.selected)
                            link.addClass('app-selected');
                    }

                    menuStripInfo.links = list.find('.ui-btn');
                    menuStripInfo.items = menuStripInfo.links.parent();
                    menuStripInfo.more = $('<a class="ui-btn app-has-children"/>').appendTo($('<li/>').appendTo(list)).text(labelMore);

                    function clickNode(node) {
                        menuItemNodeCallback(node);
                    }

                    list.appendTo(menuStrip).on('vclick contextmenu', function (event) {
                        var link = $(event.target).closest('.ui-btn'),
                            linkIsSelected = link.is('.app-selected'),
                            node = link.data('data-node'),
                            isExternalTarget = node && node.url && !node.children;
                        if (link.length == 0 || link.data('selected'))
                            return false;
                        if (isExternalTarget) {
                            if (event.type == 'contextmenu')
                                return false;
                            else if (node.url && !node.url.match(menuItemUrlRegex))
                                busyBeforeUnload();
                            menuStrip.find('.app-selected').removeClass('app-selected');
                            link.addClass('app-selected');
                        }
                        callWithFeedback(link, function () {
                            if (isExternalTarget)
                                clickNode(node);
                            else {
                                if (link.data('selected')) return;
                                var items = [],
                                    nodes = [];
                                if (node)
                                    nodes.push(node);
                                else {
                                    depth = 0;
                                    node = { children: [] }
                                    menuStrip.find('li:hidden a').each(function () {
                                        nodes.push($(this).data('data-node'));
                                    });
                                }
                                enumerateMenuItems(items, true, nodes, 1);
                                showListPopup({
                                    anchor: link.data('selected', true), items: items,
                                    afteropen: function (popup) {
                                        var inner = popup.addClass('app-popup-menu').find('.ui-panel-inner'),
                                            item = inner.find('.app-item-selected');
                                        if (item.length && inner.offset().top + inner.height() < item.offset().top + item.outerHeight())
                                            inner.scrollTop(item.offset().top - inner.offset().top - (inner.height() - item.outerHeight()) / 2);
                                    },
                                    afterclose: function () {
                                        link.removeData('selected');
                                    }
                                });
                            }
                        });
                        return false;
                    });
                }
                else
                    menuStripInfo.title = $('<span class="app-menu-strip-title"/>').appendTo(menuStrip.addClass('app-menu-strip-has-title')).text(menu.currentNode ? menu.currentNode.title : document.title);
            }
            //if (titleIsHidden)
            //    title.addClass('app-hidden');
            //title.css('marginLeft', appBars.left.visible ? appBars.left.width : '');

            stripWidth = x2 - x1;

            if (!showItems) {
                menuStrip.width(stripWidth).css({ left: x1 });
                updateMenuStripState(stripWidth >= 100)
            }
            else if (stripWidth != menuStrip.data('tested-width') || !menuStrip.is(':visible')) {
                menuStrip.data('tested-width', stripWidth)
                if (_screen.width > 414 && stripWidth >= 200 && menuStrip.attr('data-enabled') != 'false' && mobile._menuButton.is('.ui-icon-bars')) {
                    menuStrip.removeClass('app-hidden');
                    updateMenuStripState(true);
                    menuStrip.width(stripWidth).css({ left: x1 });
                    itemLinks = menuStripInfo.items;
                    moreItem = menuStripInfo.more.removeClass('app-selected').parent();
                    moreLink = moreItem.find('.ui-btn').text(labelMore);
                    moreItem.hide();
                    itemLinks.show();
                    for (i = itemLinks.length - 1; i >= 0; i--) {
                        item = $(itemLinks[i]);
                        itemWidth = item.outerWidth();
                        itemLeft = item.offset().left;
                        if (itemLeft + itemWidth - 1 >= x2) {
                            moreItem.show();
                            moreWidth = moreItem.outerWidth();
                            item.hide();
                        }
                        if (item.is(':hidden') && item.find('.app-selected').length)
                            menuStripInfo.more.addClass('app-selected');
                        if (!moreItem.is(':visible') || moreItem.offset().left + moreWidth - 1 < x2) {
                            if (i <= 1 && !item.is(':visible'))
                                updateMenuStripState(false);
                            break;
                        }
                        else {
                            item.hide();
                            if (item.find('.app-selected').length)
                                menuStripInfo.more.addClass('app-selected');
                        }
                        if (i <= 1) {
                            updateMenuStripState(false);
                            //while (i-- >= 0)
                            //    $(itemLinks[i]).hide();
                            //moreLink.text(document.title);
                            //moreItem.css('background-color', 'transparent');
                            break;
                        }
                    }
                }
                else
                    updateMenuStripState(false);
            }
        },
        refreshSideBar: function (context, newContext) {
            var that = this,
                content = contextSidebar().find('.ui-panel-inner'),
                pageInfo = getPageInfo(),
                dataView = pageInfo && pageInfo.dataView,
                contextDataView = dataView,
                dataViewId = dataView && dataView._id,
                parentDataView = dataView && dataView.get_parentDataView(dataView),
                path = [],
                hasActionBar = dataView && dataView.get_showActionBar(),
                about = $('.TaskBox.About .Inner .Value, head meta[name="description"]'),
                showSummary = parentDataView && !parentDataView._parentDataViewId,
                requiresViewStyleSelector = dataView && dataView.get_isGrid(),
                extension = dataView && dataView.extension(),
                viewStyle = requiresViewStyleSelector && extension.viewStyle(),
                isGrid = viewStyle == 'Grid',
                isCards = viewStyle == 'Cards',
                isList = viewStyle == 'List',
                isMap = viewStyle == 'Map',
                styles = [],
                sidebarEventOptions = { items: newContext },
                actionBarContext = [],
                forbiddenIcons = ['material-icon-undo', 'check', 'info'];

            function createViewStyleSelector() {
                requiresViewStyleSelector = false;
                var showStyles = $settingsEnabled('ui.sidebar.views.styles'),
                    showViews = $settingsEnabled('ui.sidebar.views.names');
                if (!extension.dataView().get_showViewSelector() || !(showStyles || showViews))
                    return;
                var viewContext = [],
                    isCollapsed = $settings('ui.sidebar.views.collapsed') == true,
                    dv = pageInfo.dataView,
                    viewLabel = dv.get_view().Label,
                    viewStyleLabel, viewStyleIcon;
                addSeparator(newContext);
                //newContext.push({ text: resourcesPager.Refresh, icon: 'refresh', context: dv._id, callback: dataViewSyncCallback });
                //addSeparator(newContext);
                if (showViews && dv.get_showActionBar() && enumerateAvailableViews(viewContext, false, pageInfo, null, true) > 1) {
                    if (!(appBars.left.mini || isCollapsed)) {
                        $(viewContext).each(function () {
                            newContext.push(this);
                        });
                        newContext.push({});
                    }
                }
                var styleContext = [];
                if (!extension.tagged('view-style-grid-disabled'))
                    styleContext.push({
                        text: resourcesMobile.Grid, icon: 'grid', selected: isGrid, callback: function () {
                            if (!isGrid)
                                changeViewStyleWithFeedback(dataViewId, 'Grid');
                        }
                    });
                if (!extension.tagged('view-style-list-disabled'))
                    styleContext.push({
                        text: resourcesMobile.List, icon: 'bullets', selected: isList, callback: function () {
                            if (!isList)
                                changeViewStyleWithFeedback(dataViewId, 'List');
                        }
                    });
                if (!extension.tagged('view-style-cards-disabled'))
                    styleContext.push({
                        text: resourcesMobile.Cards, icon: 'cards', selected: isCards, callback: function () {
                            if (!isCards)
                                changeViewStyleWithFeedback(dataViewId, 'Cards');
                        }
                    });
                if (extension.tagged('supports-view-style-map') && !extension.tagged('view-style-map-disabled'))
                    styleContext.push({
                        text: resourcesMobile.Map, icon: 'location', selected: isMap, callback: function () {
                            if (!isMap)
                                changeViewStyleWithFeedback(dataViewId, 'Map');
                        }
                    });
                mobile.presenter('enumerate', { id: dataViewId, list: styles });
                $(styles).each(function () {
                    var style = this;
                    if (!extension.tagged('view-style-' + style.name.toLowerCase() + '-disabled')) {
                        if (style.name == viewStyle)
                            style.selected = true;
                        styleContext.push(style);
                    }
                });
                if (showStyles && styleContext.length > 1) {
                    if (isCollapsed)
                        $(styleContext).each(function () {
                            var style = this;
                            if (style.selected) {
                                //newContext.push({ text: style.text, icon: style.icon, popOut: true, callback: configureView });
                                viewStyleLabel = style.text;
                                viewStyleIcon = style.icon;
                                return false;
                            }
                        });
                    else {
                        $(styleContext).each(function () {
                            newContext.push(this);
                        });
                        addSeparator(newContext);
                    }
                }
                if (isCollapsed) {
                    var rowCount = dv._totalRowCount > 0 ? ' (' + String.format('{0:N0}', dv._totalRowCount) + ')' : '';
                    newContext.push({ text: viewLabel + rowCount, desc: viewStyleLabel, icon: 'material-icon-folder-open', context: { position: 'left' }, popOut: true, itemClassName: 'app-view-selector', callback: configureView });
                }
            }

            if (showSummary) {
                while (dataView && path.indexOf(dataView) == -1) {
                    if (parentDataView && parentDataView._dataViewFieldName)
                        break;
                    if ((dataView.get_showInSummary() || parentDataView && dataView != parentDataView && parentDataView.get_showInSummary()) && !dataView.inserting() && dataView.extension().commandRow())
                        path.unshift(dataView);
                    if (dataView.get_isForm())
                        dataView = parentDataView;
                    dataView = _app.find(dataView._filterSource);
                }
                var firstSummaryItemIndex = newContext.length;
                $(path).each(function () {
                    mobile.enumerateFields(this, newContext);
                });
                if (newContext.length > firstSummaryItemIndex) {
                    dataView = path[path.length - 1];
                    var firstSummaryItem = newContext[firstSummaryItemIndex];
                    firstSummaryItem.icon = 'material-icon-chevron-right';
                    firstSummaryItem.miniIcon = 'material-icon-info-outline';
                    firstSummaryItem.context = dataView._id;
                    firstSummaryItem.callback = showInfoView;

                    //newContext.push({
                    //    text: dataView.get_view().Label, icon: 'info', callback: function () {
                    //        mobile.infoView(dataView, true);
                    //    }
                    //});
                    newContext.push({});
                }
            }
            if (hasActionBar && contextDataView) {
                contextDataView.extension().context(actionBarContext, ['ActionBar']);
                $(actionBarContext).each(function () {
                    var option = this,
                        icon = option.icon;
                    if (option.uiScope == 'ActionBar' && icon && icon != 'dots' && icon != 'carat-r')
                        forbiddenIcons.push(icon);
                });
            }
            $(context).each(function () {
                var option = this;
                if (forbiddenIcons.indexOf(option.icon) == -1 && (!option.system || option.toolbar != false) && option.command != 'Select' && (option.icon != 'eye' || parentDataView && !parentDataView.get_showInSummary())) {
                    if (option.text || newContext.length) {
                        if (option.navigateTo && requiresViewStyleSelector)
                            createViewStyleSelector();
                        option.theme = null;
                        if (option.uiScope != 'ActionBar' || !hasActionBar)
                            newContext.push(option);
                    }
                }
            });
            if (requiresViewStyleSelector)
                createViewStyleSelector();
            if (!appBars.left.mini && $settings('ui.menu.location') == 'sidebar') {
                if (newContext.length && newContext[newContext.length - 1].callback)
                    newContext.push({});
                enumerateMenuItems(newContext);
                if (!$settingsEnabled('ui.sidebar.toolbar') && $settingsEnabled('settings.enabled'))
                    newContext.push({}, { text: resourcesMobile.Settings, icon: 'material-icon-settings', transition: true, callback: configureSettingsStandalone });
            }
            if (about.length && showSummary != false) {
                if (newContext.length && newContext[newContext.length - 1].text)
                    newContext.push({});
                newContext.push({ text: about.is('meta') ? about.attr('content') : about.html(), isStatic: true, wrap: true });
            }
        },
        contextPageInfo: function () {
            return getPageInfo(this._contextScope);
        },
        refreshContext: function () {
            refreshContext();
        },
        contextScope: function (value) {
            if (arguments.length == 0)
                return this._contextScope;
            else
                this._contextScope = value;
        },
        contextDataView: function (uiElement) {
            var echo,
                contextPageInfo;
            if (uiElement != null) {
                echo = findEcho(uiElement);
                if (echo.length)
                    return _app.find(echo.attr('data-for'));
            }
            contextPageInfo = this.contextPageInfo();
            return contextPageInfo ? contextPageInfo.dataView : null;
        },
        showContextMenu: function (options) {
            if (!options)
                options = { scope: '' }
            var position = options.position || 'left',
                id = '#app-panel-context-' + position;
            if (options) {
                this.contextScope(options.scope);
                if (options.scope) {
                    id += '-scope';
                    options.position = position;
                }
            }
            getContextPanel(id, function () {
                mobile.refreshContextMenu(id);
            }, options).panel('toggle');
        },
        refreshContextMenu: function (selector, context, listSelector) {
            var that = this,
                panel = $(selector),
                targetListView = panel.find(listSelector || 'ul'),
                listview = targetListView.length ? targetListView : panel.find('ul'),
                listviewHeight = listview.outerHeight(),
                listviewStub, panelCover,
                isSideBar = panel.is('.app-sidebar'),
                contextMenuEvent;


            if (isSideBar && !panel.is(':visible')) {
                context = [];
                that.navContext(context);
                that.refreshAppButtons(context);
                return;
            }


            if (isSideBar && !ie)
                panelCover = $('<div></div>').appendTo($body).css({ 'z-index': 2000, 'position': 'absolute', left: 0, top: panel.find('.ui-panel-inner').offset().top, width: panel.outerWidth(), height: _screen.height, 'background-color': '#fff' });

            if (listviewHeight)
                listviewStub = $('<div></div>').height(listviewHeight).insertAfter(listview);
            clearListView(listview);
            listview.find('a').removeData();
            listview.find('li').remove();

            if (!context) {
                context = [];
                context.isSideBar = isSideBar;
                that.navContext(context);
            }


            if (isSideBar) {
                that.refreshAppButtons(context);
                var newContext = [], i = 0;
                this.refreshSideBar(context, newContext);
                context = newContext;
                context.isSideBar = true;
                if (appBars.left.visible && appBars.left.mini)
                    while (i < context.length) {
                        var optionIcon = context[i].icon;
                        if (optionIcon && mobile._usedToolbarIcons.indexOf(optionIcon) != -1) {
                            context.splice(i, 1);
                            while (i < context.length && !context[i].text) {
                                context.splice(i, 1);
                                if (i > 0)
                                    i--;
                            }
                        }
                        else
                            i++;
                    }
            }

            var panelId = targetListView.data('panel'),
                panelInfo = panel.attr('id').match(/^app-panel-(\w+)/),
                panelType = isSideBar ? 'sidebar' : panelInfo && panelInfo[1];
            if (panelId && panelId.match(/^\#app-panel-/))
                panelId = panelId.substring(11);
            contextMenuEvent = $.Event('before' + panelType + 'panelshow.app');
            //contextMenuEvent.items = context;
            contextMenuEvent.panel = { type: panelType, id: panelId, items: context }
            $(document).trigger(contextMenuEvent);


            // update context listview
            while (context.length && !context[context.length - 1].text && !context[context.length - 1].src)
                context.splice(context.length - 1);
            //if (!context.length && !isSideBar)
            //    context.push({ text: resourcesMobile.EmptyContext });

            this.renderContext(listview, context);


            listview.listview('refresh');

            // if (isSideBar || true)
            listview.find('a.ui-btn-icon-right').removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
            listview.find('li.app-wrap').addClass('ui-li-static ui-body-a').find('a').attr({ 'class': ''/*, 'rel': 'external'*/ });

            if (listview.prev().find('.app-focus').length)
                listview.find('.ui-btn').first().addClass('app-focus ui-btn-active');

            if (panel.is('.app-reset-scrolling'))
                panel.find('.ui-panel-inner').scrollTop(0);
            else
                restorePanelScrollTop(panel);

            if (listviewStub)
                listviewStub.remove();
            if (panelCover)
                panelCover.remove();
            if (isSideBar)
                appBars.left.inner.trigger('scroll');
        }, pageShown: function (callback) {
            whenPageShown(callback);
        },
        isWebView: function () {
            return iOS && !_window.navigator.standalone && !safari;
        },
        isHosted: function () {
            return isHosted;
        },
        screen: function () {
            return _screen;
        },
        icon: function (icon, parent) {
            return materialIcon(toMaterialIcon(icon), parent);
        },
        notify: function (options) {

            function prefixNotificationWithDataViewFieldHeader(dataView, notification) {
                var filterSource = dataView._filterSource,
                    parent, master, masterField;
                if (filterSource) {
                    master = _app.find(filterSource);
                    if (master) {
                        parent = dataView._dataViewFieldName ? dataView : dataView.get_parentDataView();
                        if (parent) {
                            masterField = master.findField(parent._dataViewFieldName);
                            if (masterField)
                                notification = masterField.HeaderText + ': ' + notification;
                        }
                    }
                }
                return notification;
            }

            function create(dataView) {
                var lastArgs = dataView._lastArgs,
                    lastAction, actionPage, notification;
                if (lastArgs) {
                    lastAction = dataView.findAction(lastArgs.Path);
                    if (lastAction && lastAction.Notify) {
                        notification = lastAction.Notify;
                        if (notification && notification != '$none') {
                            if (notification.match(/\{/))
                                notification = dataView._parseText(notification, dataView.row());
                            else {
                                actionPage = _app.touch.pageInfo(dataView);
                                if (actionPage)
                                    notification += ' - ' + actionPage.text;
                            }
                            notification = prefixNotificationWithDataViewFieldHeader(dataView, notification);
                        }
                    }
                }
                return notification;
            }

            if (options != null) {
                var enabled = $settingsEnabled('ui.notify.enabled');
                if (options._controller)
                    return enabled ? create(options) : null;
                if (!enabled) {
                    if (options.force)
                        _app.alert(options.text);
                    return;
                }

                if (typeof options === 'string')
                    options = { text: options };
                var dataView = options.dataView;
                if (dataView) {
                    delete options.dataView;
                    options.text = prefixNotificationWithDataViewFieldHeader(dataView, options.text);
                    dataView._pendingNotification = options;
                }
                else if (options.text) {
                    notifyQueue.push(options);
                    setTimeout(mobile.notify, 150);
                }
            }
            else {
                if (skipTap)
                    setTimeout(showNotification, 100);
                else
                    showNotification();
            }
        },
        details: function (options) {
            var field = options.field,
                dataView = field._dataView,
                aliasField = dataView._allFields[field.AliasIndex],
                row = dataView.editing() ? dataView.editRow() : dataView.extension().commandRow(),
                key = options.key,
                headerText = aliasField.format(row[aliasField.Index]), valueList, valueIndex;
            key = key != null ? key : row[field.Index];
            if (field.ItemsTargetController) {
                $(field.DynamicItems || field.Items).each(function () {
                    var item = this;
                    if (item[0] == key) {
                        headerText = item[1];
                        return false;
                    }
                });
            }
            mobile.show({
                controller: field.ItemsDataController,
                view: options.view || 'editForm1',
                filter: [{ name: field.ItemsDataValueField, value: key }],
                headerText: headerText != null ? headerText : aliasField.HeaderText,
                done: function (lookupDataView) {
                    if (getActivePageId() == dataView._id)
                        if (dataView.get_isForm()) {
                            if (!(lookupDataView._newRow && lookupDataView._newRow.length)) {
                                var values = _app.input.methods.lookup._rowToValues(field, lookupDataView, lookupDataView.editRow());
                                _input.execute({ dataView: dataView, values: values });
                            }
                            if (options.done)
                                options.done(lookupDataView);
                        }
                        else
                            dataView.sync();
                    else {
                        var currentDataView = mobile.dataView();
                        if (currentDataView && !currentDataView.get_isForm())
                            currentDataView.sync();
                    }
                },
                cancel: options.cancel
            });

        },
        lookup: function (options) {
            hideTooltip();

            if (options.field)
                lastFocusedField(options.field);
            if (options.create) {
                var field = options.field,
                    dataInput = options.dataInput,
                    value = options.value,
                    dataTextField = field.ItemsDataTextField,
                    lookupDataView = field._dataView;
                if (value == nullValueInForms)
                    value = null;
                mobile.show({
                    controller: field.ItemsDataController, startCommand: 'New', startArgument: field.ItemsNewDataView, //headerText: String.format(resourcesLookup.NewToolTip, field._dataView._allFields[field.AliasIndex].HeaderText),
                    filter: lookupDataView.get_contextFilter(field, lookupDataView.extension().collect()),
                    defaultValues: value != null && dataTextField ? [{ name: dataTextField, value: value }] : null,
                    done: function (dataView) {
                        var values = _input.methods.lookup._rowToValues(field, dataView, dataView.editRow()),
                            v = [];
                        $(values).each(function () {
                            v.push(this.value);
                        });
                        // ensure that the new value will be either auto-completed or inserted in the list of static items
                        var lastTestedIndex = 0,
                            lov = field.DynamicItems || field.Items,
                            testValue = v[1] ? v[1].toString().toLowerCase() : 'undefined';
                        if (field.ItemsStyle.match(/AutoComplete|Lookup/))
                            // reset cached lookup values
                            while (true) {
                                field._dataView.session(lovKey(field)/*field.Name + '_listOfValues_'*/ + testValue, null)
                                if (!testValue.length) break;
                                testValue = testValue.substring(0, testValue.length - 1);
                            }
                        else {
                            // insert an item in the list
                            $(lov).each(function (index) {
                                if (this[0] == null || this[1].toString().toLowerCase() < testValue)
                                    lastTestedIndex = index;
                                else
                                    return false;
                            });
                            lov.splice(lastTestedIndex + 1, 0, v);
                        }
                        // set focus on the field
                        if (field.ItemsStyle.match(/AutoComplete|Lookup|DropDownList/)) {
                            _input.methods.lookup.focus(dataInput.data('autoComplete', false));
                            _input.methods.lookup._useItemValue(field, v);
                        }
                        else
                            _input.methods.listbox._useItemValue(field, v, true);
                    }
                });
                return;
            }

            var lastLookupDataView,
                //pageInfo = this.pageInfo(),
                lookupField = options.field,
                dataView = lookupField._dataView,
                //lookupFieldDataView = lookupField._dataView,
                filter = [],
                optionsFilter = createExternalFilter(dataView, lookupField, filter),//lookupFieldDataView.get_contextFilter(lookupField, lookupFieldDataView.extension().collect()),
                id,
                lookupDataView, lookupPageInfo,
                query = options.query,
                aliasField = dataView._allFields[lookupField.AliasIndex],
                aliasFieldHeaderText = aliasField.HeaderText,
                pageHeaderText = aliasFieldHeaderText != '&nbsp;' ? aliasFieldHeaderText : lookupField.AltHeaderText,
                row = dataView.editRow();

            revealStickyHeaderInstruction();

            if (!lookupField.ContextFields) {
                lastLookupDataView = mobile._modalStack.length && mobile._modalStack[0].dataView;
                var history = $mobile.navigate.history;
                if (lastLookupDataView && lastLookupDataView._lookupInfo && lastLookupDataView._lookupInfo.field == lookupField &&
                    (history.activeIndex < history.stack.length - 1 && history.stack[history.activeIndex + 1].hash == '#' + lastLookupDataView._id)) {
                    lastLookupDataView._lookupInfo = options;
                    _history.go(1);
                    return;
                }
            }
            this.modalDataView();
            id = lookupField.ItemsDataController.toLowerCase();
            if ($find(id))
                id += Sys.Application.getComponents().length;
            //if (query)
            //    pageVariable(id + '_' + (pageVariable(id + '_viewId') || lookupField.ItemsDataView || 'grid1') + '_filter', [String.format('_quickfind_:~%js%{0}', Sys.Serialization.JavaScriptSerializer.serialize(query))]);
            lookupDataView = $create(Web.DataView, {
                id: id, baseUrl: dataView.get_baseUrl(), servicePath: dataView.get_servicePath(),
                controller: lookupField.ItemsDataController, viewId: lookupField.ItemsDataView,
                //externalFilter: lookupFieldDataView.get_contextFilter(lookupField, optionsFilter),
                externalFilter: optionsFilter,
                filter: filter,
                filterSource: optionsFilter.length > 0 ? 'options' : null,
                showSearchBar: true,
                tag: !$settingsEnabled('history.lookup.search') ? 'history-search-none' : null,
                showFirstLetters: lookupField.ItemsLetters,
                searchOnStart: lookupField.SearchOnStart,
                description: lookupField.ItemsDescription
            }, null, null, $('<p>')[0]);
            lookupPageInfo = this.pageInfo(lookupDataView);
            if (query)
                lookupDataView.viewProp('quickFind', query);
            lookupPageInfo.headerText = options.value ? [options.text, pageHeaderText] : pageHeaderText;
            lookupPageInfo.resolved = true;
            lookupDataView._lookupInfo = options;
            if (options.value != null && !lookupField.ItemsValueSyncDisabled)
                requestDataViewSync(lookupDataView, [options.value]/*, false*/);
            lookupDataView._parentDataViewId = dataView._id;
            this.modalDataView(lookupPageInfo.id, true);
        },
        show: function (options) {
            var  //pageInfo = this.pageInfo(),
                controller = options.controller,
                view = options.view || 'grid1',
                id, showSignature = JSON.stringify(options),
                dataView, pageInfo, lastPage,
                modalStack = mobile._modalStack;

            lastPage = modalStack.length && modalStack[modalStack.length - 1];
            var history = $mobile.navigate.history;
            if (lastPage && lastPage.showSign == showSignature && options.cache != false &&
                (history.activeIndex < history.stack.length - 1 && history.stack[history.activeIndex + 1].hash == '#' + lastPage.id)) {
                _history.go(1);
                return;
            }

            revealStickyHeaderInstruction();

            $(options.filter).each(function () {
                var fv = this;
                if (fv.name)
                    fv.Name = fv.name;
                if (fv.value)
                    fv.Value = fv.value;
            });

            this.modalDataView();
            var loweredController = controller.toLowerCase(),
                index = 1;
            id = loweredController;
            while ($find(id))
                id = loweredController + index++;
            //if (query)
            //    pageVariable(id + '_' + (pageVariable(id + '_viewId') || lookupField.ItemsDataView || 'grid1') + '_filter', [String.format('_quickfind_:~%js%{0}', Sys.Serialization.JavaScriptSerializer.serialize(query))]);
            dataView = $create(Web.DataView, {
                id: id, baseUrl: __baseUrl, servicePath: __servicePath,
                controller: controller, viewId: view,
                externalFilter: options.filter,
                //filterSource: optionsFilter.length > 0 ? 'options' : null,
                showSearchBar: true,
                startCommandName: options.startCommand,
                startCommandArgument: options.startArgument,
                showActionButtons: options.showActionButtons,
                exitModalStateCommands: ['Cancel'],
                tag: options.tags
                //showFirstLetters: lookupField.ItemsLetters,
                //searchOnStart: lookupField.SearchOnStart,
                //description: lookupField.ItemsDescription
            }, null, null, $('<p>')[0]);

            dataView._doneCallback = function (dataView) {
                getPageInfo(dataView).showSign = null;
                broadcastDataViewChanges(dataView);
                goBack(function () {
                    if (options.done)
                        options.done(dataView);
                });
            }
            dataView._ditto = options.defaultValues;
            dataView._cancelCallback = options.cancel || goBack;
            pageInfo = this.pageInfo(dataView);
            pageInfo.headerText = options.headerText;// options.value ? [options.text, pageHeaderText] : pageHeaderText;
            if (pageInfo.headerText)
                pageInfo.headerTextLocked = true;
            pageInfo.resolved = true;
            pageInfo.showSign = showSignature;
            if (options.key) {
                //dataView._syncKey = [options.key];
                //dataView._selectedKey = [options.key];
                requestDataViewSync(dataView, [options.key]);
            }
            this.modalDataView(pageInfo.id, true);
            return dataView;
        },
        pageInit: function (id, indicateProgress) {
            var pageInfo = this.pageInfo(id);
            if (pageInfo == null) return false;
            var dataView = pageInfo.dataView,
                initialized = pageInfo.initialized || (!pageInfo.dataView && pageInfo.initialized != false);
            if (dataView && dataView._busy())
                return false;
            if (!pageInfo.initialized) {
                pageInfo.initialized = true;
                if (dataView) {
                    pageInfo.requiresInitCallback = true;
                    if (indicateProgress != false)
                        busyIndicator(true);
                    if (pageInfo.refreshed == false) {
                        pageInfo.refreshed = true;
                        dataView.extension().refresh();
                    }
                    else {
                        dataView._loadPage();
                        //pageInfo.loading = true;
                        //$('<h1 class="app-page-loading"/>').appendTo(mobile.content(pageInfo.id)).text(loadingStatusText);
                    }
                }
            }
            return initialized;
        },
        pageShow: function (id) {
            if (!findActivePage())
                return;
            //findActivePage("[data-role='navbar'] a.app-tab-active").addClass("ui-btn-active");
            var pageInfo = this.pageInfo(id);
            if (pageInfo == null)
                return;

            var dataView = pageInfo.dataView,
                extension = dataView ? dataView.extension() : null,
                stackIndex = this._modalStack.indexOf(pageInfo);
            if (stackIndex >= 0)
                this._modalStack.splice(stackIndex, 1);
            if (!pageInfo.initialized) {
                pageInfo.initialized = true;
                if (dataView)
                    dataView._loadPage();
            }
            if (extension && extension._reset)
                extension.refresh();
        },
        screen: function () {
            var scrollTop = 0,//$mobile.window.scrollTop(),
                toolbarHeight = getToolbarHeight(),
                screenHeight = $mobile.getScreenHeight();
            return { top: scrollTop + toolbarHeight, bottom: scrollTop + $mobile.getScreenHeight(), height: screenHeight - toolbarHeight, width: _screen.width };

        },
        callWhenVisible: function (selector, func) {
            var elementList = typeof selector == 'string' ? findActivePage(selector) : selector;
            elementList.each(function () {
                var elem = $(this);
                if (elem.is(':visible') && elem[0].style.visibility != 'hidden') {
                    var itemTop = elem.offset().top,
                        itemBottom = itemTop + elem.outerHeight(),
                        scroller = findScrollable(elem),
                        scrollerTop = scroller.offset().top,
                        scrollerBottom = scrollerTop + scroller.height() - 1;
                    if (scrollerTop <= itemTop && itemTop <= scrollerBottom || scrollerTop <= itemBottom && itemBottom <= scrollerBottom || itemTop <= scrollerTop && scrollerBottom <= itemBottom)
                        func(elem);
                }
            });
        },
        whenPageShown: function (callback) {
            whenPageShown(callback);
        },
        whenPageCanceled: function (callback) {
            whenPageCanceled(callback);
        },
        goBack: function (callback) {
            goBack(callback);
        },
        asyncJob: function () {
            return this._asyncJob;
        },
        nextAsycJob: function () {
            return ++this._asyncJob;
        },
        resetPageHeight: function () {
            resetPageHeight();
        },
        supports: function (feature) {
            switch (feature) {
                case 'Map':
                    return this._supportsMap == true;
            }
            return false;
        },
        mapsApiKey: function () {
            var isLocalHost = !!_window.location.host.match(/^localhost\b/);
            return $settings('map.apiKey')/* settings.mapApiIdentifier*/ || (isLocalHost ? 'key=AIzaSyAhggwxCKiA2oEdxaRqap4t4-_96ajw_uw' : '');
        },
        registerAPI: function (name, callback) {
            var that = this,
                url, isLocalHost, mapApiIdentifier;
            if (name == 'Map') {
                if (that._mapAPI) {
                    if (callback)
                        callback();
                }
                else {
                    isLocalHost = !!_window.location.host.match(/^localhost\b/);
                    mapApiIdentifier = mobile.mapsApiKey();
                    url = 'https://maps.googleapis.com/maps/api/js?&callback=appFactoryCallback';
                    if (mapApiIdentifier) {
                        url += '&' + mapApiIdentifier;
                        that._mapAPI = true;
                        _window.appFactoryCallback = function () {
                            that._supportsMap = true;
                            $(document).trigger($.Event('map.init.app'));
                            if (callback)
                                callback();
                            _window.appFactoryCallback = null;
                        }
                        $.getScript(url);
                    }
                    else if (callback)
                        callback();
                }
                return that._mapAPI;
            }
            if (name == 'Charts' && !that._chartsAPI) {
                mobile.registerAPI('Map', function () {
                    $.getScript('https://www.google.com/jsapi', function () {
                        $.getScript('https://www.gstatic.com/charts/loader.js', function () {
                            that._chartsAPI = true;
                            $(document).trigger($.Event('charts.init.app'));
                            if (callback)
                                callback();
                        });
                    });
                });
            }
        },
        fetchOnDemand: function () {
            function triggerButtonClick(button) {
                button.trigger('vclick');
            }
            if (!touchScrolling) {
                var dataView = mobile.dataView();
                //if (dataView && dataView._calcNotify)
                //    dataView.extension().calcNotify();
                this.callWhenVisible('.dv-load-at-bottom', triggerButtonClick);
                this.callWhenVisible('.dv-load-at-top', triggerButtonClick);
            }
            return this;
        },
        keyboard: function () {
            return keyboard();
        },
        callInAnimationFrame: function (callback) {
            if (requestAnimationFrame)
                var id = requestAnimationFrame(function () {
                    callback();
                    cancelAnimationFrame(id);
                });
            else
                callback();
        },
        stickyHeader: function (selector) {
            var that = this,
                hideInstruction = _window._stickyHeaderHideInstruction;
            _window._stickyHeaderHideInstruction = false;
            //requestAnimationFrame(function () {
            var scrollable = findScrollable(selector),
                page = scrollable.closest('.ui-page'),
                heading = stickyHeaderTemplate(page),
                textSelector = heading.attr('data-selector'),
                headingText = textSelector ? page.find(textSelector) : heading.find('.app-static-text'),
                stickyHeaderElement = stickyHeaderBar(selector),
                appBarText, //appBarLabel,
                doHide = true;
            if (!stickyHeaderElement || !stickyHeaderElement.length) return;
            if (/*!stickyHeaderElement.is('.app-disabled') &&*/!isInTransition && (headingText.length || textSelector))
            //if (!heading.is('.app-disabled')) {
            {
                var //screen = that.screen(),
                    //page = stickyHeaderElement.closest('.u-page'),//findActivePage(),
                    isModal = page.is('.app-page-modal'),
                    //scrollable = findScrollable(),
                    scrollableOffsetY = parseCss(scrollable, 'top')/* + (isModal ? parseCss(page, 'top') + 1 : 0)*/,
                    headingTop = Math.ceil(headingText.length ? headingText.offset().top : -1), //Math.ceil(headingText.length ? headingText.offset().top + (selector ? 1 : 0) : -1),
                    yardstickClass,
                    barText, /*barLabel, */barHtml, gridHeader, gridHeaderYardstickClass,
                    fixedBarHeight = 0;
                if (headingTop < scrollableOffsetY && (textSelector || headingText.height() > 0))
                    if (stickyHeaderElement.is(':visible') && stickyHeaderElement.data('screen-width') == _screen.width)
                        doHide = false;
                    else {
                        doHide = false;
                        if (isModal) {
                            if (!stickyHeaderElement.is('.app-bar-heading-modal'))
                                stickyHeaderElement.addClass('app-bar-heading-modal');
                        }
                        else
                            if (stickyHeaderElement.is('.app-bar-heading-modal'))
                                stickyHeaderElement.removeClass('app-bar-heading-modal');
                        stickyHeaderElement.data('screen-width', _screen.width)
                        stickyHeaderElement.show()[0].style.width = (calcWidth(scrollable) - parseCss(stickyHeaderElement, 'padding-left') - parseCss(stickyHeaderElement, 'padding-right')/* - 1*/ - (/*isModal && !isTouchPointer*/false ? 6 : (isModal && isTouchPointer ? -1 : 0))) + 'px';
                        page.find('.ui-content').children().each(function () {
                            var bar = $(this);
                            if (bar.is('.app-tabs,.app-bar-actions,.app-bar-header') && bar.css('display') != 'none')
                                fixedBarHeight += bar.outerHeight();
                        });
                        // update bar label
                        //barLabel = headingText.closest('li').find('label').first().text();
                        //appBarLabel = stickyHeaderElement.find('.app-bar-label');
                        //if (barLabel != appBarLabel.data('label')) {
                        //    if (barLabel)
                        //        appBarLabel.text(barLabel).show();
                        //    else
                        //        appBarLabel.hide();
                        //    appBarLabel.data('label', barLabel);
                        //}
                        // update bar text
                        appBarText = stickyHeaderElement.css({ 'top': scrollableOffsetY + (isModal ? -1 : -1)/*, left: parseCss(page, 'left') + (isModal ? 1 : 0) */ }).find('.app-bar-text');
                        if (textSelector) {
                            barHtml = heading.html();
                            if (barHtml != appBarText.data('html')) {
                                appBarText.data('html', barHtml).html(barHtml).css('white-space', 'normal');
                                if (hideInstruction)
                                    stickyHeaderElement.find('.app-view-instruction,.app-group:not(.app-group-fixed)').addClass('app-hidden').parent().addClass('app-bar-text-instruction-hidden');
                            }
                        }
                        else {
                            barText = headingText.text().trim();
                            if (!barText)
                                doHide = true;
                            else if (barText != appBarText.data('text'))
                                appBarText.data('text', barText).text(barText).css('white-space', '');
                        }
                        if (stickyHeaderElement.outerHeight() + parseCss(stickyHeaderElement, 'top') < headingText.outerHeight() + headingTop) {
                            stickyHeaderElement.hide();
                            doHide = true;
                        }
                    }
            }
            if (doHide || dataInputOf(document.activeElement/*.closest('[data-input]')*/).length)
                stickyHeaderElement.hide();
            // });
            return that;
        },
        wait: function (enable) {
        },
        start: function (options) {
            var loadedAndCreated = mobile._appLoaded && mobile._pageCreated;
            if (!options && !loadedAndCreated) {
                setTimeout(function () { mobile.start(); }, 16);
                return;
            }
            //$('.ui-loader').remove();

            $mobile.ignoreContentEnabled = true;
            var pageMenu = mobile.pageMenu(options && options.pageId),
                linkCount = 0,
                firstUserPage,
                pageTemplate = $(options && options.selector || '#PageContent'),
                dataUrl = pageTemplate.attr('data-href'),
                makeThemModal = mobile._pages.length > 1,
                userPages = pageTemplate.find('div[data-app-role="page"]').each(function (index) {
                    var userPage = $(this),
                        userPageContent = userPage.find('> div[data-role="content"]'),
                        framework = userPage.attr('data-content-framework');
                    if (framework)
                        userPage.attr('data-enhance', 'false');
                    if (!userPageContent.length) {
                        userPageContent = $('<div data-role="content"></div>');
                        userPage.contents().appendTo(userPageContent);
                        userPageContent.appendTo(userPage);
                    }
                    userPage.attr({ 'data-role': 'page', 'data-app-role': null }).addClass('app-page-scrollable').appendTo($body);
                    var pageHeader = _app.eval(userPage.attr('data-page-header')),
                        activator = parseActivator(userPage),
                        pageInfo = { text: (pageHeader != 'false' ? pageHeader : '') || activator.text || mobile.title(), description: activator.description, activator: activator, url: dataUrl, transition: options && options.transition },
                        pageId = userPage.attr('id') || (pathToId(dataUrl || location.pathname) + (index > 0 || dataUrl ? (index + 1) : '')) || '_root',
                        pageButton,
                        pageContent;
                    pageHeader = pageInfo.text.split(/\s*\|\s*/);
                    pageInfo.headerText = pageHeader.length > 1 ? pageHeader : pageHeader[0];
                    userPage.find('div[data-role="content"]').contents().wrapAll('<div class="app-page-content' + (framework ? ' app-content-framework app-' + framework : '') + '"></div>');
                    userPage.page().attr('id', pageId);
                    pageInfo.id = pageId;
                    pageInfo.page = userPage;
                    pageInfo.dynamic = options && options.dynamic;
                    mobile.pageInfo(pageInfo);
                    pageContent = (pageInfo.scrollable = createScroller(userPage, false)).find('.app-page-content');
                    if (framework) {
                        userPage.attr('data-page-header', 'false')
                        _app.configureFramework(framework, pageContent, function (config) {
                            contentFramework = config;
                        });
                    }
                    if (!options || !options.dynamic)
                        createMainTabBar();
                    if (makeThemModal)
                        mobile.makeModalOrPanel(pageInfo)
                    //if (dataControl)
                    //    pageContent.attr('data-control', dataControl);
                    userPage.each(function () {
                        $.each(this.attributes, function () {
                            var that = this;
                            if (that.specified) {
                                var name = that.name;
                                if (name.match(/^data\-/) && !name.match(/^(data-(content-framework|page-header|app-role|role|activator|enhance))$/))
                                    pageContent.attr(name, that.value);
                            }
                        });
                    });
                    _app.dataBind(pageContent, []);
                    //pageContent.find('.carousel').on('swipeleft swiperight', function (event) {
                    //    $(event.target).closest('.carousel').find((event.type == 'swipeleft' ? '.right' : '.left') + '.carousel-control').trigger('click');
                    //});
                    if (activator.text) {
                        linkCount++;
                        pageButton = $('<a class="app-action-navigate" />')
                            .attr('href', '#' + pageId).text(activator.text)
                            .appendTo($('<li/>').appendTo(pageMenu));
                        if (pageInfo.description)
                            $('<p/>').appendTo(pageButton).text(pageInfo.description);
                    }
                    //resetInvisiblePageHeight(userPage);
                });
            if (userPages.length) {
                firstUserPage = userPages.first();
                if (linkCount == 0 && firstUserPage.attr('data-activator') != 'false')
                    $('<a class="app-action-navigate" />')
                        .attr('href', '#' + firstUserPage.attr('id')).text(firstUserPage.attr('data-page-header') || resourcesMenu.SeeAlso)
                        .appendTo($('<li/>').appendTo(pageMenu));

                if (pageMenu.is('.ui-listview'))
                    pageMenu.listview().listview('refresh');
            }
            // locate current node
            var rootNodes = menu.nodes,
                currentNode;
            function findCurrentNode(nodes) {
                $(nodes).each(function () {
                    if (this.selected) {
                        currentNode = this;
                        return false;
                    }
                    if (this.children) {
                        findCurrentNode(this.children);
                        if (currentNode)
                            return false;
                    }
                });
                return null;
            }
            if (!options)
                findCurrentNode(rootNodes);
            // create  a table of contents if there is no "custom" pages
            if (currentNode && !userPages.length && pageMenu.find('a').length == 0)
                buildHierarchyLinks(currentNode.children, pageMenu, 1);
            var that = this,
                activePage = options ? mobile.page(options.pageId) : findActivePage(),
                links = activePage.find('a.app-action-navigate'),
                anchor = location.href.match(/#(.+)$/),
                scrollable,
                tabs = [], tabbedContainer,
                firstPage = that._pages[0];

            function appStart() {
                var startupScript = options && $(options.selector).data('scripts');
                if (startupScript)
                    eval(startupScript);
                $(document).trigger($.Event('start.app'));
                mobile._started = true;

                if (identityConfirmationRequested)
                    mobile.notify({ text: resourcesDevice.DeviceLoginPrompt, duration: 'long' });
            }

            function createTabStrip() {
                mobile.tabs('create', {
                    tabs: tabs, className: 'app-tabs-echo', scope: 'page', change: function () {
                        // fetchEchos();
                    }
                });
            }
            if (links.length == 1 && (options || $settings('ui.list.initialMode') == 'SeeAll' || (!firstPage.dataView || firstPage.dataView.get_lastCommandName() || _window.location.href.match(/_controller=.+_commandName=.+/))))
                $(this._pages).each(function () {
                    var pageInfo = this,
                        dataView = pageInfo.dataView;
                    rootDataViewId = dataView && dataView._id;
                    if ((!dataUrl || pageInfo.url == dataUrl && !pageInfo.root) && (!dataView || !dataView._hidden)) {

                        if (!dataUrl) {
                            pageInfo.home = true;
                            dataUrl = $mobile.path.documentBase.pathname + _window.location.search;
                            //window.location.replace('#' + pageInfo.id);
                            //$mobile.navigate.navigator.squash(dataUrl);
                        }

                        appStart();

                        $mobile.navigate.history.clearForward();

                        if (dataUrl)
                            pageInfo.replaceUrl = dataUrl;
                        //if (_webkitSuppressPageChangeOnStart == null) {
                        //    _webkitSuppressPageChangeOnStart = true;
                        //    setTimeout(function () {
                        //        _webkitSuppressPageChangeOnStart = false;
                        //    }, 1000);
                        //}
                        if (dataView) {
                            createScroller($('#Main'));
                            $('<h1 class="app-page-loading"/>').appendTo(mobile.content().empty()).text(loadingStatusText);
                            createMainTabBar();
                        }
                        _webkitSuppressPageChangeOnStart = true;
                        that.changePage(pageInfo.id);
                        $(document).one('pageready.app', function () {
                            _webkitSuppressPageChangeOnStart = false;
                        });
                        return false;
                    }
                });
            else if (activePage.attr('id') == 'Main') {

                //if (location.hash && location.hash.length > 1) {
                //    window.location.replace('#');
                //    history.replaceState('', document.title, window.location.pathname);
                //}

                if (links.length)
                    activePage.find('a[rel="external"]').parent().remove();

                links.show();
                scrollable = createScroller(activePage);
                createMainTabBar();
                activePage.addClass('app-page-scrollable');
                pageHeaderText(document.title);
                //scrollable = activePage.find('.app-wrapper');

                $(links).each(function () {
                    var link = $(this),
                        id = link.attr('href'),
                        pageInfo = id && getPageInfo(id.substring(1)),
                        t, echo,
                        activator,
                        linkText;
                    if (pageInfo && pageInfo.dataView && pageInfo.activator.type != 'Button') {
                        activator = pageInfo.activator;
                        if (activator && activator.type == 'Tab') {
                            $(tabs).each(function () {
                                if (this.text == activator.text) {
                                    t = this;
                                    return false;
                                }
                            });
                            if (!t) {
                                if (tabbedContainer != activator.container) {
                                    if (tabbedContainer) {
                                        createTabStrip();
                                        tabs = [];
                                    }
                                    tabbedContainer = activator.container;
                                }

                                t = { text: activator.text, content: [] };
                                tabs.push(t);
                            }
                        }
                        echo = createEcho(pageInfo.id, scrollable);
                        if (t)
                            t.content.push(echo);
                        link.parent().remove();
                    }
                });
                if (tabbedContainer)
                    createTabStrip();
                pageMenu = mobile.pageMenu();
                if (pageMenu.find('a.app-action-navigate,a[rel="external"]').length)
                    pageMenu.listview().show();
                else
                    pageMenu.remove();
                resetPageHeight();
                if (scrollable.find('.app-tabs').length > 1)
                    $('<div class="app-stub-main"></div>').appendTo(scrollable);
                fitTabs();
                appStart();
                fetchEchos();
                updateMenuButtonStatus();
                updateVScrollbar(scrollable);
                focusScrollable();
            }
        },
        pageMenu: function (pageId) {
            var that = this,
                content = this.content(pageId),
                menu = content.find('ul.app-page-menu');
            if (!menu.length) {
                //var pageDesc = $('<p class="app-page-menu-desc"/>').appendTo(content).hide();
                menu = $('<ul data-role="listview" data-inset="false" class="app-page-menu"/>').appendTo(content).hide().on('vclick', function (event) {
                    var link = $(event.target),
                        href,
                        hrefIsPageId;
                    if (!link.is('a'))
                        link = link.closest('a');
                    if (link.length) {
                        href = link.attr('href');
                        hrefIsPageId = href.match(/^#/);
                        if (!hrefIsPageId)
                            busyBeforeUnload();
                        callWithFeedback(link, function () {
                            if (hrefIsPageId)
                                that.changePage(href.substring(1));
                            else {
                                activeLink(link, false);
                                _window.location.href = href;
                            }
                        });
                    }
                    return false;
                });
                //if (about.length) {
                //    $('<p>').appendTo(pageDesc.html(about.html()));
                //    pageDesc.find('a').attr('rel', 'external');
                //}
                //$('<p>').appendTo(content);
            }
            return menu;
        },
        initialize: function () {
            tryAutoLogin();
            var currentNode,
                pathInfo = _window.location.pathname + _window.location.search.replace(/(\_(\w+)=(.*?)(&|$))/, ''),
                nodesWithIcons = Web.Menu.nodesWithIcons = [];

            if (pathInfo.match(/\?$/))
                pathInfo = pathInfo.substring(0, pathInfo.length - 1);

            Web.Menu.nodeCount = 0;
            function enumerateNodesWithIcons(nodes) {
                $(nodes).each(function () {
                    var n = this,
                        cssClass = n.cssClass,
                        m = cssClass && cssClass.match(materialIconRegex);
                    if (m) {
                        nodesWithIcons.push({ node: n, icon: m[0] });
                        n.icon = m[0];
                    }
                    if (n.children)
                        enumerateNodesWithIcons(n.children);
                    Web.Menu.nodeCount++;
                });
            }

            function enumerateSelectedNodes(nodes) {
                $(nodes).each(function () {
                    var n = this,
                        u = (n.url || '').toLowerCase();
                    if (u.startsWith('../'))
                        u = u.substring(3);
                    if (pathInfo.indexOf(u) != -1 || n.selected) {
                        currentNode = n;
                        currentNode.selected = true;
                        Web.Menu.currentNode = currentNode;
                        return false;
                    }

                    if (n.children) {
                        enumerateSelectedNodes(n.children);
                        if (currentNode) {
                            n.selected = true;
                            return false;
                        }
                    }
                });
                return null;
            }


            for (var menuId in menu.Nodes) {
                // create a global variable with the list of main menu nodes
                var m = menu.Nodes[menuId];
                enumerateSelectedNodes(m);
                enumerateNodesWithIcons(m);
                if (currentNode && currentNode.cssClass) {
                    currentNode.showPageHeaderTitle = !!currentNode.cssClass.match(/\bpage-header-title\b/);
                    currentNode.showPageHeaderDescription = !!currentNode.cssClass.match(/\bpage-header-description\b/);
                    currentNode.showPageHeaderIcon = !!currentNode.cssClass.match(/\bpage-header-icon\b/);
                }
                break;
            }

            var that = this,
                pulse = timeNow(),
                startUrl = $mobile.path.parseUrl(location.href),
                startHash = startUrl && startUrl.hash,
                firstPage,
                head = $('head');

            var dummy = $('<div class="app-scrollbar-info"><div></div></div>').appendTo($body);
            scrollbarInfo = { width: dummy[0].offsetWidth - dummy[0].clientWidth, height: dummy[0].offsetWidth - dummy[0].clientWidth, gridColumnPadding: 16 };
            dummy.remove();
            //if (!$body.is('.app-ms-tablet'))
            //    that._stickyHeaderBar.css('right', scrollbarInfo.width);

            initTouchUI();

            rtf.init();

            if (startHash && (startHash.match(/\W/) || !$(startHash).length)) {
                //location.replace(startUrl.hrefNoHash);
                $mobile.navigate.history.initialDst = '';
                firstPage = $mobile.navigate.history.stack[0];
                firstPage.url = startUrl.hrefNoHash;
                firstPage.hash = '';
                $mobile.path.documentBase.href = $mobile.path.documentBase.hrefNoHash;
            }

            if (iOS)
                $('<meta name="apple-mobile-web-app-capable" content="yes"/>' +
                    '<meta name="apple-mobile-web-app-status-bar-style" content="black' + (iOSMajorVersion >= 8 ? '-translucent' : '') + '"/>' +
                    '<link rel="apple-touch-icon" href="../images/logo-icon.png"/>').appendTo(head);
            else if (android) {
                $('<meta name="mobile-web-app-capable" content="yes"/>' +
                    '<link rel="icon" sizes="196x196" href="../images/logo-icon.png"/>').appendTo(head);
                // NOTE: It appears that the phone is known to Android. There is no need to load
                //(function () {
                //    _window.WebFontConfig = {
                //        google: { families: ['Roboto::latin'] }
                //    };
                //    var wf = document.createElement('script');
                //    wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                //    wf.type = 'text/javascript';
                //    wf.async = 'true';
                //    var s = document.getElementsByTagName('script')[0];
                //    s.parentNode.insertBefore(wf, s);
                //})();
            }
            // This will hook up ROBOTO from the web
            //(function () {
            //    _window.WebFontConfig = {
            //        google: { families: ['Roboto::latin'] }
            //    };
            //    var wf = document.createElement('script');
            //    wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
            //    wf.type = 'text/javascript';
            //    wf.async = 'true';
            //    var s = document.getElementsByTagName('script')[0];
            //    s.parentNode.insertBefore(wf, s);
            //    $(document.body).addClass('app-android');
            //})();

            function appPulse() {
                var newPulse = timeNow();
                if (newPulse - pulse > 2500) {
                    var event = $.Event('awake.app');
                    $(document).trigger(event);
                    if (event.isDefaultPrevented())
                        return;
                    else
                        newPulse = timeNow();
                }

                pulse = newPulse;
                setTimeout(appPulse, 1250);
            };
            setTimeout(appPulse, 10);
            if (!settings.appInfo.match(/\|$/))
                $('#app-welcome').remove();

            mobile._logo.html(appName())
            updateMenuStripPosition();
            mobile.refreshMenuStrip();
            syncMenuStripWithVisibleTabBar();
            var leftSideBarToolbar = appBars.left.toolbar,
                nodesWithIcons = Web.Menu.nodesWithIcons,
                settingsButtonIsEnabled = $settingsEnabled('settings.enabled'),
                appsLocation = $settings('ui.menu.apps.location'),
                appsButtonIsEnabled = !appsLocation || appsLocation == 'sidebar',
                doesNotNeedAppsButton = nodesWithIcons.length <= 4 && nodesWithIcons.length == menu.nodeCount || !appsButtonIsEnabled,
                numberOfIconsInToolbar = Math.min(nodesWithIcons.length, (doesNotNeedAppsButton ? 4 : 3) + (settingsButtonIsEnabled ? 0 : 1));
            menu.nodeCountInSidebar = numberOfIconsInToolbar;
            if ($settingsEnabled('ui.sidebar.toolbar')) {
                var tabBarIsEnabled = $settings('ui.menu.tabbar') == true;
                if ($settingsEnabled('ui.sidebar.icons') && !tabBarIsEnabled) {
                    for (var inode = 0; inode < numberOfIconsInToolbar; inode++) {
                        var n = nodesWithIcons[inode],
                            btn = $('<a class="ui-btn ui-btn-a app-btn-page app-btn' + inode + '">&nbsp;</a>').appendTo(leftSideBarToolbar).attr('title', n.node.title).data('context', n.node);
                        materialIcon(n.icon, btn);
                        if (n.node == menu.currentNode)
                            btn.addClass('app-selected');
                    }
                }
                else {
                    numberOfIconsInToolbar = 0;
                    doesNotNeedAppsButton = !appsButtonIsEnabled;
                }
                //if (Web.Menu.nodeCount > nodesWithIcons.length)
                if (!doesNotNeedAppsButton && appsButtonIsEnabled)
                    materialIcon('material-icon-apps', $('<a class="ui-btn ui-btn-a app-btn-apps">&nbsp;</a>').appendTo(leftSideBarToolbar).attr('title', resourcesMobile.Apps));
                if (settingsButtonIsEnabled)
                    materialIcon('material-icon-settings', $('<a class="ui-btn ui-btn-a app-btn-settings">&nbsp;</a>').appendTo(leftSideBarToolbar).text(resourcesMobile.Settings).attr('title', resourcesMobile.Settings));
                if (tabBarIsEnabled)
                    leftSideBarToolbar.addClass('app-has-tabbar');
                else if (numberOfIconsInToolbar)
                    leftSideBarToolbar.addClass('app-has-icons');
                if (($settings('ui.menu.location') == 'sidebar' || !appsButtonIsEnabled) && !numberOfIconsInToolbar)
                    leftSideBarToolbar.addClass('app-has-optional-apps');
                updateMiniSiderInnerHeight();
                appBars.left.inner.closest('.ui-panel').addClass('app-has-toolbar-bottom');
                if (!leftSideBarToolbar.find('.ui-btn').length) leftSideBarToolbar.css('visibility', 'hidden');
                syncMenuStripWithVisibleSidebar();
            }
            else {
                leftSideBarToolbar.hide();
                appBars.left.inner.css('bottom', 0);
            }
            enhanceScrolling(appBars.left.inner, false);
        },
        presenter: function (method, options) {

            var presenters = mobile._presenters;

            // register a view presenter
            function register() {
                presenters[options.name] = options;
            }

            function activate(info) {
                changeViewStyleWithFeedback(info.id, info.name);
            }

            function supports() {
                var p = presenters[typeof options == 'string' ? options : options.name];
                return p && (typeof options == 'string' || p.supports(_app.find(options.id), options.config));
            }

            function show() {
                var dataView = _app.find(options.id),
                    extension = dataView.extension(),
                    containerIsEcho = options.container.is('.app-echo-inner'),
                    p = iyf(),
                    me;

                if (!containerIsEcho && dataView != mobile.dataView())
                    refreshEcho(options.id + '_echo');
                else {
                    p = presenters[options.name];
                    if (containerIsEcho && p.echo && !p.echo())
                        return false;
                    if (!containerIsEcho) {
                        hidePresenters(options.container, extension);
                        // disposeListViews(options.container); // - this causes the main list view to re-create
                        options.container.find('ul[data-role="listview"]').hide();
                        showPresenterInstruction(options.container, extension);
                    }
                    me = $(options.container).find('div[data-presenter="' + p.name + '"][data-scope="' + dataView._viewId + '"]');
                    if (!me.length)
                        me = $('<div data-role="presenter" class="app-presenter"></div>').appendTo(options.container).attr({ 'data-presenter': p.name, 'data-scope': dataView._viewId });
                    me.show()
                    options.container = me;
                    p.show(options);
                }
                return true;
            }

            function hide() {
                $(options.container).find('div[data-role="presenter"]').each(function () {
                    var that = $(this),
                        name = that.attr('data-presenter'),
                        p = presenters[name];
                    if (p) {
                        options.container = that;
                        p.hide(options);
                        that.hide();
                    }
                });
            }

            function dispose() {
                $(options.container).find('div[data-role="presenter"]').each(function () {
                    var that = $(this),
                        name = that.attr('data-presenter'),
                        p = presenters[name];
                    if (p) {
                        options.container = that;
                        p.dispose(options);
                        that.remove();
                    }
                });
            }

            // enumerate a list of presenters
            function enumerate() {
                var dataView = _app.find(options.id),
                    echoMode = mobile.contextDataView() != mobile.dataView();
                for (var name in presenters) {
                    var p = presenters[name];
                    if (p.supports(dataView) && (!echoMode || (!p.echo || p.echo())))
                        options.list.push({ name: name, text: p.text(), icon: p.icon(), context: { id: dataView._id, name: name }, callback: activate });
                }
            }

            // gets the presenter
            function find() {
                return presenters[options.name];
            }

            switch (method) {
                case 'supports':
                    return supports();
                case 'enumerate':
                    enumerate();
                    break;
                case 'register':
                    register();
                    break;
                case 'show':
                    return show();
                //break;
                case 'hide':
                    hide();
                    break;
                case 'dispose':
                    dispose();
                    break;
                case 'find':
                    return find();
                //break;
            }
        },
        showAccountManager: function (values, showLogins) {
            var identities = _app.AccountManager.list(),
                forceShow = location.href.match(/(\?|&)_accMan=(\w+)/),
                items = [], i;

            if (Web.Membership._instance._rememberMeSet) {
                if (!values)
                    values = [];
                values.push({ name: 'RememberMe', value: true });
            }

            if (!_app.AccountManager.enabled()) {
                mobile.showLogin(values);
                return;
            }

            for (i in identities)
                if (i != '_lastUser' && identities[i].UserName)
                    items.push({
                        text: i, callback: accountManagerChangeCurrentUser, context: identities[i]
                    });

            if (showLogins && (items.length || forceShow && forceShow[2] != 'login')) {
                if (forceShow || items.length) {
                    items.push({ text: resourcesMobile.AddAccount, callback: mobile.showLogin, icon: 'material-icon-add' });
                    accountManagerScreen(items, 'switch');
                }
                else
                    doChangeCurrentUser(items[0].context.UserName);
            }
            else
                mobile.showLogin(values);
        },
        showLogin: function (values) {
            var membership = Web.Membership && Web.Membership._instance;
            if (membership && !membership.get_displayLogin() && !isDedicatedLoginPage()) {
                var loginUrl = __baseUrl + 'login';
                if (_window.location.href.indexOf('.aspx') != -1)
                    loginUrl += '.aspx';
                _window.location.href = loginUrl;
            }
            else {
                var screen = accountManagerScreen();

                if (!screen.is('.app-acc-man-inactive') && !screen.is('.app-acc-man-splash'))
                    screen.appendTo($body).addClass('app-acc-man-inactive');
                screen.insertBefore($('.app-page-modal-background'));
                if (!allowModal())
                    accountManagerScreen().fadeOut('slow');
                mobile.show({
                    controller: 'MyProfile',
                    startCommand: 'New',
                    startArgument: 'loginForm',
                    showActionButtons: 'Bottom',
                    defaultValues: values
                });
                //if (screen.length)
                //    $(document).one('pageready.app', function () {
                //        if (!findActivePage().is('.app-page-modal'))
                //            accountManagerScreen().hide();
                //    });
            }
        },
        openExternalUrl: function (href, isExternal) {
            var result,
                loc = $mobile.path.parseUrl(href),
                locationHash = loc.hash;
            if (loc.host)
                result = function () {
                    // external link
                    if (busyIndicator()) return;
                    if (loc.host == 'maps.apple.com' || loc.host == 'maps.google.com' || isExternal)
                        openHref(href);
                    else {
                        var pageId = loc.pathname.replace(/\//g, '-').substring(1) || loc.host.replace(/\W/g, '-'),
                            text = loc.filename.replace(/\W/g, ' '),
                            pageInfo = mobile.pageInfo(pageId),
                            page,
                            iframe;
                        if (!pageInfo)
                            mobile.pageInfo({ id: pageId, external: true, href: href });
                        page = mobile.page(pageId),
                            iframe = page.find('iframe');
                        busyIndicator(true);
                        mobile.busy(true);
                        if (iframe.length)
                            iframe.remove();
                        iframe = $('<iframe class="app-page-external"/>').attr('src', href).appendTo(findScrollable(page)/*.find('.ui-content .app-wrapper')*/.addClass('app-wrapper-external'))
                            .load(function () {
                                if (getActivePageId() == pageId) {
                                    busyIndicator(false);
                                    mobile.busy(false);
                                }
                                else
                                    setTimeout(function () {
                                        //if (!getPageInfo(pageId))
                                        //    mobile.pageInfo({ id: pageId, /*text: text, headerText: text,*/external: true });
                                        mobile.changePage(pageId);
                                    });

                            });
                        if (iOS)
                            findScrollable(page)/*.find('.ui-content .app-wrapper')*/.css('overflow', 'auto');
                    }
                };
            return result;
        },
        getThemes: function () {
            var d = new $.Deferred();
            $.ajax({
                url: __servicePath + '/Themes',
                method: 'POST',
                cache: false
            }).done(function (result) {
                d.resolve(result.d || JSON.parse($(result).text()));
            });
            return d.promise();
        },
        returnUrl: function () {
            identityConfirmationRequested = sessionStorage['identityConfirmationRequested'];
            if (identityConfirmationRequested)
                return identityConfirmationRequested;

            var returnUrl = _window.location.href.match(/\?ReturnUrl=(.+?)(#.+)?$/);
            if (returnUrl)
                returnUrl = decodeURIComponent(returnUrl[1]);

            if (returnUrl && returnUrl.startsWith('/_invoke/getidentity'))
                sessionStorage['identityConfirmationRequested'] = identityConfirmationRequested = returnUrl;

            return returnUrl;
        },
        _changeThemeLink: function (oldTheme, theme, callback) {
            var date = new Date(),
                user = settings.appInfo.split('|')[1],
                href;
            date.setMonth(date.getMonth() + 1);
            document.cookie = '.COTTHEME' + user + '=' + theme + ';expires=' + date.toUTCString() + ';path=/';
            var cssLink = $('link.app-theme');
            if (cssLink.length) {
                href = cssLink.attr('href');
                if (href.indexOf('appservices') > -1)
                    href = href.replace(new RegExp(RegExp.escape(oldTheme), "i"), theme);
                else {
                    var themeList = theme.split('.');
                    href = href.substring(0, href.indexOf('Theme.ashx') + 17) + themeList[0] + '&accent=' + themeList[1];
                }
                $.ajax({
                    url: href,
                    dataType: 'text'
                }).done(function (result) {
                    cssLink.attr('href', href);
                    callback();
                });
            }
        }
    };

    /* initialize mobile page */

    (function () {
        //$.event.special.swipe.scrollSupressionThreshold = 100;
        $.event.special.swipe.teardown();
        $.event.special.swipe.setup = function () { };
        $.event.special.tap.teardown();
        $.event.special.tap.setup = nop;
        $.mobile.autoInitializePage = false;

        var touchRegex = /\b_touch_(\w+)=(\w+)\b/g,
            touchParam = touchRegex.exec(location.href),
            touchProp, touchValuem, touchReset;

        var originalFocusPage = $mobile.focusPage;
        $mobile.focusPage = nop;/*function (page) {
            originalFocusPage(page);
            resetPageHeight(page);
            restoreScrolling(page);
        }*/

        $.extend($.fn.buttonMarkup, {
            initSelector: "a:jqmData(role='button'), .ui-bar > a, .ui-bar > :jqmData(role='controlgroup') > a"
        });

        var transition = $mobile.SerialTransition.prototype
        transition.toPreClass = '';
        transition.cleanFrom = function () {
            this.$from.removeClass($mobile.activePageClass);
        };
        transition.doneIn = function () {
            this.deferred.resolve(this.name, this.reverse, this.$to, this.$from, true);
        };
        //transition.doneOut = nop;
        transition.hideIn = function (callback) {
            callback.call(this);
        };
        transition.scrollPage = nop;
        transition.startIn = function (screenHeight, reverseClass, none, preventFocus) {
            this.hideIn(function () {
                this.$to.addClass($.mobile.activePageClass);
            });
            this.doneIn();
        };
        transition.startOut = nop;
        transition.toggleViewportClass = nop;
        transition.transition = function () {
            var none = 'none',
                reverseClass = '',
                screenHeight = $.mobile.getScreenHeight();
            if (this.$from && !none)
                this.startOut(screenHeight, reverseClass, none);
            else
                this.doneOut(screenHeight, reverseClass, none, true);
            return this.deferred.promise();
        };

        $mobile.resetActivePageHeight = function (height) {
            //            var page = findActivePage();
            //            if (!page.is('.app-page-modal'))
            //               page.css('min-height', _screenHeight - getToolbarHeight());
        };

        $body = $('body');

        // check the device capabilities

        var mq = _window.matchMedia("screen and (min-resolution: 144dpi)");
        if (!mq.matches)
            mq = _window.matchMedia("screen and (-webkit-min-device-pixel-ratio: 1.5)");
        if (mq.matches) {
            screenDPI = 144;
            mq = _window.matchMedia("screen and (min-resolution: 240dpi)");
            if (!mq.matches)
                mq = _window.matchMedia("screen and (-webkit-min-device-pixel-ratio: 2.5)");
            if (mq.matches)
                screepDPI = 432;
        }

        // test if the browser is capable of touch

        isTouchPointer = 'ontouchstart' in _window;
        if (isTouchPointer) {
            if (!iOS && !android)
                $(document).on('mousemove touchstart', function (event) {
                    _lastTouch = null;
                    if (event.type.match(/^touch/)) {
                        if (!isTouchPointer) {
                            isTouchPointer = true;
                            $body.removeClass('app-desktop app-show-system-buttons-on-hover');
                        }
                    }
                    else {
                        if (isTouchPointer) {
                            isTouchPointer = false;
                            if (!settings || $settings('ui.showSystemButtons') != 'Always')
                                $body.addClass('app-show-system-buttons-on-hover');
                            $body.addClass('app-desktop');
                        }
                    }
                });
        }
        else
            if (_window.PointerEvent) {
                isTouchPointer = true;
                $(document).on('pointerdown pointermove', function (event) {
                    var pointerType = event.originalEvent.pointerType;
                    if (pointerType == 'touch') {
                        if (!isTouchPointer) {
                            isTouchPointer = true;
                            $body.removeClass('app-desktop app-show-system-buttons-on-hover');
                        }
                    }
                    else if (pointerType == 'mouse') {
                        if (isTouchPointer) {
                            isTouchPointer = false;
                            if (!settings || $settings('ui.showSystemButtons') != 'Always')
                                $body.addClass('app-show-system-buttons-on-hover');
                            $body.addClass('app-desktop');
                        }
                    }
                });
            }



        if (!isTouchPointer)
            $body.addClass('app-desktop');

        //if (true || navigator.maxTouchPoints > 0 && (ie || _window.PointerEvent)) {
        //    $body.addClass('app-ms-tablet').removeClass('app-desktop');
        //    iePointerType = 'touch';
        //}

        //isDesktopClient = false;
        //if (!isTouch)
        //    $body.addClass('app-desktop');

        $('#aspnetForm').hide();
        var toolbar = $('<div id="app-bar-toolbar" class="app-bar-toolbar ui-header ui-bar-a ui-header-fixed" data-role="header" data-position="fixed" data-theme="a" class="app-bar-toolbar"></div>').appendTo($body),
            page = $('<div data-role="page" id="Main"></div>').appendTo($body),
            appButtonMarkup = '<a class="ui-btn-right app-btn ui-btn ui-btn-icon-notext ui-shadow ui-corner-all"/>',
            actionButton = $('<a class="ui-btn ui-btn-a ui-btn-icon-notext app-btn-float app-btn-promo"/>').hide().appendTo($body).on('vclick', handleAppButtonClick)

        if (isLocalHost()) {
            _device = virtualDevice();
            screenChanged({ isVirtual: _device.width != null, width: _device.width, height: _device.height, toolbar: toolbar });
        }
        else
            screenChanged({ isVirtual: false, toolbar: toolbar });

        // iPhone 7
        //screenChanged({ isVirtual: true, width: 375, height: 667, toolbar: toolbar });

        // iPhone 7 Plus
        ///screenChanged({ isVirtual: true, width: 414, height: 736, toolbar: toolbar });

        // iPad Mini
        //screenChanged({ isVirtual: true, width: 768, height: 1024, toolbar: toolbar });

        // iPad Mini Landscape
        // screenChanged({ isVirtual: true, width: 1024, height: 768, toolbar: toolbar });

        /*, menuButton*/;
        // create page content
        $('<div data-role="content" class="app-content-main"></div>').appendTo(page);
        // tool bar configuration
        $('<span class="app-btn-menu-background"/>').appendTo(toolbar);//.insertBefore(menuButton);
        /*menuButton = */$('<a data-role="button" id="app-btn-menu" class="app-btn-menu ui-btn ui-btn-icon-notext ui-shadow ui-corner-all ui-icon-bars ui-btn-left"/>').appendTo(toolbar);
        $('<span class="app-back-text"/>').appendTo(toolbar);
        $('<span class="app-logo"/>').appendTo(toolbar);/*.on('vclick', function () {
            if (mobile._menuButton.is('.ui-icon-bars')) {
                mobile._menuButton.trigger('vclick');
                return false;
            }
        });*/
        $('<h1 class="ui-title"/>').appendTo(toolbar)/*.on('vclick', function () {
            if (mobile._menuButton.is('.ui-icon-bars')) {
                mobile._menuButton.trigger('vclick');
                return false;
            }
        })*/;
        var buttonsBar = $('<div class="app-btn-cluster-right"></div>').appendTo(toolbar);
        //toolbar.on('vclick', function (event) {
        //    if (isInTransition || $('.app-popup-message').length || event.clientX > toolbarHeader.offset().left || event.clientX < menuButton.offset().left + menuButton.outerWidth())
        //        return;
        //    //toolbarHeader.addClass('ui-btn-active');
        //    setTimeout(function () {
        //        //toolbarHeader.removeClass('ui-btn-active');
        //        if (getActivePageId() == 'taskassistant')
        //            history.go(-1);
        //        else
        //            taskAssistant();
        //    }, 200);
        //});

        //toolbar.on('vclick', handleToolbarClick);
        // app button 1
        $(appButtonMarkup).appendTo(buttonsBar);
        // app button 2
        $(appButtonMarkup).appendTo(buttonsBar);
        // app button 3
        $(appButtonMarkup).appendTo(buttonsBar);
        // app button 4
        $(appButtonMarkup).appendTo(buttonsBar);
        // app button 5
        $(appButtonMarkup).appendTo(buttonsBar);

        // context button
        $('<a id="app-btn-context" data-role="button" class="app-btn-context ui-btn-right ui-link ui-btn ui-icon-dots ui-btn-icon-notext ui-shadow ui-corner-all"/>').appendTo(buttonsBar).attr('title', labelMore).hide();

        toolbar.find('.app-btn').data('icon', 'gear').on('vclick', handleAppButtonClick);
    })();

    var mobile = _app.touch = _app.mobile = new Web.Mobile();
    mobile.activeLinkBlacklist = '.ui-slider-handle,.dv-action-see-all,.app-do-not-activate';
    mobile._presenters = {};

    mobile.calcWidth = calcWidth;
    mobile.createLayout = createLayout;
    mobile.prepareLayout = prepareLayout;

    $body/*.on('pagebeforeload', function (event, ui) {
        event.preventDefault();
        setTimeout(function () {
            location.replace(ui.toPage);
        }, 200);
    }).on('pagecontainershow', function (event, ui) {
        activeLink();
        transitionStatus(false);
        updateMenuButtonStatus();
        fetchOnDemand(100);
        setTimeout(function () {
            fetchEchos();
            showPresenters();
        }, 200);
        // transition has finished
        function executePageChangeCallback() {
            if (pageChangeCallback) {
                pageChangeCallback();
                pageChangeCallback = null;
                if (pageInfo && pageInfo.returnCallback) {
                    pageInfo.returnCallback();
                    pageInfo.returnCallback = null;
                }
            }
        }
        var pageInfo = mobile.pageInfo(),
            dataView,
            showEvent = $.Event('show.dataview.app');
        if (pageInfo) {
            if (pageInfo.initCallback) {
                pageInfo.initCallback();
                pageInfo.initCallback = null;
            }
            else
                executePageChangeCallback();
            showEvent.dataView = pageInfo.dataView;
        }
        else if (isMainPageActive())
            executePageChangeCallback();
        $(document).trigger(showEvent);
        if (settings)
            refreshContext(false, 0);
        else
            refreshContext();
        fitTabs();
        //fitEmbeddedEchos();
        syncEmbeddedViews();
        mobile.busy(false);
        if (!isInTransition) {
            if (pageInfo) {
                //pageInfo = mobile.pageInfo();
                if (pageInfo) {
                    dataView = pageInfo.dataView;
                    if (dataView && dataView._syncKey) {
                        dataView.sync(dataView._syncKey);
                        dataView._syncKey = null;
                        refreshContext();
                    }
                }
            }
            findActivePage('.app-echo').each(function () {
                var dataViewId = $(this).attr('data-for'),
                    dataView = _app.find(dataViewId);
                if (dataView._syncKey) {
                    dataView.sync(dataView._syncKey);
                    dataView._syncKey = null;
                    refreshContext();
                }
            });
        }
    })*/.on('pagecontainercreate', function (event) {
            mobile.start();
        }).on('pagecontainerbeforeshow', function (event, ui) {
            var activePage = findActivePage(),
                pageInfo = getPageInfo(),
                headerText = pageInfo ? pageInfo.headerText : mobile.title();
            if (headerText && typeof headerText !== 'string')
                headerText = headerText[0];
            if (headerText == false)
                headerText = '';
            mobile.toolbar(headerText);
            //if ($body.is('.app-page-header-hidden') || pageInfo && pageInfo.headerText == false)
            //    pageHeaderText(false);
            //else
            //    pageHeaderText(pageInfo && pageInfo.headerText || pageInfo && pageInfo.dataView && pageInfo.dataView.get_view().Label || document.title);
            displayPageHeader(pageInfo);
            mobile.pageShow(getActivePageId());
            mobile.unloadPage(ui.prevPage, activePage);
            userActivity();
            mobile.contextScope(null);
        }).on('pagecontainerbeforehide', function (e, ui) {
            // before transition begings
            _input.ignoreErrors = false;
            isInTransition = true;
            mobile.busy(true);
        }).on('pagecontainerbeforechange', function (e, ui) {
            //var info = (typeof ui.toPage == 'string') ? ui.toPage : $(ui.toPage).attr('id');
            if (typeof ui.toPage == 'string' && ui.toPage.match(/^http/)) {
                //transitionStatus(false);
                // Webkit navigates to the current page one more time after we add the page ID (hash) to a URL.
                // We need to prevent any futher navigation - the page is ready to be used. This is not happening in IE.
                if (_webkitSuppressPageChangeOnStart) {
                    _webkitSuppressPageChangeOnStart = false;
                    return false;
                }
            }
            //if (!ui.options.deferred)
            //    return;
            //var pageInfo = getPageInfo(),
            //    toPage = $(ui.toPage),
            //    toPageInfo = getPageInfo(toPage.attr('id')),
            //    dataView = toPageInfo && toPageInfo.dataView;

            // REVIEW: we may need to keep this
            //stickyHeaderBar(toPage).find('.app-bar-text, .app-bar-label').removeData();

            //if (toPageInfo && !ui.toPage.prevObject) {
            //}
            //else {
            //    var extension = dataView && dataView.extension();
            //    mobile.search('configure', { 'allow': extension ? extension.options().quickFind : false });
            //}
        }).on('pagecontainerbeforetransition', function (e, ui) {
            // Safari triggers double transition
            if (ui.toPage && ui.prevPage) {
                var toPageId = $(ui.toPage).attr('id'),
                    toPageInfo = getPageInfo(toPageId),
                    prevPage = $(ui.prevPage),
                    prevPageId = prevPage.attr('id'),
                    prevPageInfo = getPageInfo(prevPageId),
                    prevDataView = prevPageInfo && prevPageInfo.dataView,
                    odp = prevDataView && prevDataView.odp,
                    dismissAll, activeUrl;
                if (toPageId == prevPageId || toPageInfo && toPageInfo.deleted)
                    return false;
                if (prevDataView) {
                    dismissAll = prevDataView._dismissAll;
                    prevDataView._dismissAll = false;
                    if (ui.options.reverse && prevDataView.editing() && (!_input.cancel() || !prevDataView.changed('ignore'))) {
                        activeUrl = prevPage.attr('data-url');
                        setTimeout(function () {
                            goForwardTo(prevPageId);
                            _app.confirm(resourcesData.DiscardChanges, function () {
                                prevDataView.changed('ignore', true);
                                goBack();
                            }, function () {
                                _input.focus();
                            });
                        });

                        //setTimeout(function () {
                        //    $app.confirm(resourcesData.UnsavedChanges + ' ' + resourcesMobile.ConfirmContinue, function () {
                        //        prevDataView.changed('ignore', true);
                        //        goForwardTo(prevPageId);
                        //        setTimeout(function () {
                        //            if (dismissAll)
                        //                $('.app-page-modal-background').trigger('vclick');
                        //            else
                        //                goBack();
                        //        });
                        //    }, function () {
                        //        goForwardTo(prevPageId);
                        //    });
                        //});
                        e.preventDefault();
                        return false;
                    }
                }
            }
            hideTooltip();
            //enablePointerEvents(false);
            mobile.promo(false);
            saveScrolling(findActivePage());
            savePanelScrollTop(contextSidebar());
        }).on('pagecontainershow', function (e, ui) {
            if (findActivePage())
                restoreScrolling(findActivePage());
        }).on('pagecontainertransition', function (e, ui) {
            pageReady(ui);
        });

    function touchPoint(e) {
        var originalEvent = e.originalEvent,
            touch = originalEvent;
        //scrollable = findScrollable(),
        //isScrollable = scrollable.length > 0;
        if (touch.pageY == null)
            touch = originalEvent.touches[0] || originalEvent.changedTouches[0];
        return { x: touch.pageX, y: touch.pageY/*, isScrollable: isScrollable, scrollTop: isScrollable ? scrollable.scrollTop() : 0 */ };
    }

    //function pointerIsTouch(event) {
    //    if (event.type.match(/^(MS)?pointer/))
    //        return event.originalEvent.pointerType == 'touch';
    //    return true;
    //}

    var lastTouchedLink, lastTouchedLinkTimeout, startTouch, movementTestIsRequired;

    function clearLastTouchedLink() {
        clearTimeout(lastTouchedLinkTimeout);
        if (lastTouchedLink) {
            lastTouchedLink.data('touch-start', null);
            lastTouchedLink = null;
        }
    }

    // drag & drop handling

    _app.dragMan = dragMan = new function () {
        return this.prototype = {
            active: function () {
                return this._active == true;
            },
            call: function (method, event) {
                if (!event.drag) return;
                this._dragged = false;
                var that = this,
                    handler = this[event.drag.type],
                    methodImplementation = handler && handler[method],
                    drag = event.drag,
                    dragDataView,
                    dragTarget;
                clearTimeout(that._draggedTimeout);
                if (method == 'start') {
                    dragMan._keepTap = false;
                    that._active = true;
                    dragTarget = drag.target;
                    dragDataView = mobile.contextDataView(dragTarget);
                    drag.dataView = dragDataView;
                    if (handler && (!handler.options || handler.options.taphold != false))
                        that._tapholdTimeout = setTimeout(function () {
                            that._tapholdTimeout = null;
                            //$('.ui-btn-active').removeClass('ui-btn-active');
                            if (drag) {
                                if (drag.touch)
                                    $(document).one('vmouseup pointerup', function (event) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                        noTap();
                                    });

                                var taphold = $.Event('taphold.app', { drag: drag });
                                drag.target = dragTarget;
                                drag.dataView = dragDataView;
                                $(dragTarget).trigger(taphold);
                                dragEnd(taphold);
                            }
                        }, 750);
                }
                else if (!dragMan._keepTap) {
                    if (that._tapholdTimeout) {
                        clearTimeout(that._tapholdTimeout);
                        that._tapholdTimeout = null;
                    }
                }
                if (handler && methodImplementation && (!handler.options || (!handler.options.dataView || drag.dataView)))
                    handler[method](event.drag);
                if (method == 'end' || method == 'cancel') {
                    event.drag.dataView = null;
                    that._active = false;
                    enablePointerEvents(true);
                }
            },
            dragged: function (value) {
                var that = this;
                if (arguments.length) {
                    that._dragged = value;
                    if (value)
                        clearTimeout(that._draggedTimeout);
                    that._draggedTimeout = setTimeout(function () {
                        that._dragged = false;
                    }, 200);
                }
                return that._dragged == true;
            }
        }
    }();

    function dragEnd(event) {
        var eventType = event.type;
        if (dragEvent && (eventType == 'pointercancel' || eventType == 'touchcancel') && dragEvent.cancelable == false) {
            dragEvent.cancelable = false;
            return;
        }
        saveTouchPoint(event);
        if (dragEvent) {
            var dropped = dragEvent.moved && (dragEvent.originalX != dragEvent.x || dragEvent.originalY != dragEvent.y);
            if (dropped) {
                dragEvent.swipeLeft = dragEvent.originalX > dragEvent.x;
                dragEvent.swipeRight = dragEvent.originalX < dragEvent.x;
                dragEvent.swipeUp = dragEvent.originalY > dragEvent.y;
                dragEvent.swipeDown = dragEvent.originalY < dragEvent.y;
                dragEvent.swipeHorizontalDistance = Math.abs(dragEvent.originalX - dragEvent.x);
                dragEvent.swipeVerticalDistance = Math.abs(dragEvent.originalY - dragEvent.y);
            }
            if (event.type == 'touchcancel' || (/*event.type == 'pointermove' || */event.type == 'mousemove') && !dragEvent.moved)
                dragMan._keepTap = true;
            $(document).trigger($.Event(dropped ? 'dragend.app' : 'dragcancel.app', { drag: dragEvent }));
            if (dropped || event.type == 'taphold') {
                //event.preventDefault();
                //event.stopPropagation();
                dragMan.dragged(true); // always indicate drop to prevent default UI responses
            }
            else {
                if (dragEvent.dir == 'all' && event.type == 'touchend') {
                    _lastTouch = { x: dragEvent.x, y: dragEvent.y };
                    $(document.elementFromPoint(dragEvent.x, dragEvent.y)).trigger('vclick');
                }
            }
            dragEvent.target = null;
            dragEvent.data = null;
            dragEvent = null;
            //$.event.special.tap.setup();
        }
        if (pendingDragEvent) {
            dragEvent = pendingDragEvent;
            pendingDragEvent = null;
            dragEnd(event);
        }
        $(document).off('pointermove mousemove touchmove', dragMove).off('pointerup pointercancel mouseup touchend touchcancel', dragEnd);
    }

    function dragMove(event, force) {
        if (pendingDragEvent) {
            var p = touchPoint(event),
                deltaX = Math.abs(p.x - pendingDragEvent.x),
                deltaY = Math.abs(p.y - pendingDragEvent.y),
                isHorizontalDir = pendingDragEvent.dir == 'horizontal',
                handler;
            if (deltaX < 1 && deltaY < 1) {
                if (dragEvent)
                    dragEvent.moved = false;
                if (!force)
                    return;
            }
            if (isHorizontalDir) {
                handler = dragMan[pendingDragEvent.type];
                if (handler.canScroll && !handler.canScroll(pendingDragEvent.target, 'vertical'))
                    deltaY = 0;
            }
            if (pendingDragEvent.dir == 'all' || isHorizontalDir && deltaX > deltaY && deltaX > (pendingDragEvent.mouse ? 3 : (pendingDragEvent.pointer ? 5 : 1)) && deltaY < (pendingDragEvent.pointer && pendingDragEvent.touch ? 10 : 9)) {
                clearLastTouchedLink();
                //alert(deltaX + ', ' + deltaY);
                dragEvent = pendingDragEvent;
                if (event.type == 'touchmove' || event.type == 'pointermove') {
                    dragEvent.cancelable = false;
                    event.preventDefault();
                }
                pendingDragEvent = null;
                enablePointerEvents(false);
            }
            else {
                if (isHorizontalDir && (deltaX || deltaY))
                    clearLastTouchedLink();
                if (!isHorizontalDir || deltaY)
                    dragEnd(event);
            }
        }
        if (dragEvent) {
            event.preventDefault();
            clearHtmlSelection();
            var p = touchPoint(event);
            if (!dragEvent.moved) {
                dragEvent.moved = true;
                dragEvent.originalX = dragEvent.x;
                dragEvent.originalY = dragEvent.y;
            }
            if (dragEvent.x != p.x || dragEvent.y != p.y) {
                dragEvent.lastX = dragEvent.x;
                dragEvent.lastY = dragEvent.y;
                dragEvent.x = p.x;
                dragEvent.y = p.y;
                //if (event.type.match(/^(touch|pointer)/))
                //    _lastTouch = { x: p.x, y: p.y };

                dragEvent.dropTarget = event.type.match(/^touch|pointer/) ? document.elementFromPoint(p.x, p.y) : event.target;
                $(document).trigger($.Event('dragmove.app', { drag: dragEvent }));
            }
        }
    }

    $(document).on('mousedown pointerdown touchstart', '[data-draggable]', function (event) {
        saveTouchPoint(event);
        var eventType = event.type;
        if (eventType == 'mousedown' && event.which != 1 || pendingDragEvent || dragEvent)
            return;
        clearHtmlSelection();
        hideTooltip();
        var p = _lastTouch,
            target = $(this),
            dragType = target.attr('data-draggable'),
            handler = dragMan[dragType],
            pointerType = event.originalEvent.pointerType,
            handlerOptions = handler && handler.options;
        if (pointerType == 'mouse' && event.which == 3)
            return;
        // initialize the global pending drag event
        pendingDragEvent = {
            x: p.x,
            y: p.y,
            lastX: p.x,
            lastY: p.y,
            target: target,
            type: dragType,
            data: null,
            cancel: false,
            mouse: pointerType == 'mouse' || eventType == 'mousedown',
            pointer: !!eventType.match(/^pointer/),
            touch: pointerType == 'touch' || !!eventType.match(/^touch/),
            pen: pointerType == 'pen',
            tooltip: handlerOptions && handlerOptions.tooltip
        };
        $(document).trigger($.Event('dragstart.app', { drag: pendingDragEvent }));
        if (dragType != pendingDragEvent.type) {
            dragType = pendingDragEvent.type;
            handler = dragMan[dragType];
            handlerOptions = handler && handler.options;
        }
        if (pendingDragEvent.cancel)
            pendingDragEvent = null;
        else {
            if (/*(event.type == 'touchstart' || event.type == 'pointerdown') &&*/ (pendingDragEvent.dir == 'all' || handlerOptions && handlerOptions.immediate)) {
                event.preventDefault();
                if (handlerOptions && handlerOptions.immediate)
                    dragMove(event, true);
            }

            //$.event.special.swipe.eventInProgress = true;
            $(document).on('pointermove touchmove mousemove', dragMove).on('pointerup pointercancel touchend touchcancel mouseup', dragEnd);
            if (event.isDefaultPrevented())
                return false;
        }
    })/*.on('mousedown', function (event) {
        var draggable = $(event.target).closest('.app-draggable');
        if (draggable.length) {
            $.event.special.swipe.eventInProgress = true;
        }
    })*/.on('dragstart.app', function (event) {
            dragMan.call('start', event);
        }).on('dragmove.app', function (event) {
            dragMan.call('move', event);
        }).on('dragend.app', function (event) {
            dragMan.call('end', event);
        }).on('dragcancel.app', function (event) {
            dragMan.call('cancel', event);
        }).on('taphold.app', function (event) {
            dragMan.call('taphold', event);
        });

    function enablePointerEvents(enable) {
        if (!isTouchPointer)
            $body[0].style.pointerEvents = enable ? '' : 'none';
    }

    /* Dragging: hscrollbar */
    dragMan['hscrollbar'] = {
        options: {
            taphold: false,
            immediate: true
        },
        start: function (drag) {
            var that = this,
                scrollable = drag.target.parent().prev();
            if (scrollable.css('overflow-x') != 'auto')
                scrollable = scrollable.children().first();
            drag.dir = 'all';
            that._scrollable = scrollable;
            drag.target.parent().addClass('app-scrollbar-dragging');
            //enablePointerEvents(false);
            // calculations
            that._rect = drag.target.parent()[0].getBoundingClientRect();
            that._ratio = that._scrollable[0].offsetWidth / drag.target.width();
            that._offset = drag.x - drag.target.offset().left;
        },
        move: function (drag) {
            var that = this;
            that._scrollable.scrollLeft((drag.x - that._rect.left - that._offset) * that._ratio);

        },
        cancel: function (drag) {
            this.end(drag);
        },
        end: function (drag) {
            drag.target.parent().removeClass('app-scrollbar-dragging');
            drag.target.parent().prev().focus(); // set focus on the app-data-list
            //enablePointerEvents(true);
        }
    }

    /* Dragging: vscrollbar */
    dragMan['vscrollbar'] = {
        options: {
            taphold: false,
            immediate: true
        },
        start: function (drag) {
            drag.dir = 'all';
            this._scrollable = drag.target.parent().prev();
            drag.target.parent().addClass('app-scrollbar-dragging');
            //enablePointerEvents(false);
            // calculatations
            this._rect = drag.target.parent()[0].getBoundingClientRect();
            this._ratio = this._scrollable[0].scrollHeight / this._scrollable.height();
            this._offset = drag.y - drag.target.offset().top;
        },
        move: function (drag) {
            var that = this;
            that._scrollable.scrollTop((drag.y - that._rect.top - that._offset) * that._ratio);
        },
        cancel: function (drag) {
            this.end(drag);
        },
        end: function (drag) {
            drag.target.parent().removeClass('app-scrollbar-dragging');
            //findScrollable().focus();
            focusScrollable();
            //enablePointerEvents(true);
        }
    }

    /* Dragging: grid header */
    dragMan['grid-header'] = {
        options: {
            dataView: true
        },
        start: function (drag) {
            if (isTouchPointer) {
                // delegate dragging to the closest field separator
                var lastSeparator;
                drag.target.find('.app-field-separator').each(function () {
                    var separator = $(this),
                        offset = separator.offset(),
                        distance = drag.x - offset.left;
                    if (Math.abs(distance) <= 22)
                        lastSeparator = separator;
                });
                if (lastSeparator) {
                    drag.originalType = drag.type;
                    drag.type = 'grid-header-separator';
                    drag.target = lastSeparator;
                    dragMan['grid-header-separator'].start(drag);
                }
            }
        }
    }

    /* Dragging: grid header field */

    dragMan['grid-header-field'] = {
        options: {
            dataView: true
        },
        start: function (drag) {
            var target = drag.target,
                targetWidth,
                targetOffset = target.offset(),
                targetChanged;
            if (!drag.mouse) {
                // delegate dragging to the next or previous field seperator 
                targetWidth = target.width();
                if (targetWidth > scrollbarInfo.gridColumnPadding * 2)
                    if (targetOffset.left + targetWidth - scrollbarInfo.gridColumnPadding < drag.x) {
                        drag.target = target.next();
                        targetChanged = true;
                    }
                    else if (targetOffset.left + scrollbarInfo.gridColumnPadding > drag.x) {
                        if (target.prev().is('.app-field-separator')) {
                            drag.target = target.prev();
                            targetChanged = true;
                        }
                    }
            }
            if (targetChanged) {
                drag.originalType = drag.type;
                drag.type = 'grid-header-separator';
                dragMan['grid-header-separator'].start(drag);
            }
            else {
                drag.dir = drag.mouse ? 'all' : 'horizontal';
            }
        },
        move: function (drag) {
            var that = this,
                dataView = drag.dataView,
                dropTarget = that._lastDropTarget,
                dragLineGuide,
                dragLine = that._dragLine,
                dragLineXOffset = 0,
                scrollable, scrollableOffset,
                echo = findEcho(drag.target),
                lastDataItem,
                lineBottom,
                dataFieldValue, dropTargetClass,
                instantFeedback,
                autoScrollTolerance = isTouchPointer ? 30 : 20,
                firstDataItem, firstDataItemOffset, firstDataItemWidth, frozenWidth,
                mirror = that._mirror;
            firstDataItem = (echo.length ? echo : findActivePage('.app-grid')).find('.dv-item').first();
            firstDataItemOffset = firstDataItem.offset();
            frozenWidth = dataView.session('grid-frozen-width') || 0;
            // create a drag line if needed
            if (!that._dragLine) {
                scrollable = findScrollable();
                scrollableOffset = scrollable.offset();
                instantFeedback = true;
                dropTarget = that._lastDropTarget = drag.target;
                that._targetFieldName = dropTarget.attr('data-field-name');
                lastDataItem = echo.length ? echo.find('.dv-item').last() : null;
                lineBottom = _screen.height - (lastDataItem ? lastDataItem.offset().top + lastDataItem.outerHeight() : (scrollableOffset.top + scrollable.outerHeight()));
                dragLine = that._dragLine = $('<div class="app-drag-line"></div>').appendTo($body);
                dragLine.css({ 'top': dropTarget.offset().top, 'bottom': lineBottom });
                drag.target.css('color', dragLine.css('background-color'));
                dragMan['data-item']._scrollbar(drag, false);

                var leftSeparator = dropTarget.prevAll('.app-field-separator').first(),
                    rightSeparator = dropTarget.nextAll('.app-field-separator').first(),
                    mirrorLeft = leftSeparator.length ? (leftSeparator.offset().left + Math.ceil(leftSeparator.outerWidth() / 2)) : (dropTarget.offset().left - (!isTouchPointer ? 2 : scrollbarInfo.gridColumnPadding / 2)),
                    mirrorRight = rightSeparator.offset().left + Math.ceil(rightSeparator.outerWidth() / 2),
                    mirrorPaddingTop = dropTarget.css('padding-top'),
                    mirrorPaddingBottom = dropTarget.css('padding-bottom');
                mirror = that._mirror = $('<span class="app-drag-header-field"/>').appendTo($body).css({
                    //left: mirrorLeft, top: dropTarget.offset().top,
                    'font-size': dropTarget.css('font-size'), paddingLeft: scrollbarInfo.gridColumnPadding / 2, paddingRight: scrollbarInfo.gridColumnPadding / 2,
                    paddingTop: mirrorPaddingTop, paddingBottom: mirrorPaddingBottom, textAlign: dropTarget.css('text-align')
                })
                    .width(mirrorRight - mirrorLeft - scrollbarInfo.gridColumnPadding)
                    .height(dropTarget.closest('.app-grid-header').height() - parseCss(mirrorPaddingTop) - parseCss(mirrorPaddingBottom)).text(dropTarget.text());
                that._mirrorDispX = drag.x - mirrorLeft;
                that._mirrorDispY = drag.y - dropTarget.offset().top + (drag.mouse ? 0 : dropTarget.outerHeight());
                that._mirrorWidth = mirror.outerWidth();
            }
            // find the the drop target
            firstDataItem.find('.app-field').each(function () {
                var fieldValue = $(this),
                    offset = fieldValue.offset();
                if (fieldValue.is('.app-frozen') || offset.left > firstDataItemOffset.left + frozenWidth)
                    if (drag.x >= offset.left - scrollbarInfo.gridColumnPadding / 2 && drag.x < offset.left + fieldValue.width() + scrollbarInfo.gridColumnPadding / 2)
                        dataFieldValue = fieldValue;
            });
            if (dataFieldValue) {
                dropTargetClass = dataFieldValue.attr('class').match(/\bapp-field-([\w\_]+)\b/i);
                if (dropTargetClass) {
                    dropTarget = dataFieldValue;
                    that._targetFieldName = dropTargetClass[1]
                }
            }
            that._lastDropTarget = dropTarget;
            // move the drag line
            dragLineGuide = dropTarget.prev();
            if (dragLineGuide.is('.app-field-separator'))
                dragLineXOffset = Math.ceil(dragLineGuide.outerWidth(true) / 2) + 2;
            else {
                dragLineGuide = dropTarget;
                dragLineXOffset = -scrollbarInfo.gridColumnPadding / 2;
            }

            if (dragLineGuide.length)
                dragLine.css({ transform: 'translate3d(' + (dragLineGuide.offset().left + dragLineXOffset) + 'px,0,0)', transition: instantFeedback || drag.instantFeedback ? '' : 'transform 160ms ease-out' });

            //that._mirror.css({ transform: 'translate3d(' + (drag.x - that._mirrorDispX) + 'px,' + (drag.y - that._mirrorDispY) + 'px,0)' });
            that._mirror.css({ left: drag.x - that._mirrorDispX, top: drag.y - that._mirrorDispY });

            drag.instantFeedback = false;
            clearTimeout(that._gridScrollTimeout);

            firstDataItemWidth = firstDataItem.width();

            //document.title = firstDataItemOffset.left + firstDataItemWidth - (drag.x - that._mirrorDispX + that._mirrorWidth - 1);

            if (firstDataItemOffset.left + firstDataItemWidth - (drag.x - that._mirrorDispX + that._mirrorWidth - 1) <= autoScrollTolerance || (drag.x - that._mirrorDispX) - (firstDataItemOffset.left + frozenWidth) <= autoScrollTolerance)
                that._gridScrollTimeout = setTimeout(function () {
                    var availWidth = dataView.session('grid-avail-width'),
                        maxScroll = Math.ceil(availWidth - availWidth * (firstDataItem.width() / availWidth)),
                        scrollLeft = dataView.session('scroll-left') || 0,
                        x = drag.x - that._mirrorDispX,
                        x2 = x + mirror.outerWidth() - 1,
                        leftEdgeProximity = x - (firstDataItemOffset.left + frozenWidth),
                        doScroll;
                    if (scrollLeft < maxScroll && firstDataItemOffset.left + firstDataItemWidth - x2 <= autoScrollTolerance) {
                        scrollLeft = Math.min(scrollLeft + 32, maxScroll);
                        doScroll = true;
                    }
                    else if (scrollLeft > 0 && leftEdgeProximity > 0 && leftEdgeProximity <= autoScrollTolerance) {
                        scrollLeft = Math.max(scrollLeft - 32, 0);
                        doScroll = true;
                    }
                    else
                        clearTimeout(that._gridScrollTimeout);
                    if (doScroll) {
                        dataView.session('scroll-left', scrollLeft);
                        gridScrollStyle(dataView, -scrollLeft, false);//, false, true);
                        drag.instantFeedback = true;
                        drag.dropTarget = document.elementFromPoint(lastTouchX(), lastTouchY())
                        that.move(drag);
                    }
                }, 100);
        },
        end: function (drag) {
            var that = this,
                dataView = drag.dataView,
                allFields = dataView._allFields,
                gs = dataView.gridSettings(),
                sequence = gs.sequence,
                fieldName = drag.target.attr('data-field-name'),
                fieldIndex,
                beforeFieldName = that._targetFieldName;
            fieldName = allFields[dataView.findFieldUnderAlias(fieldName).Index].Name;
            beforeFieldName = allFields[dataView.findFieldUnderAlias(beforeFieldName).Index].Name;
            if (!sequence.length)
                $(dataView._fields).each(function () {
                    sequence.push(this.Name);
                });
            sequence.splice(sequence.indexOf(fieldName), 1);
            sequence.splice(sequence.indexOf(beforeFieldName), 0, fieldName);
            this._removeDragState(drag);
            dataView.gridChanged();
        },
        cancel: function (drag) {
            this._removeDragState(drag);
        },
        taphold: function (drag) {
            showFieldContext(drag.target, { x: drag.x, samples: false, hide: true });
        },
        _removeDragState: function (drag) {
            var that = this;
            clearTimeout(that._gridScrollTimeout);
            drag.target.css('color', '');
            that._lastDropTarget = null;
            if (that._dragLine) {
                // remove drag line
                that._dragLine.remove();
                that._dragLine = null;
                // remove mirror
                that._mirror.remove();
                that._mirror = null;
            }
            dragMan['data-item']._scrollbar(drag, true);
        }
    }

    /* Dragging: grid header separator */

    dragMan['grid-header-separator'] = {
        options: {
            dataView: true,
            taphold: false,
            immediate: true
        },
        start: function (drag) {
            var that = this,
                scrollable = findScrollable(),
                columnHeader = drag.target.prevAll('[data-field-name]').first(),
                echo = findEcho(columnHeader),
                lastDataItem = echo.length ? echo.find('.dv-item').last() : null,
                lineBottom = _screen.height - (lastDataItem ? lastDataItem.offset().top + lastDataItem.outerHeight() : (scrollable.offset().top + scrollable.outerHeight()));
            that._columnHeader = columnHeader;
            that._left = Math.ceil(columnHeader.offset().left);
            that._minRight = that._left + displayDensity() /* fieldToMinWidth(field) */ + drag.target.outerWidth() + 2;
            if (columnHeader.next().is('.app-btn-more'))
                that._minRight += columnHeader.next().outerWidth();
            that._maxRight = that._left + (columnHeader.closest('.app-bar-heading').length ? findScrollable() : columnHeader.closest('.app-grid')).width() * .75;

            that._dragLine = $('<div class="app-drag-line"></div>').appendTo($body)
                .css({ 'transform': 'translate3d(' + (drag.target.offset().left + Math.floor(drag.target.outerWidth() / 2)) + 'px,0,0)', 'top': drag.target.offset().top, 'bottom': lineBottom });
            that._leftLine = $('<div class="app-drag-line"></div>').appendTo($body)
                .css({ 'left': that._left - Math.ceil(scrollbarInfo.gridColumnPadding / 2), 'top': columnHeader.offset().top, 'bottom': lineBottom });
            columnHeader.css('color', that._dragLine.css('background-color'));
            drag.dir = drag.mouse ? 'all' : 'horizontal';

        },
        move: function (drag) {
            var that = this,
                x = drag.x;
            if (x < that._minRight)
                x = that._minRight;
            if (x > that._maxRight)
                x = that._maxRight;
            that._right = x;
            //that._dragLine.css('left', x);
            that._dragLine.css('transform', 'translate3d(' + x + 'px,0,0)');
        },
        end: function (drag) {
            var that = this,
                dragLine = that._dragLine,
                w = that._right - that._left - drag.target.outerWidth() - 2,
                dataView = drag.dataView,
                settings = dataView.gridSettings(),// dataView.viewProp('gridColumns'),
                columnHeader = that._columnHeader,
                field = dataView.findField(columnHeader.attr('data-field-name'));
            if (columnHeader.next().is('.app-btn-more'))
                w -= columnHeader.next().outerWidth();
            if (!settings.width[field.Name])
                columnHeader.parent('.app-grid-header').find('[data-field-name]').each(function () {
                    var c = $(this),
                        w = c.width();
                    settings.width[c.attr('data-field-name')] = w;
                });
            settings.width[field.Name] = w;
            //dataView.viewProp('gridColumns', settings);
            dataView.gridSettings(settings);
            dragMan.dragged(true);
            that._removeLine(drag);
            // change UI
            dataGridIsFitted(dataView, false, true);
            dataView.gridChanged();
        },
        cancel: function (drag) {
            this._removeLine(drag);
        },
        _removeLine: function (drag) {
            var that = this;
            drag.target.prevAll('[data-field-name]').first().css('color', '');
            that._dragLine.remove();
            that._leftLine.remove();
            that._columnHeader = null;
        },
        canScroll: function () {
            return false;
        }
    }

    /* Dragging: dismissable screen blocks */

    dragMan['dismiss'] = {
        start: function (drag) {
            drag.dir = 'all';
        },
        move: function (drag) {
        },
        end: function (drag) {
            this.cancel(drag);
        },
        cancel: function (drag) {
            drag.target.trigger('vclick');
        }
    }

    /* Dragging: panels */

    dragMan['panel'] = {
        start: function (drag) {
            var that = this;
            that._position = drag.target.is('.ui-panel-position-right') ? 'right' : 'left';
            drag.dir = 'horizontal';
            that._lastX = that._x = drag.x;
            that._time = +new Date();
        },
        move: function (drag) {
            var that = this,
                panel = drag.target,
                dir = that._dir,
                displacement = drag.x - that._x;
            if (!that._dir) {
                dir = that._dir = panel.is('.ui-panel-position-right') ? 'right' : 'left';
                dir == 'right' ? panel.offset().left : panel.outerWidth();
                panel.css({ position: 'absolute' }); // ensures smooth "linear" movement on iOS
                that._animated = panel.is('.ui-panel-animate');
            }
            that._displacement = displacement;
            that._movedBy = drag.x - drag.lastX;
            if (dir == 'right')
                panel.css({ right: (isVirtualScreen() ? _screen.right : 0) + Math.min(0, -that._displacement) })
            else
                panel.css({ left: (isVirtualScreen() ? _screen.left : 0) + Math.min(0, that._displacement) })
            that._lastX = drag.x;
        },
        end: function (drag) {
            var that = this,
                displacement = that._displacement,
                panel = drag.target,
                width = panel.outerWidth(),
                swipeAwayDir = that._dir,
                swipeAwayDisplacement = isTouchPointer ? 30 : 10,
                isSwipeAwayDuration = +new Date() - that._time <= 250,
                doClose;

            function transitionEndCallback() {
                if (doClose)
                    panel.css('visibility', 'hidden').panel('close', true);
                else
                    panel.css({ transform: 'none', transition: 'transform 0 linear', right: swipeAwayDir == 'right' ? 0 : '', left: swipeAwayDir == 'left' ? 0 : '' });
                that._done(panel);
            }

            if (swipeAwayDir == 'right') {
                if (parseCss(panel, 'right') == 0)
                    that._done(panel);
                else {
                    doClose = that._movedBy >= 0 && ((isSwipeAwayDuration && displacement >= swipeAwayDisplacement) || Math.abs(displacement) >= width * .5);
                    panel.css({ transition: 'transform 300ms ease', transform: 'translate3d(' + (doClose ? width - displacement : -displacement) + 'px,0,0)' })
                        .removeClass('ui-panel-animate').one('transitionend', transitionEndCallback);
                }
            }
            else {
                if (parseCss(panel, 'left') == 0)
                    that._done(panel);
                else {
                    doClose = that._movedBy < 1 && ((isSwipeAwayDuration && -displacement >= swipeAwayDisplacement) || Math.abs(width + displacement) <= width * .5);
                    //alert(that._movedBy + ', ' + width + ', ' + displacement + ', ' + doClose);
                    panel.css({ transition: 'transform 300ms ease', transform: 'translate3d(' + (doClose ? -(width + displacement) : -displacement) + 'px,0,0)' })
                        .removeClass('ui-panel-animate').one('transitionend', transitionEndCallback);
                }
            }
        },
        cancel: function (drag) {
            this._done(drag.target);
        },
        _done: function (panel) {
            var that = this;
            that._dir = null;
            panel.css({
                position: '', transition: '', transform: '',
                left: isVirtualScreen() ? (that._position == 'left' ? _screen.left : '') : '',
                right: isVirtualScreen() ? (that._position == 'right' ? _screen.right : '') : ''
            });
            if (that._animated)
                setTimeout(function () {
                    panel.addClass('ui-panel-animate');
                }, 100);
        },
        canScroll: function (target, direction) {
            return direction == 'vertical' ? target.height() < target[0].scrollHeight : true;
        }
    }

    /* Dragging: grid row */

    dragMan['data-item'] = {
        options: {
            dataView: true
        },
        start: function (drag) {
            var that = this,
                dataView = drag.dataView,
                viewStyle = dataView.extension().viewStyle(),
                listview = drag.target.closest('.app-listview'),
                gridWidth = dataView.session('grid-avail-width'),
                width = listview.width(),
                checkBox,
                scale, maxScroll;
            if (viewStyle == 'Grid' && gridWidth > width) {
                if (dataView.multiSelect()) {
                    checkBox = drag.target.closest('.ui-btn').find('.app-btn-check');
                    if (checkBox.length && drag.x < checkBox.offset().left + checkBox.outerWidth() + 8)
                        return;
                };
                scale = width / gridWidth;
                maxScroll = Math.ceil(gridWidth - gridWidth * scale);
                that._maxScroll = maxScroll;
                that._originalX = drag.x;
                that._lastX = drag.x;
                that._listViewWidth = width;
                that._scrollLeft = dataView.session('scroll-left') || 0;
                drag.dir = 'horizontal';
                that._minScroll = parseCss($('span.' + classNameOfFirstScrollableColumnInGrid(dataView)), 'margin-left') + that._scrollLeft;
                dataView.session('scroll-left-margin', that._minScroll);

            }
            //else
            //    drag.cancel = true;
        },
        move: function (drag) {
            var that = this,
                dataView = drag.dataView,
                delta,
                scrollLeft = that._scrollLeft;
            that._scrollbar(drag);
            delta = Math.ceil(that._originalX - drag.x);
            scrollLeft += delta;
            if (scrollLeft < 0) {
                scrollLeft = 0;
                that._originalX = drag.x;
                that._scrollLeft = scrollLeft;
            }
            else if (scrollLeft > that._maxScroll) {
                scrollLeft = that._maxScroll;
                that._originalX = drag.x;
                that._scrollLeft = scrollLeft;
            }
            drag.time = +new Date();
            dataView.session('scroll-left', scrollLeft);
            gridScrollStyle(dataView, -scrollLeft, true);
        },
        end: function (drag) {
            this._stopAnimation(drag);

            var scrollLeft = this._scrollLeft,
                s1 = +new Date(),
                s0 = drag.time,
                sd = (s1 - s0) * 100, // seconds
                vd = drag.x - drag.lastX; // diff of pixels
            if (sd > 0 && Math.abs(vd) > 5) {
                var left = vd < 0 ? 1 : -1,
                    newScrollLeft = scrollLeft + this._listViewWidth * left,
                    diff = 0;
                // clamp to visible screen
                if (newScrollLeft < this._minScroll)
                    newScrollLeft = 0;
                else if (newScrollLeft > this._maxScroll)
                    newScrollLeft = this._maxScroll;
                drag.dataView.session('scroll-left', newScrollLeft);
                gridScrollStyle(drag.dataView, -newScrollLeft, false, true);
            }

        },
        cancel: function (drag) {
            this._stopAnimation(drag);
        },
        taphold: function (drag) {
            if (drag.target.is('.app-btn-more'))
                drag.target.trigger('vclick');
            else
                drag.target.trigger('contextmenu');
        },
        _stopAnimation: function (drag) {
            if (dragMan.scrollingAnimationFrame != null) {
                cancelAnimationFrame(dragMan.scrollingAnimationFrame);
                dragMan.scrollingAnimationFrame = null;
            }
            this._scrollbar(drag, true);
        },
        _scrollbar: function (drag, enable) {
            if (enable) {
                if (drag.hscrollbar) {
                    restoreGridScrolling(drag.hscrollbar.parent().parent());
                    drag.hscrollbar = null;
                }
            }
            else if (!drag.scrollbarHandled) {
                drag.scrollbarHandled = true;
                if (scrollbarInfo.height > 0) {
                    if (findEcho(drag.target).length)
                        drag.hscrollbar = drag.target.closest('.app-grid').find('.app-hscrollbar-inner');
                    else
                        drag.hscrollbar = findActivePage('.app-bar-hscrollbar .app-hscrollbar-inner');
                    drag.hscrollbar.width(1).parent().data('ignore-scrolling', true);
                    setTimeout(function () {
                        if (drag.hscrollbar)
                            drag.hscrollbar.parent().removeData('ignore-scrolling', true)
                    }, 100);
                }
            }
        }
    }

    // document event handlers

    $(document).ready(function () {
        settings = __settings;
        mobile.initialize();
    }).on('dragend', function (event) {
        // allow swiping after drag operations on "app-draggable" elements
        $.event.special.swipe.eventInProgress = false;
    })/*.on('calculate.app', function (event, causedBy) {
        causedBy = causedBy.split(/\./);
        if (causedBy[causedBy.length - 1] == 'app') {
            var dataView = mobile.pageInfo(causedBy[1]).dataView;
            dataView.extension().calculate(causedBy[0]);
            return false;
        }
    })*/.on('mousedown', function (e) {
            saveTouchPoint(e);
        }).on('touchstart pointerdown', function (e) {
            saveTouchPoint(e);
            if ($(e.target).is(':input'))
                return;
            //if (!pointerIsTouch(event))
            //    return;
            if (isInTransition) {
                e.preventDefault();
                return;
            }

            var target = $(e.target),
                link = target.closest('a,.app-feedback'),
                touch = startTouch = touchPoint(e);

            movementTestIsRequired = !_lastTouch.isScrollable;


            if (link.length) {
                lastTouchedLink = link.data('touch-start', touch);
                if (!link.is(mobile.activeLinkBlacklist))
                    if (link.parent().is('li')) {
                        //if (!isTouchPointer)
                        //    activeLink(link, false);
                        clearTimeout(lastTouchedLinkTimeout);
                        lastTouchedLinkTimeout = setTimeout(function () {
                            if (lastTouchedLink)
                                activeLink(lastTouchedLink, false);
                        }, 250);
                    }
                    else if (isTouchPointer)
                        activeLink(link, false);
            }
        }).on('touchmove pointermove', function (event) {
            //if (!pointerIsTouch(event))
            //    return;
            var clearAndPreventDefault,
                target = $(event.target),
                link = $(lastTouchedLink),
                scrollable = target.closest('.ui-panel-inner,.app-wrapper'),
                touch = touchPoint(event),
                start = link.length && link.data('touch-start'),
                scrollInfo;

            if (iOS && !link.length && target.closest('.app-bar-toolbar').length/* && !target.closest('.ui-btn').length*/) {
                event.preventDefault();
                return;
            }

            if (target.is('.ui-panel-dismiss,.ui-popup-screen,.app-scrollable-cover')) {
                event.preventDefault();
                return;
            }

            if (movementTestIsRequired) {
                movementTestIsRequired = false;
                if (scrollable.length) {
                    if (touch.y > startTouch.y)
                        clearAndPreventDefault = scrollable.scrollTop() == 0;
                    else if (touch.y < startTouch.y) {
                        scrollInfo = getScrollInfo(scrollable);
                        clearAndPreventDefault = scrollInfo.height >= scrollInfo.maxHeight - 1;
                    }
                }
                if (clearAndPreventDefault) {
                    clearLastTouchedLink();
                    activeLink();
                    event.preventDefault();
                    if (iOS)
                        touchScrolling = false;
                    return;
                }
            }
            if (link.length) {
                if (start && (start.scrollTop != touch.scrollTop || Math.abs(start.x - touch.x) > 0 || Math.abs(start.y - touch.y) > 0))
                    activeLink();
                clearLastTouchedLink();
            }
        }).on('touchend pointerup', function (e) {
            saveTouchPoint(e);
            //if (!pointerIsTouch(event))
            //    return;

            //var link = $(e.target).closest('a'),
            //    touch = touchPoint(e),
            //    start = link.length && link.data('touch-start');
            //if (link.length) {
            //    if (!start || (start.scrollTop != touch.scrollTop || Math.abs(start.x - touch.x) > 0 || Math.abs(start.y - touch.y) > 0))
            //        e.preventDefault();
            //}
            clearLastTouchedLink();
        }).on('touchcancel pointercancel', function (event) {
            //var touch = touchPoint(event);
            //alert(String.format('{0},{1} - {2}, {3} {4}', startTouch.x, startTouch.y, touch.x, touch.y, event.type));
            //if (!pointerIsTouch(event))
            //    return;
            activeLink();
            clearLastTouchedLink();
        }).on('scrollstart.app', function (event) {
            userActivity();
            _input.methods.lookup._hidePopup();
        }).on('scrolldir.app scrollstop.app', function (event) {
            if (!event.relatedTarget)
                return;

            // identify top group if any
            var scrollable = $(event.relatedTarget),
                visibleLists = scrollable.find('> .app-listview').filter(':visible'),
                groupList = visibleLists.find('.app-group'),
                dvHeading, scrollableTop, topVisibleGroup, newGroupHtml;
            if (groupList.length) {
                dvHeading = stickyHeaderTemplate(findPage(scrollable));
                if (dvHeading.length) {
                    group = dvHeading.find('.app-group');
                    if (!group.length) {
                        group = $('<div class="app-group"></div>').appendTo(dvHeading);
                        if ($(groupList[0]).is('.app-group-fixed'))
                            group.addClass('app-group-fixed');
                    }
                    scrollableTop = scrollable.offset().top + stickyHeaderBar(scrollable).outerHeight(true);
                    groupList.each(function () {
                        var g = $(this);
                        if (g.offset().top + g.outerHeight(true) / 2 > scrollableTop)
                            return false;
                        topVisibleGroup = g;
                    });
                    newGroupHtml = (topVisibleGroup || $(groupList[0])).html();
                    if (newGroupHtml != group.html()) {
                        group.html(newGroupHtml);
                        stickyHeaderBar(scrollable).find('.app-group').html(newGroupHtml);
                    }
                }
            }

            // show/hide heading on demand
            var
                scrollDir = scrollable.data('scroll-dir'),
                visibleGrids = visibleLists.filter('.app-grid'),
                fixedGroups = visibleLists.find('.app-group-fixed').first(),
                alwaysShowHeading = visibleGrids.length > 0 || fixedGroups.length,
                header = scrollable.data('sticky-header'),//  stickyHeaderBar(scrollable),
                gridDesc = alwaysShowHeading ? header.find('.app-view-instruction,.app-group:not(.app-group-fixed)') : null,
                gridDescParent = gridDesc && gridDesc.parent();
            if (scrollDir == 'up') {
                if (alwaysShowHeading && gridDesc.length && !gridDesc.is(':visible'))
                    gridDesc/*.show()*/.removeClass('app-hidden');
                //header.find('.app-bar-text-instruction-hidden').removeClass('app-bar-text-instruction-hidden');
                revealStickyHeaderInstruction(header);
                stickyHeader(scrollable);
            }
            else if (scrollDir == 'down' || !scrollDir && alwaysShowHeading) {
                if (alwaysShowHeading) {
                    //if (gridDesc.length) {
                    //    gridDesc/*.hide()*/.addClass('app-hidden');
                    //    gridDescParent.addClass('app-bar-text-instruction-hidden');
                    //}
                    //else
                    //    gridDescParent.removeClass('app-bar-text-instruction-hidden');
                    gridDesc.addClass('app-hidden');
                    gridDescParent.addClass('app-bar-text-instruction-hidden');
                    _window._stickyHeaderHideInstruction = true;
                    stickyHeader(scrollable);
                }
                else if (header)
                    header.hide();
            }

            // handle scroll stop
            if (event.type == 'scrollstop') {
                _input.restoreLastPopup();
                clearInterval(scrollStopTimeout);
                scrollStopTimeout = setTimeout(function (relatedTarget) {
                    var scrollInfo = getScrollInfo(relatedTarget)
                    if (scrollInfo.top <= 0 && scrollInfo.height <= scrollInfo.maxHeight + 1) {
                        fetchOnDemand();
                        fetchEchos(null, null, scrollable.find('.app-echo'));
                    }
                }, 250, scrollable);
            }
        }).on('contextmenu MSHoldVisual selectstart', function (event) {
            if (isTouchPointer && !($(event.target).is(':input')) || isInTransition) {
                event.preventDefault();
            }
            else if (event.type == 'contextmenu') {
                var target = $(event.target);
                if (target.is('.ui-popup-screen')) {
                    var activePopupListView = $('.ui-popup-active .ui-popup.app-popup-listview'),
                        p,
                        elem;
                    if (activePopupListView.length) {
                        closePopupWithoutTransition(activePopupListView);
                        event.preventDefault();
                        p = touchPoint(event);
                        elem = document.elementFromPoint(p.x, p.y);
                        setTimeout(function () {
                            var target = $(elem);
                            target.trigger(target.closest('.app-control-helper').length ? 'vclick' : 'contextmenu');
                        }, 75);
                    }
                }
                else if (target.closest('.ui-popup').length)
                    event.preventDefault();
                else if (target.is('.app-has-children')) {
                    event.preventDefault();
                    setTimeout(function () {
                        target.trigger('vclick');
                    }, 50);
                }
            }
            else if (event.type == 'MSHoldVisual')
                event.preventDefault();
        })/*.on('selectstart', function (event) {
        if (!isDesktop() && !($(event.target).is(':input')))
            event.preventDefault();
    })*/.one('pagecreate', '#Main', function () {
            mobile._pageCreated = true;
        }).on('vclick', 'a', handleLinkClick
        ).on('vclick', '.app-input-value', function (event) {
            $(event.target).prev().focus();
            return false;
        }).on('vclick', '.app-btn-toggle', handleToggleClick)
        .on('vclick', '.app-filter', function (event) {
            var echo = findEcho(event.target);
            if (echo.length)
                mobile.contextScope(echo.attr('data-for'));
            configureFilter({ mode: 'everything' });
            return false;
        }).on('vclick', '[data-href]', function () {
            var target = $(this),
                hyperlink = target.attr('data-href'),
                focusTarget = target.closest('.app-field');
            if (target.is('.app-control-inner') && target.parent().attr('data-input') != 'none') return;
            focusTarget.addClass('app-selected');
            setTimeout(function () {
                focusTarget.removeClass('app-selected');
                openHref(hyperlink);
            }, feedbackDelay);
            return false;
        }).on('vclick contextmenu', '.app-grid-header', function (event) {
            //  > span:not(.app-btn-more)
            if (dragMan.dragged() || skipTap) {
                event.preventDefault();
                event.stopPropagation();
                return;
            }
            clearHtmlSelection();
            var target = $(event.target),
                options = { x: event.pageX, y: null };
            if (target.is('.app-btn-more')) return;
            if (target.is('.app-icon,.app-grid-header-text'))
                target = target.parent();
            if (isMultiSelectCheckBoxClick(event))
                toggleSelectedRows(uiElementToDataView(target));
            else {
                if (!target.attr('data-field-name')) {
                    $(this).find('span').each(function () {
                        var elem = $(this),
                            x = elem.offset().left;
                        if (!elem.is('.app-btn-check,.app-btn-more,.app-frozen-spacer') && x <= event.pageX && event.pageX < x + elem.outerWidth(true)) {
                            target = elem;
                            return false;
                        }
                    });
                }
                if (target.is('.app-frozen-spacer'))
                    target = target.next();
                if (target.is('span') && !target.is('.app-btn-check,.app-field-separator')) {
                    target.addClass('ui-btn-active');
                    if (options.x)
                        options.y = target.offset().top + target.outerHeight() * .75;
                    if (event.type == 'contextmenu' || event.type == 'vclick' && event.ctrlKey) {
                        options.samples = false;
                        //options.hide = true;
                    }
                    event.preventDefault();
                    setTimeout(function () {
                        target.removeClass('ui-btn-active');
                        showFieldContext(target, options);
                    }, feedbackDelay);
                }
            }
            return false;
        }).on('vclick contextmenu', '.app-bar-heading', function (e) {
            var target = $(e.target);
            if (target.closest('.app-group').length && !target.is('.app-group')) {
                configureGroupBy(true);
                return false;
            }
        })/*.on('keydown keypress', function (event) {
        var target = $(event.target),
            toolbar = mobile._toolbar,
            isKeyDown = event.type == 'keydown',
            text, key = event.key, keyCode = event.keyCode,
            searchButton, searchInput,
            isF3 = isKeyDown && (keyCode == 114 || keyCode == 70 && event.ctrlKey),
            isEsc = isKeyDown && keyCode == 27,
            scrollable, scrollableTop, scrollableBottom,
            dataView;

        if (isKeyDown && !(isEsc || isF3))
            return;

        if (findActivePage()[0].className.match(/\bapp-page-modal\b/))
            return;

        if (!target.is('#app-input-search')) {
            text = String.fromCharCode(event.which);
            if (text.match(/[\w\-\"]/) || isEsc || isF3) {
                if (advancedSearchPageIsActive() && !_pendingQueryText) {
                    if (isF3) {
                        setTimeout(function () {
                            switchToQuickFind(mobile._contextButton);
                        });
                        return false;
                    }
                    if (isEsc && !$body.find('.ui-popup-active').length) {
                        clickMenuButton();
                        return false;
                    }
                }
                else if (getActivePageId() == 'taskassistant' && isEsc) {
                    clickMenuButton();
                    return false;
                }

                if (!searchButton) {
                    searchButton = toolbar.find('.ui-icon-search:visible');
                    dataView = mobile.dataView();
                }
                if (searchButton.length) {

                    if (isEsc) {
                        if (dataView && dataView.extension().quickFind()) {
                            quickFind(dataView, '');
                            resetInstruction(dataView);
                            higlightButton(searchButton);
                        }
                        else
                            return false;
                    }
                    else if (isF3) {
                        searchButton.trigger('vclick', false);
                        higlightButton(searchButton);
                    }
                    else if (event.type == 'keypress') {
                        if (advancedSearchPageIsActive())
                            return;
                        if (_pendingQueryText != null)
                            text = _pendingQueryText + text;
                        _pendingQueryText = text;
                        if (_pendingQueryText.length == 1) {
                            searchButton.trigger('vclick', false);
                            higlightButton(searchButton);
                        }
                    }
                    return false;
                }
            }
        }
        if (isF3)
            return false;
    })*//*.on('dblclick', '[data-field-name]+[data-draggable]', function () {
        // TODO: consider auto-sizing columns to content in future released
    }).on('editorstart.app', editorStart
        ).on('editorstop.app', editorStop
        )*/;

    // window event handlers

    function fitSummaryToolbars(container) {
        if (container) {
            container.find('[data-control="dataview"]').each(function () {
                var controlId = $(this).attr('id'), pageInfo, echo;
                if (controlId) {
                    pageInfo = getPageInfo(controlId.substring(0, controlId.length - 3)),
                        echo = $('#' + pageInfo.id + '_echo');
                    if (echo.is(':visible') && pageInfo.echoId && !pageInfo.dataView._busy())
                        refreshEchoToolbar(pageInfo.dataView, echo);
                }
            });
        }
        else
            findActivePage('.app-echo-toolbar').each(function () {
                echo = $(this).parent();
                if (echo.is(':visible')) {
                    pageId = echo.attr('data-for');
                    pageInfo = getPageInfo(pageId);
                    if (pageInfo.echoId && !pageInfo.dataView._busy())
                        refreshEchoToolbar(pageInfo.dataView, echo);
                }
            });
    }

    var resizeStarted;

    function startedToResize() {
        if (!resizeStarted) {
            resizeStarted = true;
            hideMenuStrip();
            hideTooltip();
            _input.methods.lookup._hidePopup();
            if (findModalRoot().length)
                mobile.promo(false);
            //$('.app-echo-controls,.app-bar-controls').hide();
            //$('.app-tabs.ui-header-fixed ul').css('visibility', 'hidden');
            $(document).trigger('resizing.app');
            //mobile._toolbarButtons.hide();
        }
    }

    function calcPageMinWidth(page) {
        if (!page)
            page = findActivePage();
        var pageSize = screenBreakpoints.indexOf(toLogicalWidth(page.width())),
            pageSizeClasses = [], i;
        if (pageSize == 0)
            pageSize++; // do not assign "tn"
        if (pageSize == screenBreakpoints.length - 1)
            pageSize--; // do not assign "xxl"
        for (i = 1; i <= pageSize; i++)
            pageSizeClasses.push('app-min-' + screenBreakpoints[i]);
        page.addClass(pageSizeClasses.join(' '));
        pageSizeClasses = [];
        for (i = pageSize + 1; i < screenBreakpoints.length - 1; i++)
            pageSizeClasses.push('app-min-' + screenBreakpoints[i]);
        page.removeClass(pageSizeClasses.join(' '));
    }

    function pageResized(doRefreshContext, container) {
        if (isInTransition) return;
        skipTap = false;
        var pageInfo = getPageInfo();
        if (doRefreshContext) {
            resizeStarted = false;
            updateSidebarVisibility();
            $('.ui-panel-dismiss').height(_screen.height);
            resetPageHeight();
            var modalRoot = findModalRoot();
            if (modalRoot.length) {
                resetPageHeight(modalRoot);
                configurePromoButton(pageInfo ? pageInfo.dataView : null);
                arrangeModalPages();
            }
            refreshContext(false, null, function () {
                yardstick();
                setupGridHeaderStyle();
                stickyHeader();
                fitTabs();
                restoreGridScrolling(null, true);
                fetchOnDemand();
            });
        }
        hideTooltip();

        var scrollable = findScrollable(container);
        calcPageMinWidth(container);
        syncEmbeddedViews(scrollable);
        resizeSignatures(scrollable);
        if (!doRefreshContext)
            fetchOnDemand(null, container);
        configurePromoButton();
        updateSidebarVisibility(true);
        if (appBars.left.visibile)
            appBars.left.inner.trigger('scroll');
        moveFooterAboveNotificationBar();
        showHideTabBar(pageInfo, true);
        resetStickyHeader(scrollable);
        if (doRefreshContext)
            updateScrollbars(scrollable);
        else
            setTimeout(function () {
                updateScrollbars(scrollable);
            });
        clearTimeout(echoTimeout);
        echoTimeout = setTimeout(function () {
            if (isInTransition) return;
            fetchEchos();
            mobile.refreshMenuStrip();
            var activePageId = getActivePageId();
            $(mobile._pages).each(function () {
                var pageInfo = this,
                    echo;
                if (pageInfo.echoId/* && pageInfo.id != activePageId*/) {
                    echo = $('#' + pageInfo.echoId);
                    if (echo.length && echo.closest('.ui-page').attr('id') != activePageId) {
                        pageInfo.echoChanged = true;
                        echo.find('.app-echo-controls').addClass('app-stale');
                    }
                }
            });
            showPresenters(findScrollable());
        }, 1000);
        scrollTextInputIntoView(scrollable);
        if (doRefreshContext) {
            fitSummaryToolbars();
            fitTabs();
            var popup = $('.ui-popup');
            if (popup.is('.app-popup-message,.app-popup-listview'))
                closePopupWithoutTransition(popup);
            else
                popup.popup('reposition', { positionTo: 'window' });
            skipTap = false;
            $(document).trigger('resized.app');
            _input.restoreLastPopup();
            if (tooltip && tooltip.is('.app-tooltip-message')) {
                var data = tooltip.data();
                if (data && data.fieldName)
                    setTimeout(function () {
                        _input.focus(data);
                    }, 100);

            }
        }
    }

    $window.on('resize', function () {
        //if (!isTouchPointer) {
        screenChanged();
        startedToResize();
        //}
    }).on('throttledresize', function () {
        screenChanged();
        pageResized(true);
    }).on('orientationchange', function () {
        screenChanged();
        pageResized(true);
    }).on('popstate', function () {
        // back button has been pressed
        _input.ignoreErrors = true;
    });

    // tooltip API

    $(document).on('mousedown', function () {
        var tt = tooltip && tooltip[0];
        if (tt && tt.display != 'none' && !tt.className.match(/\bapp-tooltip-message\b/))
            hideTooltip();
    }).on('mousemove', function (e) {
        if (e.pageX != null) {
            mouseX = e.pageX;
            mouseY = e.pageY;
        }
    }).on('vclick', '.app-tooltip-message', function (event) {
        hideTooltip();
    }).on('mouseenter'/* mousemove*/, '[title]', function (event, delay) {
        var elem = $(this),
            title = elem.attr('title'),
            originalMouseX = mouseX,
            originalMouseY = mouseY;
        if (!title) return;
        if (preventMouseEnter) {
            if (title) {
                elem.attr('title', null);
                setTimeout(function () {
                    elem.attr('title', title);
                }, 1000);
            }
            return;
        }
        elem.attr('title', '').data('title', title);
        clearTimeout(tooltipTimeout);
        tooltipTimeout = setTimeout(function () {
            tooltipTimeout = null;
            delay = 10;
            if (dragEvent && !dragEvent.tooltip) return;
            var pos = elem.offset();
            if ((elem[0].namespaceURI == nsSVG && Math.abs(originalMouseX - mouseX) <= 11 && Math.abs(originalMouseY - mouseY) <= 11) || (mouseX >= pos.left && mouseX < (pos.left + elem.outerWidth()) && mouseY >= pos.top && (mouseY < pos.top + elem.outerHeight()))) {
                showTooltip(mouseX, mouseY + 23, title, elem); // 23 is the size of the mouse cursor?
                // TODO: raise tooltip.app event here
            }
            else
                if (tooltip && !tooltip[0].className.match(/\bapp-tooltip-message\b/)/*!tooltip.is('.app-tooltip-message')*/)
                    tooltip.hide();
        }, delay != null ? delay : tooltipDelay);

    }).on('mouseleave', '[title]', function (event) {
        //if (dragEvent && dragEvent.tooltip == false) return;
        var elem = $(this),
            title = elem.data('title');
        if (title)
            elem.attr('title', title).removeData('title');
        if (tooltip && !tooltip[0].className.match(/\bapp-tooltip-message\b/)/* !tooltip.is('.app-tooltip-message')*/)
            hideTooltip();
    });

    function hideTooltip() {
        if (tooltip && tooltip[0].style.display != 'none')
            tooltip.hide();
        if (tooltipTimeout) {
            clearTimeout(tooltipTimeout);
            tooltipTimeout = null;
        }
    }

    function showTooltip(x, y, text, elem, isMessage) {
        if (isTouchPointer && !isMessage)
            return;
        var lines = text.split(/\n/g),
            tbl;
        //y += 23 - this is from the model builder
        if (!tooltip) {
            tooltip = $('<div class="app-tooltip"></div>').appendTo(document.body).hide();
            if (highScreenDPI())
                tooltip.addClass('app-large');
        }
        tooltip.css({ left: '', top: '' }).text(text);
        if (lines)
            if (text.match(/\t/)) {
                tbl = $('<table/>').appendTo(tooltip.empty());
                $(lines).each(function () {
                    var cells = this.split(/\t/g),
                        tr = $('<tr/>').appendTo(tbl);
                    $(cells).each(function () {
                        var s = this,
                            td = $('<td/>').appendTo(tr);
                        if (s.match(/\"/))
                            td.html(s.replace(/"(.+?)"/g, '<b>$1</b>'));
                        else
                            td.text(s);
                    });
                });
            }
            else {
                tooltip.empty().removeClass('app-tooltip-message');
                $(lines).each(function (index) {
                    var s = this;
                    if (index)
                        $('<br/>').appendTo(tooltip);
                    if (s.match(/\"/))
                        s = s.replace(/"(.+?)"/g, '<b>$1</b>');
                    $('<span/>').appendTo(tooltip).html(s);
                });
            }
        tooltip/*.css({ left: 0, top: 0 })*/.show();
        var scrollLeft = $window.scrollLeft(),
            scrollTop = $window.scrollTop(),
            tooltipWidth = tooltip.outerWidth(),
            tooltipHeight = tooltip.outerHeight(),
            windowWidth = _screen.width,
            elemOffset, positioned, elemWidth,
            elemClassName = elem && elem[0].className, oldX;
        if (isMessage)
            y += 2;
        if (elemClassName && typeof elemClassName == 'string') {
            var tooltipLocation = elem.attr('data-tooltip-location');
            if (elemClassName.match(/\bapp-btn-float\b/)) {
                elemOffset = elem.offset();
                x = elem.css('right') != 'auto' ? elemOffset.left - tooltipWidth - 8 : elemOffset.left + elem.outerWidth() + 12;
                y = elemOffset.top + elem.outerHeight() / 2 - tooltipHeight / 2 + 1;
                positioned = true;
            }
            else if (elemClassName.match(/\bapp-btn-tooltip\b/)) {
                elemOffset = elem.offset();
                elemWidth = elem.outerWidth();
                oldX = x;
                x = elemOffset.left + elemWidth + 12;
                if (x + tooltipWidth > _screen.width) {
                    x = elemOffset.left - 12 - tooltipWidth;
                    if (x >= 0)
                        positioned = true;
                    else
                        x = oldX;
                }
                else
                    positioned = true;
                if (positioned)
                    y = elemOffset.top + elem.outerHeight() / 2 - tooltipHeight / 2 + 1;
            }
            else if (elemClassName.match(/\bui-btn\b/) && elem.closest('.app-sidebar').length) {
                if (appBars.left.mini) {
                    x = appBars.left.width + 6 + _screen.left;
                    y = elem.offset().top + elem.outerHeight() / 2 - tooltipHeight / 2 + 1;
                    positioned = true;
                }
                else if (elem.parent().is('.app-bar-toolbar-bottom')) {
                    tooltipLocation = 'above';
                }
            }
            if (tooltipLocation == 'above') {
                elemOffset = elem.offset();
                y = elemOffset.top - tooltipHeight - 6;
                x = elemOffset.left + elem.outerWidth() / 2 - tooltipWidth / 2;
                if (x < 0)
                    x = 2;
                if (x + tooltipWidth > _screen.width)
                    x = _screen.width - tooltipWidth - 2;

                positioned = true;
            }
        }
        if (!positioned) {
            if (scrollLeft + x + tooltipWidth >= scrollLeft + windowWidth + _screen.left)
                x = scrollLeft + windowWidth + _screen.left - tooltipWidth - 2;
            if (scrollTop + y + tooltipHeight >= scrollTop + _screen.height + _screen.top)
                y = y - 24 - tooltipHeight;
        }
        tooltip.css({ left: positioned ? x : (x - 5), top: y });
        if (isMessage)
            tooltip.addClass('app-tooltip-message');
    }

    /***********************/
    /* Universal Input API */
    /***********************/

    _input = _app.input = {
        methods: {
            'none': { render: nop },
            'text': {
                render: function (options) {
                    var container = options.container,
                        inner = options.inner,
                        row = options.row,
                        field = options.field,
                        dataView = field._dataView, textMode,
                        originalField = options.originalField,
                        height, newHeight, item,
                        v, t;
                    if (!originalField && field.Index != field.AliasIndex)
                        field = dataView._allFields[field.AliasIndex];
                    textMode = field.TextMode;
                    v = row[field.Index];
                    container.removeClass('app-has-helper');
                    if (v == null) {
                        t = options.editing ? _input.fieldToPlaceholder(originalField || field) : '';//nullValueInForms;
                        container.addClass('app-null');
                    }
                    else {
                        if (field.ItemsStyle && field.ItemsStyle != 'Lookup' && field.ItemsStyle != 'AutoComplete') {
                            item = dataView._findItemByValue(field, v);
                            if (item)
                                t = item[1];
                        }
                        else
                            t = field.text(v);
                        if (textMode == 1)
                            t = new Array(t.length + 1).join('&#9679;');
                        container.removeClass('app-null');
                    }
                    if (textMode == 2)
                        inner.addClass('app-field-data-rtf');
                    if (field.Rows && !field.ItemsTargetController)
                        inner.css({ 'min-height': (field.Rows) + 'em'/*, 'white-space': 'pre-line' */ }).addClass('app-text-multiline');
                    if (!t)
                        inner.html('&nbsp;');
                    else
                        if (field.HtmlEncode && textMode != 1)
                            inner.text(t);
                        else
                            inner.html(t);
                    if (setSmartValue(inner, field, v, t, true))
                        inner.attr('title', t);
                    if (options.editing) {
                        var dataType;
                        if (field.Type.match(/^(Byte|Currency|Decimal|Double|Int16|Int32|Int64|Single|SByte|UInt16|UInt32|UInt64)$/))
                            dataType = 'number';
                        else if (isPhoneField(field))
                            dataType = 'tel';
                        else if (isEmailField(field))
                            dataType = 'email';
                        else if (isUrlField(field))
                            dataType = 'url';
                        if (dataType)
                            options.container.attr('data-type', dataType);
                    }
                    else
                        if (field.HyperlinkFormatString)
                            inner.attr('data-href', toHyperlink(field, row));
                    this._createFooter(options);
                },
                focus: function (target) {
                    _input.beforeFocus();
                    var dataInput = dataInputOf(target),// target.closest('[data-input]'),
                        textInput = findInput(dataInput),
                        field = _input.elementToField(target),
                        isRtf = field.TextMode == 2, editor;
                    //if (field.TextMode == 2) {
                    //    mobile.pageInfo().autoFocus = false;
                    //    var scrollTop = findScrollable().scrollTop();
                    //    _app.alert('RTF', function () {
                    //        findScrollable().scrollTop(scrollTop);
                    //    });
                    //}
                    if (isRtf) {
                        editor = field.is('rtf-editor');
                        if (editor) {
                            rtf.editor({ field: field.Name, type: editor });
                            return;
                        }
                        else
                            rtf.toolbar('create', dataInput);
                    }
                    else
                        rtf.range('clear'); //selectedRange = null;
                    if (textInput.length)
                        textInput.focus();
                    else
                        return activateTextInput(target);
                },
                blur: function (e) {
                    var target = $(e.target),
                        dataInput = dataInputOf(target),// target.closest('[data-input]'),
                        inner = dataInput.find('.app-control-inner'),
                        restoreText = target.data('restoreText');
                    rtf.range('save'); //saveSelectedRange();
                    if (restoreText != null)
                        inner.text(restoreText);
                    rtf.toolbar('remove', dataInput);
                },
                setup: function (e) {
                    var notify = $(e.target).data('notify');
                    if (notify)
                        e.change = _input.methods.text._textChange;
                },
                _textChange: function (data) {
                    var notify = data.input.closest('[data-notify]').data('notify'),
                        notifyEvent = $.Event(notify);
                    notifyEvent.inputData = data;
                    $(document).trigger(notifyEvent)
                },
                _createFooter: function (options) {
                    var container = options.container,
                        inner = options.inner,
                        field = options.field,
                        originalField = options.originalField,
                        footer;
                    if (!originalField)
                        originalField = field;
                    if (originalField.FooterText) {
                        footer = container.find('.app-control-footer');
                        if (!footer.length)
                            footer = $('<span class="app-control-footer"/>');
                        footer.appendTo(container.addClass('app-has-footer'));
                        footer.html(originalField.FooterText);
                    }
                    else
                        if (container.is('.app-has-footer'))
                            container.removeClass('app-has-footer').find('.app-control-footer').remove();
                }
            },
            'blob': {
                render: function (options) {
                    var dataInput = options.container,
                        inner = options.inner.empty(),
                        field = options.field,
                        dataView = field._dataView,
                        row = options.row,
                        editing = options.editing,
                        v = row[field.Index], t;
                    if (!v || v.match(/^null/)) {
                        t = _input.fieldToPlaceholder(field);//nullValueInForms;
                        dataInput.addClass('app-null');
                        if (t) {
                            if (t == resourcesValidator.Required)
                                t = '';
                            $('<span class="app-blob-placeholder"/>').text(t).appendTo(inner);
                        }
                    }
                    else {
                        t = v;
                        if (!editing) {
                            var dropBox = inner.find('.app-drop-box');
                            if (dropBox.length)
                                _app.upload('destroy', { container: dropBox });
                        }
                        //inner.empty();
                        var blobHref = dataView.resolveClientUrl(dataView.get_appRootPath()),
                            blobLink = $('<a rel="external"/>').appendTo(inner).attr('href', String.format('{0}blob.ashx?{1}=o|{2}', blobHref, field.OnDemandHandler, t)),
                            contentType,
                            loweredFieldName = field.Name.toLowerCase();
                        if (field.OnDemandStyle != 1) {
                            blobLink.addClass('app-has-image');
                            $('<img/>').appendTo(blobLink).attr({ 'src': String.format('{0}blob.ashx?{1}=t|{2}&_nocrop', blobHref, field.OnDemandHandler, t), 'title': resourcesData.BlobDownloadHint });
                            $(dataView._allFields).each(function () {
                                var f = this,
                                    loweredName = f.Name.toLowerCase();
                                if (loweredName == loweredFieldName + 'contenttype' || loweredName == loweredFieldName + 'content_type') {
                                    contentType = row[f.Index];
                                    return false;
                                }
                            });
                            $(dataView._allFields).each(function () {
                                var f = this,
                                    loweredName = f.Name.toLowerCase();
                                if (loweredName == 'contenttype' || loweredName == 'content_type') {
                                    contentType = row[f.Index];
                                    return false;
                                }
                            });
                            if (!contentType)
                                contentType = 'image'
                            if (contentType.match(/^image/i))
                                blobLink.attr('data-content-type', contentType);
                            else if (!isTouchPointer)
                                blobLink.attr('target', '_blank');
                        }
                        else {
                            blobLink.appendTo(inner).addClass('app-link-blob').attr('title', resourcesData.BlobDownloadHint);
                            $('<span class="glyphicon glyphicon-download"> </span>').appendTo(blobLink);
                            $('<span/>').text(resourcesData.BlobDownloadLink).appendTo(blobLink);
                            if (!isTouchPointer)
                                blobLink.attr('target', '_blank');
                        }
                    }
                    if (editing) {

                        _app.upload('create', {
                            container: $('<div tabindex="0"></div>').appendTo(inner/*.css({ 'min-width': '100%', 'max-width': '100%' })*/).addClass('drop-box-' + field.Index),
                            dataViewId: dataView._id,
                            fieldName: field.Name,
                            change: function () {
                                var isEmpty = !!dataInput.find('.app-drop-box.app-empty').length;
                                dataInput.toggleClass('app-null', isEmpty);
                                _input.execute({ dataView: field._dataView, values: [{ name: field.Name, value: isEmpty ? null : '0' }], skipDrawingInput: dataInput });
                                pageResized(false);
                            }
                        });
                    }
                    _input.methods.text._createFooter(options);
                },
                focus: function (target, source) {
                    _input.beforeFocus();
                    //alert(target[0].outerHTML);
                    if (!target.is(':input')) {
                        findInput().blur();
                        target.find('.app-drop-box').focus();
                        //_input.labelState(target);
                        return true;
                    }
                }
            },
            'checkbox': {
                render: function (options) {
                    var dataInput = options.container,
                        inner = options.inner,
                        checkboxContainer,
                        field = options.field,
                        items = field.Items,
                        isChecked,
                        editing = options.editing,
                        v = options.row[field.Index];
                    //dataInput.attr({ 'data-text-true': items[items.length - 1][1], 'data-text-false': items[items.length - 2][1] });
                    isChecked = items[items.length - 1][0] == v;
                    if (v == null)
                        inner.html(nullValueInForms);
                    else {
                        //$(String.format('<span class="glyphicon glyphicon-{0}"/>', isChecked ? 'check' : 'unchecked')).appendTo(inner.empty());
                        materialIcon('material-icon-' + (isChecked ? 'check-box' : 'check-box-outline-blank'), inner.empty()).addClass('app-icon-checkbox');
                        dataInput.addClass('app-has-checkbox');
                    }
                    inner.css('visibility', editing ? 'hidden' : '');
                    if (editing) {
                        checkboxContainer = $('<div class="app-checkbox-container" tabindex="0"></div>').appendTo(_input.createContainer(dataInput));
                        if (isChecked)
                            checkboxContainer.addClass('app-checkbox-on');
                        //$(iconCheck).appendTo($('<a class="app-checkbox-button" />').appendTo(checkboxContainer));
                        $('<a class="app-checkbox-button" />').appendTo(checkboxContainer);
                    }
                    else
                        dataInput.find('.app-data-input-container').remove();
                    _input.methods.text._createFooter(options);
                },
                focus: function (target, source) {
                    _input.beforeFocus();
                    findInput().blur();
                    var container = target.find('.app-checkbox-container').focus();
                    if (source && source.is('[data-control="label"]'))
                        this._toggleState(container);
                    //_input.labelState(target);
                    return true;
                },
                click: function (event) {
                    var x = lastTouchX(event.clientX),
                        checkbox = dataInputOf(event.target, '.app-checkbox-container'), //$(event.target).closest('[data-input]').find('.app-checkbox-container'),
                        state;
                    if (checkbox.offset().left - 8 <= x && x <= checkbox.offset().left + checkbox.outerWidth() + 8) {
                        this._toggleState(checkbox);
                        //if (!isTouchPointer)
                        //    _input.labelState(checkbox.focus());
                        event.preventDefault();
                    }
                },
                _toggleState: function (checkbox) {
                    var state = checkbox.is('.app-checkbox-on'),
                        button = checkbox.find('.app-checkbox-button'),
                        dataInput = dataInputOf(checkbox),// checkbox.closest('[data-input]'),
                        style = dataInput.attr('data-checkbox-style'),
                        field;
                    if (!_input.cancel()) return;
                    hideTooltip();
                    checkbox.toggleClass('app-checkbox-on');
                    field = _input.elementToField(checkbox);
                    if (style != 'circle' && style != 'square')
                        if (state)
                            checkbox.addClass('app-checkbox-on app-animation').addClass('app-animate-off').one('transitionend', function () {
                                setTimeout(function () {
                                    //requestAnimationFrame(function () {
                                    checkbox.removeClass('app-animation').removeClass('app-checkbox-on app-animate-off');
                                    //});
                                });
                            });

                        else
                            checkbox.addClass('app-animation').addClass('app-animate-on').one('transitionend', function () {
                                //requestAnimationFrame(function () {
                                checkbox.removeClass('app-animation').removeClass('app-animate-on');
                                //});
                            });

                    _input.execute({ dataView: field._dataView, values: [{ name: field.Name, value: !state }], skipDrawingInput: dataInput });
                    if (!isTouchPointer && !state) {
                        var advanceInContainer = field.is('lookup-auto-advance');
                        if (advanceInContainer)
                            setTimeout(function () {
                                _input.move(dataInput, 'right', 9, advanceInContainer);
                            });
                    }
                }
            },
            'lookup': {
                render: function (options) {
                    var originalField = options.originalField = options.field,
                        targetController = originalField.ItemsTargetController;
                    options.field = options.dataView._allFields[options.field.AliasIndex];
                    var inner = options.inner,
                        container = options.container,
                        button = container.find('.app-data-input-button'),
                        node = container.data('node'),
                        editing = options.editing,
                        itemsStyle, listBefore, lov, list, ul,
                        innerHeight;
                    if (!editing && targetController)
                        _input.methods.listbox.render(options);
                    else {
                        if (editing && !button.is('.app-data-input-button')) {
                            button = $('<span class="app-data-input-button"><span class="app-caret"></span></span>').insertAfter(inner).attr('title', resourcesActionsScopesGrid.Select.HeaderText);
                            itemsStyle = originalField.ItemsStyle;
                            if (itemsStyle == 'Lookup')
                                button.addClass('app-caret-r');
                            else if (itemsStyle == 'DropDownList') {
                                $('<span class="app-caret app-caret2"></span>').appendTo(button.addClass('app-caret-u-d'));
                                if (originalField.tagged('open-on-tap'))
                                    container.css('cursor', 'pointer');
                            }
                        }
                        if (editing)
                            inner.css('max-width', container.attr('data-size') != '' ? 'none' : node.self.width() - (button.outerWidth() || 22) - parseCss(inner, 'padding-left') * 2);
                        else {
                            if (button.length && button.is('.app-data-input-button'))
                                button.remove();
                            inner.find('.app-control-before').remove();
                            container.removeClass('app-null app-has-helper');
                        }
                        listBefore = container.find('.app-control-before');
                        if (targetController) {
                            if (!listBefore.length) {
                                inner.text(_input.fieldToPlaceholder(originalField));
                                container.addClass('app-has-helper');
                                listBefore = $('<span class="app-control-before app-control-helper" tabindex="0"/>').insertBefore(inner);
                                ul = $('<ul/>').appendTo(listBefore);
                            }
                            else
                                ul = listBefore.find('ul');
                            lov = originalField.DynamicItems || originalField.Items;
                            list = options.row[originalField.Index];
                            if (list == null)
                                list = '';
                            if (typeof list != 'string')
                                list = list.toString();
                            if (lov.length) {
                                if (list.length) {
                                    var itemsToRemove = ul.find('li'),
                                        addGroupCount = originalField.is('lookup-distinct');
                                    list = _app.csv.toArray(list);
                                    $(lov).each(function (index) {
                                        var item = this,
                                            v = item[0],
                                            li;
                                        if (v != null && list.indexOf(v.toString()) != -1) {
                                            li = $('<li/>').text(item[1]).attr('data-value', v).appendTo(ul);
                                            if (addGroupCount)
                                                _input.addCount(li, item[item.length - 1]);
                                        }
                                    });
                                    itemsToRemove.remove();
                                }
                                listBefore.css('visibility', '')
                            }
                            else
                                listBefore.css('visibility', 'hidden');
                            container.toggleClass('app-null', lov.length == 0);
                            //$('<span class="app-control-before app-control-helper" tabindex="0">The list goes here. This is a very long list with lots of items and things. It will definitely wrap. Very likely this will happen more than ones. You will see.</span>').insertBefore(inner);

                        }
                        else {
                            listBefore.remove();
                            _input.methods.text.render(options);
                        }
                        if (!editing && originalField.ItemsDataController && options.row[originalField.Index] != null && !originalField.tagged('lookup-details-hidden'))
                            $('<span class="app-field-object-ref app-feedback"/>').appendTo(inner).attr('title', resourcesMobile.LookupViewAction)/*)*/;
                    }
                },
                focus: function (target) {
                    _input.beforeFocus();
                    var helper = target.find('.app-control-helper'),
                        skipHelperFocus = helper.data('focus') == false,
                        items = target.find('li');
                    helper.removeData('focus');
                    var dataInput = dataInputOf(target);// target.closest('[data-input]');
                    dataInput.addClass('app-has-focus');
                    if (!skipHelperFocus && items.length) {
                        if (!_input.valid()) return false;
                        helper.focus();
                        items.removeClass('app-focus').first().addClass('app-focus');
                        //_input.labelState(dataInput);
                        return true;
                    }

                    var result = _input.methods.text.focus(target),
                        field, row, button;
                    if (skipHelperFocus)
                        dataInput.addClass('app-has-focus');
                    if (result) {
                        field = _input.elementToField(target);
                        row = field._dataView.editRow();
                        if (target.data('autoComplete') == false)
                            target.removeData('autoComplete');
                        else if (row[field.Index] == null) {
                            _input.elementToButton(target).removeClass('app-caret-r');
                            if (field.ItemsStyle == 'Lookup') {
                                var lookupInput = findInput(dataInputOf(target)).focus();//findInput(target.closest('[data-input]')).focus();
                                setTimeout(function () {
                                    _input.methods.lookup._showList({ field: field, value: null, input: lookupInput/*.find('.app-data-input')*/ });
                                }, isTouchPointer ? 300 : 10);
                            }
                        }
                    }
                    return result;
                },
                click: function (event) {
                    var button = _input.eventToButton(event),
                        buttonOffset = button.offset(),
                        x = lastTouchX(event.clientX),
                        target = $(event.target),
                        dataInput = dataInputOf(target);// target.closest('[data-input]');

                    if (target.is('li,.app-muted')) {
                        target = target.closest('li');
                        // basket item is clicked
                        if (!_input.cancel()) {
                            event.preventDefault();
                            return false;
                        }

                        if (findInput(dataInput).length) {
                            // touch interfaces will may have an input
                            event.preventDefault();
                            findInput(dataInput).blur();
                            setTimeout(function () {
                                target.trigger('vclick');
                            }, 100);
                            return;
                        }

                        function removeFocus() {
                            dataInput.removeClass('app-has-focus');
                            target.removeClass('app-focus');
                        }

                        if (!target.is('.app-focus'))
                            target.parent().find('li').removeClass('app-focus');
                        findInput(dataInput).blur();
                        var helper = dataInput.find('.app-control-helper').blur(),
                            field = _input.elementToField(target),
                            items = [{
                                text: resourcesActionsScopesGrid.Delete.HeaderText, icon: 'trash', callback: function () {
                                    _input.methods.lookup._removeBasketItem(target, true);
                                    helper.focus();
                                }
                            }];
                        if (!field.is('lookup-details-hidden') && !field.is('lookup-distinct'))
                            items.push({
                                text: resourcesMobile.LookupViewAction, icon: 'carat-r', callback: function () {
                                    removeFocus();
                                    mobile.details({ field: field, key: target.attr('data-value') });
                                }
                            });
                        dataInput.addClass('app-has-focus');
                        target.addClass('app-focus');
                        showListPopup({
                            anchor: target, items: items, autoFocus: false,
                            afterclose: function (popup, item) {
                                if (isTouchPointer)
                                    removeFocus();
                                else if (!item)
                                    helper.focus();
                            }
                        });
                        event.preventDefault();
                    }
                    else if (target.closest('.app-control-helper').length) {
                        // do nothing
                        target.closest('.app-control-helper').focus();
                    }
                    else if (dataInput.attr('data-input') == 'dropdownlist' && !findInput(dataInput).length && (isTouchPointer || _input.elementToField(target).tagged('open-on-tap'))) {
                        event.preventDefault();
                        var existingDataInput = findInput();//$('.app-data-input');
                        if (existingDataInput.length)
                            existingDataInput.blur();
                        if (isTouchPointer) {
                            skipTap = true;
                            setTimeout(function () {
                                skipTap = false;
                                _input.methods.lookup.lov(dataInput)
                            }, 100);
                        }
                        else
                            this.clickButton(event);
                        //this.lov(dataInput);
                    }
                    else if (button.length && buttonOffset.left <= x && x < buttonOffset.left + button.outerWidth() + 8)
                        if (this.clickButton(event))
                            event.preventDefault();
                },
                clickButton: function (event, feedback) {
                    var button = _input.eventToButton(event),
                        inputMethod = _input.elementToMethod(button),
                        dataInput = dataInputOf(button),// button.closest('[data-input]'),
                        inputIsActive = findInput(dataInput).length > 0,
                        field = _input.eventToField(event),
                        dataView,
                        aliasField,
                        showValue = !field.ItemsTargetController,
                        row;

                    if (!inputIsActive && !_input.cancel()) return false;

                    function showLookupView() {
                        button.removeClass('ui-btn-active');
                        dataView = field._dataView;
                        aliasField = dataView._allFields[field.AliasIndex];
                        row = dataView.editRow();
                        mobile.lookup({
                            field: field,
                            value: showValue ? row[field.Index] : null,
                            text: showValue ? aliasField.format(row[aliasField.Index]) : null,
                            change: function (values) {
                                if (field.ItemsTargetController) {
                                    if (values.length >= 2) {
                                        if (_input.methods.lookup._useItemValue(field, [values[0].value, values[1].value])) {
                                            if (!isTouchPointer)
                                                dataInput.find('.app-control-helper').data('focus', false);
                                        }
                                        else {
                                            dataInput.addClass('app-has-focus').find('.app-control-helper').focus();
                                            return;
                                        }
                                    }
                                }
                                else
                                    _input.execute({ dataView: dataView, values: values });
                                if (!isTouchPointer)
                                    setTimeout(function () {
                                        inputMethod.focus(dataInput);
                                    }, 100);
                            }
                        });
                    }


                    if (inputIsActive && _input.popup(':visible')) {
                        _input.popup('hide');
                        _input.methods.lookup._buttonUp(button);
                    }
                    else
                        if (field.ItemsStyle != 'Lookup') {
                            button.removeClass('ui-btn-active');
                            if (!inputIsActive) {
                                dataInput.find('.app-control-helper').data('focus', false);
                                inputMethod.focus(dataInput);
                            }
                            findInput(dataInput).trigger($.Event('keydown', { ctrlKey: true, which: 32 }));
                        }
                        else {
                            if (feedback != false) {
                                button.addClass('ui-btn-active');
                                setTimeout(showLookupView, feedbackDelay);
                            }
                            else
                                showLookupView();
                        }
                    noTap();
                    return true;
                },
                blur: function (e) {
                    var target = $(e.target),
                        dataInput = dataInputOf(target),// target.closest('[data-input]'),
                        inner = dataInput.find('.app-control-inner'),
                        restoreText = target.data('restoreText'),
                        field = _input.eventToField(e);
                    if (field.ItemsTargetController) {
                        restoreText = _input.fieldToPlaceholder(field);
                        inner.text(restoreText);
                        _input.fitContainer(dataInput, null, restoreText);
                    }
                    else if (restoreText != null)
                        inner.text(restoreText);
                    //_input.eventToButton(event).addClass('app-caret-r').removeClass('app-caret-u');
                    this._buttonUp(target);
                    _input.popup('hide');
                    clearTimeout(field._showListTimeout);
                },
                setup: function (e) {
                    var field = _input.eventToField(e);
                    e.change = _input.methods.lookup._lookupChange;
                },
                _lookupChange: function (data) {
                    var input = data.input,
                        field = _input.elementToField(input),
                        dataView = field._dataView,
                        cleared,
                        button;
                    input.removeData('keepFocus')
                    if (data.value) {
                        if (field.AllowAutoComplete == false) {
                            input.val(input.data('original')).select();
                            data.value = '';
                        }
                    }
                    else if (_input.popup(':visible') || field.AllowAutoComplete == false || field.ItemsStyle == 'DropDownList') {
                        clearTimeout(field._showListTimeout);
                        var dataInput = dataInputOf(input),// input.closest('[data-input]'),
                            original = input.data('original') || '';
                        input.val('');
                        input.removeData('restoreText');
                        _input.popup('hide');
                        if (original != '') {
                            _input.methods.lookup._clearValue(field);
                            cleared = true;
                        }
                        input.data('original', '');
                        //if (field.ItemsTargetController) {
                        //    dataInput.find('.app-control-inner').text(_input.fieldToPlaceholder(field));
                        //    _input.fitContainer(dataInput);
                        //}
                        dataInput.find('.app-control-inner').text(_input.fieldToPlaceholder(field));
                        _input.fitContainer(dataInput);
                    }
                    button = _input.elementToButton(input);
                    button.removeClass('app-caret-r');
                    if (input.data('autoComplete') == false) {
                        input.removeData('autoComplete');
                        clearTimeout(field._showListTimeout);
                    }
                    else {
                        if (!data.value) {
                            if (!cleared && input.data('original') != '')
                                _input.methods.lookup._clearValue(field);
                            if (field.ItemsTargetController && data.keyCode)
                                return;
                        }
                        _input.methods.lookup._showList({ field: field, value: data.value, originalValue: input.data('original'), input: input, keyCode: data.keyCode });
                    }
                },
                lov: function (dataInput) {
                    var field = _input.elementToField(dataInput),
                        dataView = field._dataView,
                        aliasField = dataView._allFields[field.AliasIndex],
                        row = dataView.editRow(),
                        lov = field.DynamicItems || field.Items,
                        v = row[field.Index],
                        hasSeparator,
                        list = [];

                    function callback(index) {
                        if (index == 'Clear')
                            _input.methods.lookup._clearValue(field);
                        else if (index == 'New')
                            mobile.lookup({ field: field, create: true, dataInput: dataInput/*, value: inputValue*/ });
                        else {
                            var item = lov[index];
                            _app.input.methods.lookup._useItemValue(field, item)
                        }
                    }

                    $(lov).each(function (index) {
                        var item = this;
                        list.push({ text: aliasField.format(item[1]), icon: v == item[0] ? 'check' : false, callback: callback, context: index });
                    });
                    if (_input.canCreateItems(field)) {
                        if (list.length) {
                            list.push({});
                            hasSeparator = true;
                        }
                        list.push({ text: resourcesLookup.GenericNewToolTip, icon: 'material-icon-add', callback: callback, context: 'New' });
                    }
                    if (v != null && field.AllowNulls) {
                        if (!hasSeparator)
                            list.push({});
                        list.push({ text: resourcesMobile.LookupClearAction, icon: 'material-icon-cancel', callback: callback, context: 'Clear' });
                    }
                    var title = aliasField.HeaderText;
                    showListPopup({ x: lastTouchX(), y: lastTouchY(), title: title != '&nbsp;' ? title : null, anchor: dataInput.find('.app-control-inner'), items: list });
                },
                _clearValue: function (field) {
                    //if (field.ItemsTargetController)
                    //    return;
                    var dataView = field._dataView,
                        values = [{ name: field.Name, value: null }],
                        copy = field.Copy, copyField, copyInfo;
                    if (field.Index != field.AliasIndex)
                        values.push({ name: dataView._allFields[field.AliasIndex].Name, value: null });
                    if (copy)
                        while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                            copyInfo = copyInfo[1];
                            copyField = field._dataView.findField(copyInfo);
                            if (copyField && copyField.ReadOnly || copyInfo == 'null')
                                values.push({ name: copyInfo, value: null });
                        }
                    _input.execute({ dataView: dataView, values: values, skipPopulateField: field });
                },
                _hidePopup: function () {
                    if (!isTouchPointer) {
                        if (_input.popup(':visible')) {
                            var input = _input._lastInputBeforeScroll = findInput(),
                                button = dataInputOf(input, '.app-data-input-button');//input.closest('[data-input]').find('.app-data-input-button');
                            if (button.length)
                                this._buttonUp(button);
                            _input.popup('hide');
                        }
                        else
                            _input._lastInputBeforeScroll = null;
                    }
                },
                _buttonUp: function (button) {
                    var field = _input.elementToField(button);
                    if (!button.is('.app-data-input-button'))
                        button = _input.elementToButton(button);
                    if (field && field.ItemsStyle == 'Lookup')
                        button.addClass('app-caret-r');
                    button.removeClass('app-caret-u app-caret-d');
                },
                _getCopyFields: function (field) {
                    var copy = field.Copy,
                        dataView, copyFields, copyInfo, copyToField, copyFromField;
                    if (copy) {
                        dataView = field._dataView;
                        copyFields = copyFields = dataView.session(field.Name + '_copyFields');
                        if (!copyFields) {
                            copyFields = [];
                            while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                                copyToField = copyInfo[1];
                                copyFromField = copyInfo[2];
                                if (dataView.findField(copyToField) || copyFromField == 'null')
                                    copyFields.push({ fromField: copyFromField, toField: copyToField });
                            }
                            dataView.session(field.Name + '_copyFields', copyFields);
                        }
                    }
                    return copyFields;
                },
                _showList: function (options) {
                    var field = options.field,
                        dataView = field._dataView,
                        itemsDataController = field.ItemsDataController,
                        itemsStyle = field.ItemsStyle,
                        itemsTargetController = field.ItemsTargetController,
                        preFetched = itemsStyle != 'Lookup' && itemsStyle != 'AutoComplete',
                        hasSeparator,
                        copyFields = this._getCopyFields(field),
                        //copy = field.Copy,
                        //copyFields = dataView.session(field.Name + '_copyFields'),
                        //copyInfo, copyToField, copyFromField,
                        cachedPropertyItemsDataTextField, cachedPropertyItemsDataValueField,
                        typeToSearch = resourcesMobile.TypeToSearch,
                        aliasField = dataView._allFields[field.AliasIndex],
                        matchOperation = aliasField.AutoCompleteAnywhere ? 'contains' : 'beginswith',
                        matchForContains = matchOperation == 'contains',
                        testValue = options.value,
                        value = testValue == null ? '' : testValue,
                        popup = _input.popup(),
                        input = options.input,
                        inputParent = input.parent(),
                        button = _input.elementToButton(input),
                        doSearch, lov, lov2, keyOfLov,
                        list = [];
                    hideTooltip();
                    if (!inputParent.length) return;

                    function createSeparator() {
                        if (!hasSeparator) {
                            list.push({ text: '$separator' });
                            hasSeparator = true;
                        }
                    }

                    if (itemsTargetController)
                        //input.closest('[data-input]').find('.app-control-before .app-focus').removeClass('app-focus');
                        dataInputOf(input, '.app-control-before .app-focus').removeClass('app-focus');

                    if (preFetched)
                        list = field.DynamicItems || field.Items;
                    else {
                        if (field.AllowAutoComplete != false)
                            if (value || field.ItemsStyle == 'AutoComplete') {
                                testValue = value.toLowerCase();
                                if (!field.ContextFields || input.data('ignoreContextFields')) {
                                    input.data('ignoreContextFields', false);
                                    keyOfLov = lovKey(field);
                                    lov = dataView.session(keyOfLov/*field.Name + '_listOfValues_'*/ + testValue);
                                    while (!lov && testValue.length) {
                                        testValue = testValue.substring(0, testValue.length - 1);
                                        lov = dataView.session(keyOfLov/*field.Name + '_listOfValues_'*/ + testValue);
                                        if (lov && lov.length >= autoCompleteRowCount) {
                                            lov = null;
                                            break;
                                        }
                                    }
                                    // try to find a matching list for a shorter test value
                                    while (lov && testValue.length) {
                                        testValue = testValue.substring(0, testValue.length - 1);;
                                        lov2 = dataView.session(keyOfLov/*field.Name + '_listOfValues_'*/ + testValue);
                                        while (!lov2 && testValue.length) {
                                            testValue = testValue.substring(0, testValue.length - 1);
                                            lov2 = dataView.session(keyOfLov/*.Name + '_listOfValues_'*/ + testValue);
                                            if (lov2 && lov2.length >= autoCompleteRowCount) {
                                                lov2 = null;
                                                break;
                                            }
                                        }
                                        if (lov2 && lov2.length < autoCompleteRowCount)
                                            lov = lov2;
                                    }
                                }
                                if (lov)
                                    list = list.concat(lov);
                                else {
                                    list.push({ text: loadingStatusText, instruction: true });
                                    if (value)
                                        list.push({ text: value, selected: true, command: 'None' });
                                    doSearch = true;
                                }
                            }
                            else
                                list.push({ value: null, text: typeToSearch, instruction: true });

                        if (itemsStyle == 'Lookup') {
                            if (field._doSearch) {
                                field._doSearch = false;
                                //lov = field.ContextFields ? null : dataView.session(field.Name + '_listOfValues_');
                                lov = input.data('ignoreContextFields') ? dataView.session(lovKey(field)/*field.Name + '_listOfValues_'*/) : null;
                                if (lov)
                                    list = list.concat(lov);
                                else {
                                    doSearch = true;
                                    list.splice(1, 0, { value: null, text: loadingStatusText, instruction: true });
                                }
                            }
                            else if (!value)
                                list.push({ text: resourcesMobile.ShowOptions, command: 'ShowOptions' });
                            createSeparator();
                            list.push({ text: resourcesMobile.SeeAll, command: 'SeeAll' });
                        }
                    }
                    if (_input.canCreateItems(field)) {
                        if (preFetched)
                            list = list.slice(0);
                        createSeparator();
                        list.push({ text: resourcesLookup.GenericNewToolTip, command: 'New' });
                    }
                    if (!preFetched && options.originalValue && options.value) {
                        createSeparator();
                        list.push({ text: resourcesMobile.LookupClearAction, command: 'Clear' });
                    }

                    function renderListOfValues(list) {
                        value = input.val();
                        if (value == '' && field.ItemsStyle == 'DropDownList' && list.length && list[0] instanceof Array && list[0][0] == null)
                            value = list[0][1];
                        var valueIsBlank = /*value != null  **/value.length == 0,
                            ul = popup.data('ul'),
                            dataInput = inputParent.parent(),
                            stylesToBorrow = borrowDataInputStyle(dataInput),
                            controlInner,
                            inputOffset,
                            inputHeight = input.outerHeight(),
                            scroller = findScrollable(input),
                            scrollerOffset = scroller.offset(),
                            scrollerWidth = calcWidth(scroller),
                            selectedItem, selectedText, item,
                            escapedValue = value && RegExp.escape(value),
                            testRegex = value ? new RegExp(matchForContains ? escapedValue : ('^' + escapedValue + '.*'), 'i') : null,
                            testMatch, matchCount = 0, stopMatching, firstCommandItem, separatorItem,
                            w, x, y, spaceAbove, spaceBelow, h, showAbove,
                            minHeight,
                            addGroupCount = field.is('lookup-distinct'),
                            previousText, hasDuplicates, itemDetails, lov, lovNoMatchCount = 0;
                        popup.data('list', list).css({ width: '', 'max-width': '', 'min-width': '', 'max-height': '', height: '' }).removeClass('app-wrap');
                        ul.empty();
                        popup/*.appendTo(scroller)*/.show();
                        if (itemsTargetController)
                            lov = _app.csv.toArray(dataView.row()[field.Index]);
                        $(list).each(function (index) {
                            var item = this,
                                text,
                                li;
                            if (item.totalRowCount) {
                                if (value.length >= item.value.length && matchCount < item.totalRowCount)
                                    $('<li class="app-instruction"/>').appendTo(ul).text(String.format(resourcesMobile.ShowingItemsRange, matchCount, item.totalRowCount));
                            }
                            else if (item.text == '$separator') {
                                if (index > 0)
                                    $('<li class="app-instruction app-separator"/>').appendTo(ul);
                            }
                            else if (item.text) {
                                li = $('<li/>').appendTo(ul).text(item.text);
                                if (item.instruction)
                                    li.addClass('app-instruction');
                                if (item.command) {
                                    li.attr('data-command', item.command);
                                    if (item.command == 'SeeAll')
                                        $('<span class="app-icon app-caret-r"><span class="app-caret"/></span>').appendTo(li);
                                }
                                if (item.selected)
                                    li.addClass('app-selected');
                                if (!firstCommandItem)
                                    firstCommandItem = li;
                            }
                            else {
                                text = item[1];
                                if (text != null && typeof text != 'string')
                                    text = field.format(text);
                                testMatch = text ? text.toString().match(testRegex) : null;
                                if (text == '$separator')
                                    separatorItem = $('<li class="app-instruction app-separator"/>').appendTo(ul);
                                else if (field.AllowNulls || (item[0] != null || (/*!value*/valueIsBlank || value == text))) // exclude "null" option for mandatory fields
                                    if (preFetched || (valueIsBlank && (itemsStyle == 'AutoComplete' || itemsStyle == 'Lookup')) || !valueIsBlank && text && (testMatch || text == value || value == options.originalValue)) {
                                        matchCount++;
                                        if (lov)
                                            if (item[0] != null && lov.indexOf(item[0].toString()) != -1)
                                                return;
                                            else
                                                lovNoMatchCount++;
                                        //if (text != null)
                                        //    text = text.toString();
                                        li = $('<li/>').appendTo(ul).attr('data-index', index);
                                        if (stylesToBorrow)
                                            li.css(stylesToBorrow);
                                        if (!stopMatching && testMatch) {
                                            var exactMatch = value.toLowerCase() == item[1].toString().toLowerCase();
                                            if (!selectedItem || exactMatch) {
                                                selectedText = text;
                                                selectedItem = li;
                                            }
                                            stopMatching = item[0] != null && (itemsDataController || exactMatch);
                                        }
                                        if (testMatch && matchForContains && value != options.originalValue) {
                                            if (testMatch.index)
                                                $('<span/>').text(text.substring(0, testMatch.index)).appendTo(li);
                                            $('<b/>').text(text.substring(testMatch.index, testMatch.index + testMatch[0].length)).appendTo(li);
                                            if (testMatch.index + testMatch.length <= text.length - 1)
                                                $('<span/>').text(text.substring(testMatch.index + testMatch[0].length)).appendTo(li);
                                        }
                                        else if (testMatch && !matchForContains) {
                                            $('<span class="app-text-normal"/>').text(text.substring(0, value.length)).appendTo(li);
                                            $('<span class="app-text-bold"/>').text(text.substring(value.length)).appendTo(li);
                                        }
                                        else
                                            li.text(text == null ? resourcesHeaderFilter.EmptyValue : text);
                                        if (text == previousText && item.length > 2) {
                                            itemDetails = _input.methods.lookup._itemToDetails(field, item);
                                            if (itemDetails)
                                                $('<i/>').text(itemDetails).appendTo(li);
                                            if (!hasDuplicates) {
                                                itemDetails = _input.methods.lookup._itemToDetails(field, list[index - 1]);
                                                if (itemDetails)
                                                    $('<i/>').text(itemDetails).appendTo(li.prev());
                                                hasDuplicates = true;
                                            }
                                        }
                                        else
                                            hasDuplicates = false;
                                        // $('<span/>').text(', ' + text + ', ' + text + ', ' + text + ', ' + text).appendTo(li); - DEBUG
                                        if (addGroupCount && text != null)
                                            // $('<span class="app-muted"/>').appendTo(li).text(item[item.length - 1]);
                                            _input.addCount(li, item[item.length - 1]);
                                        previousText = text;
                                    }
                            }
                        });
                        if (!selectedItem && (!valueIsBlank || lov && lovNoMatchCount == 0 && itemsStyle != 'Lookup') && list[0].text != loadingStatusText && list[0].text != resourcesMobile.NoMatches) {
                            var noMatchesItem = $('<li class="app-instruction"/>').text(resourcesMobile.NoMatches),
                                firstLi = ul.find('li:first');
                            if (firstLi.length)
                                noMatchesItem.insertBefore(firstLi);
                            else
                                noMatchesItem.appendTo(ul);
                            var controlInner = dataInput.find('.app-control-inner');
                            if (controlInner.length && input.data('restoreText') == null)
                                input.data('restoreText', controlInner.text());
                            if (!valueIsBlank) {
                                controlInner.text(value + '\xa0\xa0');
                                _input.fitContainer(dataInput, inputParent);
                            }
                        }

                        if (itemsTargetController && matchCount && lovNoMatchCount > 1) {
                            li = $('<li data-command="SelectAll"/>').text(resourcesEditor.SelectAll);
                            if (firstCommandItem)
                                li.insertBefore(firstCommandItem);
                            else {
                                if (!separatorItem)
                                    $('<li class="app-instruction app-separator"/>').appendTo(ul);
                                li.appendTo(ul);
                            }
                        }

                        inputOffset = input.offset();
                        w = Math.max(ul[0].getBoundingClientRect().width + 2, button.length ? (button.offset().left - inputOffset.left + button.outerWidth()) : 0);
                        w = Math.min(w, scrollerWidth * .9);

                        popup.addClass('app-wrap');
                        popup.css({ width: w, 'max-width': w, 'min-width': w });

                        x = inputOffset.left - 1;
                        spaceAbove = inputOffset.top - 1 - _screen.top - $body.scrollTop();
                        y = inputOffset.top + inputHeight;
                        spaceBelow = _screen.height - (inputOffset.top + inputHeight) - _screen.bottom;
                        h = popup.outerHeight();
                        if (isTouchPointer && spaceAbove > 100) {
                            showAbove = true;
                            if (spaceAbove < h)
                                h = spaceAbove;
                            else
                                h = '';
                        }
                        else if (spaceBelow < h)
                            if (spaceAbove > spaceBelow) {
                                showAbove = true;
                                if (spaceAbove < h)
                                    h = spaceAbove;
                                else
                                    h = '';
                            }
                            else
                                h = spaceBelow;
                        else
                            h = '';
                        if (h)
                            h -= 4;//20;
                        h = h || popup.outerHeight();
                        if (showAbove) {
                            y = inputOffset.top - (h);// - scrollerOffset.top + scroller.scrollTop();
                            var btn = _input.elementToButton(input);
                            if (!btn.is('.app-caret-u-d'))
                                btn.addClass('app-caret-u');
                        }
                        if (x + w/* + scrollerOffset.left*/ > _screen.width + _screen.left - 8 - 2) // max scrollbar width is "8", singline line border on both sides is "2"
                            x = _screen.width + _screen.left /*- scrollerOffset.left*/ - 1 - w - 8 - 2;
                        popup.css({ left: x, top: y, 'max-height': h, height: h });
                        //if (scrollbarInfo.width) {
                        //    var ulW = ul.width();
                        //    ul.css({ width: ulW + scrollbarInfo.width }).parent().css({ 'width': ulW, 'overflow-y': 'auto', 'height': '100%' }).parent().css('overflow', 'hidden');
                        //}
                        if (selectedItem) {
                            selectedItem.addClass('app-selected');
                            var newPopupScrollTop = selectedItem.position().top - (h - selectedItem.outerHeight()) / 2;
                            selectedText = selectedText.trim();
                            var isPartialMatch = value.length < selectedText.length, inputKeyCode;
                            if (isPartialMatch && !matchForContains && options.keyCode != 8) {
                                dataInput = dataInputOf(input);// input.closest('[data-input]');
                                controlInner = dataInput.find('.app-control-inner');
                                if (controlInner.length && input.data('restoreText') == null)
                                    input.data('restoreText', controlInner.text());
                                selectedText = value + selectedText.substring(value.length);
                                _input.fitContainer(dataInput, input, selectedText);
                                if (!android) {
                                    inputKeyCode = input.data('keyCode');
                                    if (inputKeyCode != 8 && inputKeyCode != 46) {
                                        input.data('autoComplete', false);
                                        input.val(selectedText);
                                        input[0].setSelectionRange(value.length, selectedText.length);
                                        input.removeData('autoComplete');
                                    }
                                }
                            }
                            else if (itemsStyle == 'DropDownList' && !isPartialMatch && (input[0].selectionStart == 0 && input[0].selectionEnd == selectedText.length)) {
                                newPopupScrollTop = popup.css('left', -10000).scrollTop(newPopupScrollTop).scrollTop();
                                var selectedItemTop = selectedItem.offset().top,
                                    inputOffset = input.offset(),
                                    newPopupTop = y - (selectedItemTop - inputOffset.top) - 1,
                                    deltaY,
                                    popupHeight = popup.outerHeight();
                                if (newPopupTop < 0) {
                                    newPopupTop -= 4;
                                    popup.find('li').last().css('margin-bottom', -newPopupTop);
                                    newPopupScrollTop = Math.ceil(newPopupScrollTop - newPopupTop);
                                    newPopupTop = 4;
                                }
                                else if (newPopupTop + popupHeight > _screen.height) {
                                    var newPopupTop2 = _screen.height - popupHeight - 4,
                                        delta = newPopupTop - newPopupTop2;
                                    newPopupTop = newPopupTop2;
                                    popup.find('li').first().css('margin-top', delta);
                                    newPopupScrollTop = Math.floor(newPopupScrollTop - delta);
                                }
                                popup.css({ top: newPopupTop, left: x - parseCss(selectedItem, 'padding-left') });
                                //input[0].setSelectionRange(0, selectedText.length);
                            }
                            popup.scrollTop(newPopupScrollTop);
                        }
                        else if (!input.val()) {
                            dataInput = dataInputOf(input);// input.closest('[data-input]');
                            controlInner = dataInput.find('.app-control-inner');
                            if (controlInner.length && input.data('restoreText') == null)
                                input.data('restoreText', controlInner.text());
                            _input.fitContainer(dataInput, input.closest('.app-data-input-container').width(''));
                        }
                    }

                    if (!list.length)
                        list.push({ text: resourcesMobile.NoMatches, instruction: true });
                    renderListOfValues(list);

                    function executeError(e) {
                        if (popup.is(':visible') && popup.data('field') == dataView._id + '_' + field.Name) {
                            list.splice(0, 1);
                            renderListOfValues([[null, e.get_message()]].concat(list));
                        }
                    }

                    function doShowList() {
                        var searchController = itemsDataController,
                            searchFieldName = field.ItemsDataTextField,
                            primaryKeyField = field.ItemsDataValueField,
                            editRow = dataView.editRow(), searchCache = dataView.session(field.Name + '_listCache'),
                            fieldFilter = [searchFieldName],
                            filter = value != options.originalValue && value != '' ? [searchFieldName + ':$' + matchOperation + '$%js%' + _app.serializer.serialize(value)] : [],
                            contextFilter = createExternalFilter(dataView, field, filter); //dataView.get_contextFilter(field, dataView.extension().collect()),
                        popup.data('field', dataView._id + '_' + field.Name);

                        $(_input.methods.lookup._getCopyFields(field) /*dataView.session(field.Name + '_copyFields')*/).each(function () {
                            if (this.fromField != 'null')
                                fieldFilter.push(this.fromField);
                        });

                        if (!searchCache)
                            dataView.session(field.Name + '_listCache', searchCache = {})

                        var searchArgs =
                            {
                                controller: searchController, view: field.ItemsDataView, sync: editRow[aliasField.Index] == value ? editRow[field.Index] : null,
                                lookupContext: { Controller: dataView._controller, View: dataView._viewId, FieldName: field.Name },
                                _filter: filter, sortExpression: searchFieldName, format: true, pageSize: autoCompleteRowCount, fieldFilter: fieldFilter, pageIndex: 0, pageSize: 500,
                                externalFilter: contextFilter,
                                distinct: field.is('lookup-distinct')//,// DistinctValues == true,
                                //success: 
                                //error: executeError
                            },
                            cacheKey = JSON.stringify(searchArgs),
                            cachedResult = searchCache[cacheKey];

                        function searchDone(result) {
                            searchCache[cacheKey] = result;
                            if (!getPageInfo(dataView) || !input.parent().length) return;
                            input.data('ignoreContextFields', true);
                            var listOfValues = [],
                                data = result[searchController];
                            $(data).each(function () {
                                var r = this,
                                    values = [r[primaryKeyField || result.primaryKey[0]], r[searchFieldName]],
                                    distinctCount = r['group_count_'];
                                if (copyFields)
                                    $(copyFields).each(function () {
                                        values.push(r[this.fromField]);
                                    });
                                if (distinctCount != null)
                                    values.push(distinctCount);
                                listOfValues.push(values);
                            });
                            //if (!field.ContextFields)
                            dataView.session(lovKey(field)/*.Name + '_listOfValues_'*/ + (editRow[aliasField.Index] == value ? '' : value).toLowerCase(), listOfValues);
                            list.splice(0, 1);
                            if (list.length && list[0].selected)
                                list.splice(0, 1);
                            if (data.length < result.totalRowCount)
                                listOfValues.push({ totalRowCount: result.totalRowCount, value: value });
                            if (popup.is(':visible') && popup.data('field') == dataView._id + '_' + field.Name) {
                                if (field.ItemsStyle == 'Lookup' && !value) {
                                    list.splice(0, 1);
                                    list = listOfValues.concat(list);
                                    list.splice(0, 0, { text: typeToSearch, instruction: true });
                                }
                                else
                                    list = listOfValues.concat(list);
                                if (!list.length)
                                    list = [{ text: resourcesMobile.NoMatches, instruction: true }];
                                renderListOfValues(list);
                            }
                        };

                        if (!cachedResult)
                            //searchArgs.done = searchDone;
                            //searchArgs.fail = executeError;
                            _app.execute(searchArgs).done(searchDone).fail(executeError);
                        else
                            searchDone(cachedResult);

                    }

                    if (doSearch) {
                        clearTimeout(field._showListTimeout);
                        if (!field.ItemsDataValueField) {
                            cachedPropertyItemsDataValueField = itemsDataController + '_' + field.ItemsDataView + '_DataValueField';
                            field.ItemsDataValueField = _app.cache[cachedPropertyItemsDataValueField];
                        }
                        if (!field.ItemsDataTextField) {
                            cachedPropertyItemsDataTextField = itemsDataController + '_' + field.ItemsDataView + '_DataTextField';
                            field.ItemsDataTextField = _app.cache[cachedPropertyItemsDataTextField];
                        }
                        if (!field.ItemsDataTextField || !field.ItemsDataValueField) {
                            _app.execute({
                                controller: itemsDataController, view: field.ItemsDataView, requiresData: false,
                                success: function (result) {
                                    field.ItemsDataValueField = result.primaryKey[0].Name;
                                    field.ItemsDataTextField = result.fields[0].Name;
                                    _app.cache[cachedPropertyItemsDataValueField] = field.ItemsDataValueField;
                                    _app.cache[cachedPropertyItemsDataTextField] = field.ItemsDataTextField;
                                    doShowList();
                                },
                                error: executeError
                            });
                        }
                        else
                            if (options.keyCode != null)
                                field._showListTimeout = setTimeout(doShowList, 300);
                            else
                                doShowList();
                    }
                },
                _itemToDetails: function (field, item) {
                    var s = [], i = 2,
                        copy = field.Copy, f, m, v;
                    if (copy)
                        while (m = _app._fieldMapRegex.exec(copy)) {
                            f = field._dataView.findField(m[1]);
                            if (f && !f.Hidden && !f.OnDemand && f.Index == f.AliasIndex && item && item[i] !== undefined) {
                                v = item[i];
                                v = v == null ? v = nullValueInForms : field.format(item[i]);
                                s.push(v);
                            }
                            i++;
                        }
                    return s.join('; ');
                },
                _rowToValues: function (lookupField, lookupDataView, row) {
                    var aliasField = lookupField._dataView._allFields[lookupField.AliasIndex],
                        copy = lookupField.Copy,
                        dataValueField = lookupField.ItemsDataValueField,
                        dataTextField = lookupField.ItemsDataTextField,
                        valueField, textField,
                        copyInfo, copyField, copyFromField,
                        value = null,
                        text = null,
                        values;

                    if (!dataValueField)
                        $(lookupDataView._allFields).each(function () {
                            if (this.IsPrimaryKey) {
                                dataValueField = this.Name;
                                return false;
                            }
                        });
                    if (!dataTextField)
                        $(lookupDataView._allFields).each(function () {
                            var field = this;
                            if (!field.Hidden && !field.OnDemand) {
                                dataTextField = field.Name;
                                return false;
                            }
                        });
                    valueField = lookupDataView.findField(dataValueField);
                    textField = lookupDataView.findField(dataTextField);

                    if (row) {
                        text = row[textField.Index];
                        value = row[valueField.Index];
                    }
                    if (!valueField)
                        _app.alert('Invalid value field ' + dataValueField)
                    else if (!textField)
                        _app.alert('Invalid text field ' + dataTextField)
                    else if (lookupField.ItemsTargetController && textField) {
                        if (valueField)
                            values = [{ name: valueField.Name, value: value }];
                        if (textField)
                            values.push({ name: textField.Name, value: text });
                    }
                    else {
                        values = [{ name: lookupField.Name, value: value }];

                        if (lookupField.Index != lookupField.AliasIndex)
                            values.push({ name: aliasField.Name, value: text });
                        if (copy)
                            while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                                copyFromField = copyInfo[2];
                                copyField = lookupDataView.findField(copyFromField);
                                if (copyField || copyFromField == 'null')
                                    values.push({ name: copyInfo[1], value: copyField && row ? row[copyField.Index] : null });
                            }
                    }
                    return values;
                },
                _removeBasketItem: function (li, shiftToNext) {
                    if (!li.length) return;
                    var dataInput = dataInputOf(li),// li.closest('[data-input]'),
                        field = _input.elementToField(li),
                        dataView = field._dataView,
                        row = dataView.editRow(),
                        newValue = _app.csv.toArray(row[field.Index]),// (row[field.Index] || '').split(_app._simpleListRegex),
                        //item = (field.DynamicItems || field.Items)[parseInt(li.attr('data-index'))],
                        nextListItem;
                    // shift focus to the next item
                    if (shiftToNext) {
                        nextListItem = li.next();
                        if (!nextListItem.length)
                            nextListItem = li.prev();
                    }
                    else {
                        nextListItem = li.prev();
                        if (!nextListItem.length)
                            nextListItem = li.next();
                    }
                    nextListItem.addClass('app-focus');
                    // update the basket value
                    //newValue.splice(newValue.indexOf((item[0] || '').toString()), 1);
                    newValue.splice(newValue.indexOf(li.attr('data-value')), 1);
                    newValue = _app.csv.toString(newValue);
                    if (!newValue.length)
                        newValue = null;
                    li.remove();
                    dataInput.toggleClass('app-null', newValue == null);
                    _input.execute({ dataView: dataView, values: [{ name: field.Name, value: newValue }], skipDrawingInput: dataInput });
                    // focus on the input text box if the basket is empty
                    if (!newValue) {
                        dataInput.find('.app-control-helper').hide();
                        _input.methods.lookup.focus(dataInput);
                    }
                },
                _createItemFromText: function (field, dataInput, text) {
                    var controller = field.ItemsDataController,
                        view = field.ItemsNewDataView,
                        dataValueField = field.ItemsDataValueField,
                        dataTextField = field.ItemsDataTextField;

                    function createNewInForm() {
                        mobile.lookup({ field: field, create: true, dataInput: dataInput, value: text });
                    }

                    field._dataView.sessionRemove(lovKey(field/*.Name + '_listOfValues_'*/));
                    if (!mobile.busy() && text && field.ItemsDataController)
                        if (view && dataValueField && dataTextField && !field.Copy) {
                            _input.popup('hide');
                            _app.execute({
                                controller: field.ItemsDataController, view: view, command: 'Insert', values: [{ field: dataValueField }, { field: dataTextField, newValue: text }],
                                done: function (result) {
                                    if (result.rowsAffected && !result.errors.length) {
                                        var data = result[field.ItemsDataController],
                                            v = [data[dataValueField], data[dataTextField]];
                                        findInput().removeData('restoreText');
                                        _input.methods.lookup._useItemValue(field, v);
                                    }
                                    else
                                        createNewInForm();
                                }
                            });
                        }
                        else
                            createNewInForm();
                },
                _useItemValue: function (field, v, optional, broadcast) {
                    var value = v[0],
                        text = v[1] != null ? field.format(v[1]) : '',
                        dataView = field._dataView,
                        row = dataView.editRow(),
                        aliasField = dataView._allFields[field.AliasIndex],
                        input = findInput(),//$('.app-data-input'),
                        dataInput = dataInputOf(input),// input.closest('[data-input]'),
                        inner = dataInput.find('.app-control-inner'),
                        valueIndex, newValue, basketChanged, lov;

                    if (value == null) {
                        if (field.ItemsTargetController) return;
                        if (row[field.Index] != null) {
                            _input.methods.lookup._clearValue(field);
                            var placeholder = _input.fieldToPlaceholder(field),
                                input = findInput(dataInput).val(''/*input.val() ? placeholder : ''*/).removeData('original').removeData('restoreText');
                            _input.fitContainer(dataInput, input.closest('.app-data-input-container'));
                            dataInput.find('.app-data-input-placeholder').css('display', '');
                            if (input.length)
                                try {
                                    input[0].setSelectionRange(0, placeholder.length);
                                } catch (ex) {
                                }
                        }
                    }
                    else if (field.ItemsTargetController) {
                        // basket lookup input 
                        lov = _app.csv.toArray(row[field.Index]);
                        // find value index and the corresponding item index
                        if (value != null)
                            value = value.toString();
                        $(lov).each(function (index) {
                            if (value == this) {
                                valueIndex = index;
                                return false;
                            }
                        });
                        basketChanged = valueIndex == null;
                        if (basketChanged) {
                            lov.push(v[0]);
                            valueIndex = lov.length - 1;
                            newValue = _app.csv.toString(lov);
                            if (newValue == '')
                                newValue = null;
                        }
                        dataInput.toggleClass('app-null', newValue == null);
                        // update helper lists of interactive basket controls
                        findActivePage('[data-input-container="' + dataView._id + '"] [data-control="field"][data-field="' + field.Name + '"]').each(function () {
                            var control = $(this),
                                helper = control.find('.app-control-helper');
                            if (helper.length) {
                                helper.find('li').removeClass('app-focus');
                                if (basketChanged) {
                                    var newListItem = $('<li/>').text(text).attr('data-value', value).appendTo(helper.show().find('ul')),
                                        duplicateItem;
                                    if (field.is('lookup-distinct'))
                                        _input.addCount(newListItem, v[v.length - 1]);
                                    _input.drawing(control, false);
                                    if (field.ItemsStyle != 'DropDownList') {
                                        $(field.Items).each(function () {
                                            var item = this;
                                            if (item[0] == v[0]) {
                                                duplicateItem = true;
                                                return false;
                                            }
                                        });
                                        if (!duplicateItem)
                                            field.Items.push(v);
                                    }
                                    //control.data('redraw', false);
                                }
                                else
                                    //helper.find('li:eq("' + valueIndex + '")').addClass('app-focus').closest('[data-input]').addClass('app-has-focus');
                                    dataInputOf(helper.find('li:eq("' + valueIndex + '")').addClass('app-focus')).addClass('app-has-focus');
                                helper.css('visibility', '');
                            }
                        });
                        if (broadcast == false) {
                            row[field.Index] = newValue;
                            return;
                        }
                        text = '';
                        // reset lookup input
                        if (input.length) {
                            input.data({ original: text, last: text }).val(text)[0].setSelectionRange(0, 0);
                            dataInput.find('.app-data-input-placeholder').show();
                            inner.text(_input.fieldToPlaceholder(field));
                            inner.css('width', '');
                            _input.fitContainer(dataInput, input.closest('.app-data-input-container').width(''));
                            if (!basketChanged)
                                dataInput.addClass('app-has-focus').find('.app-control-helper').focus();
                            var inputOffset = dataInput.offset(),
                                inputHeight = dataInput.outerHeight(),
                                scrollable = findScrollable(input),
                                scrollableHeight = scrollable.height(),
                                scrollableOffset = scrollable.offset();
                            if (inputOffset.top + inputHeight > scrollableOffset.top + scrollableHeight)
                                scrollable.scrollTop(scrollable.scrollTop() + (inputOffset.top + inputHeight - (scrollableOffset.top + scrollableHeight) + 4));
                        }
                        // broadcast basket changes
                        if (basketChanged)
                            _input.execute({ dataView: dataView, values: [{ name: field.Name, value: newValue }], skipDrawingInput: dataInput });
                        return basketChanged;
                    }
                    else {
                        // standard lookup input
                        if (input.length)
                            input.data({ original: text, last: text }).val(text)[0].setSelectionRange(0, text.length);
                        inner.text(text);
                        if (input.length)
                            _input.fitContainer(dataInput, input.closest('.app-data-input-container').width(''));
                        dataInput.removeClass('app-null').find('.app-data-input-placeholder').hide();
                        if (row[field.Index] != value || field.Index != aliasField.Index && row[aliasField.Index] != text) {
                            var values = [{ name: field.Name, value: value }];
                            if (field.Index != aliasField.Index)
                                values.push({ name: aliasField.Name, value: text });
                            $(_input.methods.lookup._getCopyFields(field)/*dataView.session(field.Name + '_copyFields')*/).each(function (index) {
                                values.push({ name: this.toField, value: this.fromField == 'null' ? null : v[index + 2] });
                            });
                            _input.execute({ dataView: dataView, values: values, skipDrawingInput: dataInput });
                            if (!isTouchPointer) {
                                var advanceInContainer = field.is('lookup-auto-advance');
                                if (advanceInContainer && values.length && values[0].value != null)
                                    setTimeout(function () {
                                        _input.move(dataInput, 'right', 9, advanceInContainer);
                                    });
                            }

                        }
                    }
                }
            },
            'autocomplete': {
                render: function (options) {
                    _input.methods.lookup.render(options);
                },
                focus: function (target) {
                    return _input.methods.lookup.focus(target);
                },
                click: function (event) {
                    _input.methods.lookup.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.lookup.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.lookup.blur(event);
                },
                setup: function (event) {
                    _input.methods.lookup.setup(event);
                }
            },
            'dropdownlist': {
                render: function (options) {
                    _input.methods.lookup.render(options);
                },
                focus: function (target) {
                    return _input.methods.lookup.focus(target);
                },
                click: function (event) {
                    _input.methods.lookup.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.lookup.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.lookup.blur(event);
                },
                setup: function (event) {
                    _input.methods.lookup.setup(event);
                }
            },
            'radiobuttonlist': {
                render: function (options) {
                    _input.methods.listbox.render(options);
                },
                focus: function (target) {
                    return _input.methods.listbox.focus(target);
                },
                click: function (event) {
                    _input.methods.listbox.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.listbox.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.listbox.blur(event);
                }
            },
            'checkboxlist': {
                render: function (options) {
                    _input.methods.listbox.render(options);
                },
                focus: function (target) {
                    return _input.methods.listbox.focus(target);
                },
                click: function (event) {
                    _input.methods.listbox.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.listbox.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.listbox.blur(event);
                }
            },
            'listbox': {
                render: function (options) {
                    var dataInput = options.container,
                        inner = options.inner,
                        listOuter, listContainer, list,
                        field = options.field, v, t,
                        itemsStyle = field.ItemsStyle,
                        row = options.row,
                        canCreateItems,
                        fieldColumns = field.Columns, itemsPerColumn,
                        lov = field.DynamicItems || field.Items, valueList,
                        itemCount, itemIndex = 0, columnIndex = 0,
                        hscrollbarHandle;
                    v = row[field.Index];
                    if (options.editing) {
                        canCreateItems = _input.canCreateItems(field, row);
                        itemCount = lov.length;
                        if (fieldColumns)
                            itemsPerColumn = Math.ceil((itemCount + (canCreateItems ? 1 : 0)) / fieldColumns);
                        else {
                            itemsPerColumn = field.Rows;
                            if (!itemsPerColumn)
                                itemsPerColumn = 5;
                        }

                        dataInput.removeClass('app-null app-has-helper');
                        inner.removeClass('app-collapsed');
                        var focusedItemText = inner.find('.app-focus').text();

                        listContainer = inner.find('.app-data-list');
                        if (!listContainer.length) {
                            inner.empty();
                            if (scrollbarInfo.height)
                                listOuter = $('<span class="app-data-list-outer"/>').appendTo(inner);
                            listContainer = $('<span class="app-data-list" tabindex="0"/>').appendTo(listOuter || inner);
                            if (scrollbarInfo.height)
                                listContainer.css('margin-bottom', -scrollbarInfo.height);
                            hscrollbarHandle = $('<span class="app-hscrollbar2"><span class="app-hscrollbar-handle" data-draggable="hscrollbar"></span></span>').appendTo(inner).find('.app-hscrollbar-handle');
                            listContainer.on('scroll', function () {
                                if (listContainer.data('scrolling') == false)
                                    listContainer.removeData('scrolling');
                                else {
                                    updateHScrollbar(listContainer, hscrollbarHandle, true);
                                    var revealTimeout = hscrollbarHandle.data('reveal-timeout'),
                                        scrollbar = hscrollbarHandle.parent();
                                    scrollbar.addClass('app-scrollbar-reveal');
                                    clearInterval(revealTimeout);
                                    revealTimeout = setInterval(function () {
                                        scrollbar.removeClass('app-scrollbar-reveal')
                                        clearInterval(revealTimeout);
                                    }, 200);
                                    hscrollbarHandle.data('reveal-timeout', revealTimeout);
                                }
                            });
                        }
                        if (itemCount)
                            listContainer.empty();
                        listContainer.removeClass('app-inner-shadow-right app-inner-shadow-left app-inner-shadow-left-right');
                        if (itemsStyle == 'CheckBoxList' && v)
                            valueList = _app.csv.toArray(v.toString());
                        var addGroupCount = field.tagged('lookup-distinct'),
                            topCount = field.is('lookup-top'), originalLov = lov, nullItem;
                        if (topCount) {
                            topCount = parseInt(topCount);
                            if (topCount) {
                                lov = lov.slice(0);
                                if (lov.length && lov[0][0] == null && itemsStyle.match(/^(RadioButtonList|ListBox)$/)) {
                                    nullItem = lov[0];
                                    lov.splice(0, 1);
                                }
                                lov = lov.sort(compareTwoItems);
                                if (!valueList && v != null)
                                    valueList = [v.toString()];
                                if (valueList && valueList.length) {
                                    var selectedItems = [], remainingItems = [], i;
                                    lov.forEach(function (item) {
                                        var itemValue = item[0];
                                        if (itemValue != null && valueList.indexOf(itemValue) != -1)
                                            selectedItems.push(item);
                                        else
                                            remainingItems.push(item);
                                    });
                                    for (i = 0; i < remainingItems.length; i++) {
                                        if (selectedItems.length >= topCount)
                                            break;
                                        selectedItems.push(remainingItems[i]);
                                    }
                                    lov = selectedItems.sort(compareTwoItems);
                                }
                                lov.splice(topCount);
                                itemsPerColumn = topCount;
                                if (nullItem) {
                                    lov.splice(0, 0, nullItem);
                                    itemsPerColumn++;
                                }
                            }
                        }
                        $(lov).each(function (index) {
                            if (index % itemsPerColumn == 0)
                                list = $('<ul/>').appendTo(listContainer);
                            var item = this,
                                li = $('<li>').appendTo(list),
                                itemValue = item[0],
                                itemText = item[1];
                            if (topCount)
                                index = originalLov.indexOf(item);
                            li.attr('data-index', index);
                            if (itemText == null)
                                itemText = resourcesHeaderFilter.EmptyValue;
                            if (field.HtmlEncode)
                                li.text(itemText);
                            else
                                li.html(itemText);
                            if (addGroupCount && itemValue != null)
                                _input.addCount(li, item[item.length - 1]);
                            if (valueList && valueList.indexOf(itemValue == null ? '' : itemValue.toString()) != -1 || v == itemValue)
                                li.addClass('app-selected');
                            if (itemValue == null)
                                li.addClass('app-null');
                        });
                        if (topCount && originalLov.length > topCount)
                            $('<li>').appendTo(list).attr('data-index', 'more').text((originalLov.length - topCount - (nullItem ? 1 : 0)) + ' ' + labelMore);
                        var newItem = listContainer.find('[data-index="new"]');
                        if (!canCreateItems)
                            newItem.remove();
                        else if (!newItem.length) {
                            if ((!itemsPerColumn || itemCount % itemsPerColumn == 0) && !(itemCount < field.Rows) || !itemCount)
                                list = $('<ul/>').appendTo(listContainer);
                            /*li = */$('<li>').appendTo(list).attr('data-index', 'new').text(resourcesLookup.GenericNewToolTip);
                            //iconCarat('right', 'small', li);
                            //$('<span class="glyphicon glyphicon-chevron-right"/>').appendTo(li);
                        }
                        this._scrollItemIntoView(listContainer, false);
                        if (!itemCount && !(canCreateItems && listContainer.find('li').length == 1))
                            listContainer.children().addClass('app-hidden');

                        // re-focus item 
                        if (focusedItemText)
                            inner.find('li').each(function () {
                                var li = $(this);
                                if (focusedItemText == li.text()) {
                                    li.addClass('app-focus');
                                    return false;
                                }
                            });
                        var hscrollbar = listContainer.next().show();
                        if (itemCount)
                            updateHScrollbar(listContainer);
                        else
                            hscrollbar.hide();
                        if (v != null)
                            this._updateCollapsibleValue(field, dataInput);
                    }
                    else {
                        inner.find('.app-data-list,.app-list-value').remove();
                        if ((itemsStyle == 'CheckBoxList' || field.ItemsTargetController) && v) {
                            t = field.text(v, false);
                            if (field.HtmlEncode)
                                inner.text(t);
                            else
                                inner.html(t);
                        }
                        else {
                            _input.methods.text.render(options);
                            if (field.ItemsDataController && options.row[field.Index] != null && !field.tagged('lookup-details-hidden'))
                                $('<span class="app-field-object-ref app-feedback"/>').appendTo(inner).attr('title', resourcesMobile.LookupViewAction);
                        }
                    }
                    _input.methods.text._createFooter(options);
                },
                focus: function (target) {
                    _input.beforeFocus();
                    var list = target.find('.app-data-list');
                    if (!list.length)
                        list = target.closest('.app-data-list');
                    list.focus();
                    this._focusItem(list);
                    this._scrollItemIntoView(list);
                    return false;
                },
                click: function (event) {
                    var target = $(event.target),
                        li = target.closest('li'),
                        listInner, scrollable,
                        field, dataView, itemsStyle,
                        lov, values, newValue, copy, copyIndex, copyToField, copyFromField;
                    if (!_input.cancel() || li.parent().is('.app-hidden')) return;
                    hideTooltip();

                    if (li.length) {
                        listInner = li.closest('.app-data-list');
                        field = _input.elementToField(li);
                        itemsStyle = field.ItemsStyle;
                        if (field._dataView._busy() || li.parent().is('.app-hidden')) return;

                        var dataInput = dataInputOf(listInner),// listInner.closest('[data-input]'),
                            dataIndex = li.attr('data-index');
                        if (dataIndex == 'new') {
                            this._focusItem(li);
                            mobile.lookup({ field: field, create: true, dataInput: dataInput });
                            event.preventDefault();
                            return;
                        }
                        if (dataIndex == 'more') {
                            event.preventDefault();
                            _input.editor({
                                dataView: dataView, fieldName: field.Name
                            });
                            return;
                        }

                        dataView = field._dataView;
                        lov = field.DynamicItems || field.Items;
                        if (lov.length)
                            if (itemsStyle == 'CheckBoxList') {
                                li.toggleClass('app-selected');
                                values = [];
                                listInner.find('.app-selected').each(function () {
                                    var index = parseInt($(this).attr('data-index')),
                                        item = lov[index],
                                        itemValue = item[0];
                                    values.push((itemValue != null ? itemValue : '').toString());
                                });
                                //dataInput.data('redraw', false);
                                if (field.ItemsTargetController || itemsStyle == 'CheckBoxList')
                                    newValue = _app.csv.toString(values);
                                else
                                    newValue = values.join(',');
                                clearTimeout(listInner.data('timeout'));
                                listInner.data('timeout', setTimeout(function () {
                                    _input.execute({ dataView: dataView, values: [{ name: field.Name, value: newValue == '' ? null : newValue }], skipDrawingInput: dataInput });
                                }, 250));
                            }
                            else {
                                if (li.is('.app-selected')) {
                                    this._focusItem(listInner);
                                    _input.methods.listbox._updateCollapsibleValue(field, dataInput);
                                    return;
                                };
                                listInner.find('.app-selected').removeClass('app-selected');
                                li.addClass('app-selected');
                                var item = lov[parseInt(li.attr('data-index'))];
                                _input.drawing(dataInput, false);
                                clearTimeout(listInner.data('timeout'));
                                listInner.data('timeout', setTimeout(function () {
                                    _input.methods.listbox._useItemValue(field, item);
                                    _input.methods.listbox._updateCollapsibleValue(field, dataInput);
                                    if (!isTouchPointer && field.is('lookup-auto-advance') && item[0] != null)
                                        _input.move(dataInput, 'right', 9);
                                }, itemsStyle == 'RadioButtonList' ? 250 : 10));
                                //dataInput.data('redraw', false);
                                //_input.execute({ dataView: dataView, values: [{ name: field.Name, value: item[0] }] });
                            }
                        scrollable = findScrollable(listInner);
                        if (scrollable.height() > listInner.height())
                            listInner.focus();
                        this._scrollItemIntoView(li);
                        this._focusItem(li);
                        event.preventDefault();
                    }
                    else {
                        var inner = target.closest('.app-collapsed');
                        if (inner.length) {
                            inner.removeClass('app-collapsed');
                            li = inner.find('.app-selected').first();
                            if (li.length) {
                                this._scrollItemIntoView(li);
                                this._focusItem(li);
                            }
                        }
                    }
                },
                //clickButton: function (event, feedback) {
                //    return _input.methods.lookup.clickButton(event, feedback);
                //},
                blur: function (event) {
                    //_input.methods.lookup.blur(event);
                },
                _updateCollapsibleValue: function (field, dataInput) {
                    if (field.is('lookup-collapsible')) {
                        var inner = dataInput.find('.app-control-inner'),
                            value = inner.find('.app-list-value'),
                            lov, hasValue;
                        if (!value.length) {
                            value = $('<span class="app-list-value"/>').appendTo(inner.addClass('app-has-list-value'));
                            materialIcon('material-icon-expand-more', inner).attr('title', resourcesForm.Maximize);
                        }
                        lov = [];
                        inner.find('ul').filter(function () { return !$(this).is('app-hidden') }).find('.app-selected').each(function () {
                            lov.push($(this).html());
                        });
                        value.html(lov.join(', '));
                        hasValue = lov.length > 0;
                        inner.addClass('app-collapsible').toggleClass('app-collapsed', hasValue);//.attr('title', hasValue ? tooltip : null)
                    }
                },
                _scrollItemIntoView: function (item, syncScrollbar) {
                    if (!item.is('.app-selected,.app-focus'))
                        item = item.find('.app-selected,.app-focus').first();
                    if (item.length) {
                        var offset = item.offset(),
                            width = item.outerWidth(),
                            container = item.closest('.app-data-list'),
                            containerWidth = container.width(),
                            scrollGap = Math.min(width * .2, containerWidth * .1),
                            containerOffset = container.offset();
                        if (offset.left < containerOffset.left)
                            container.data('scrolling', false).scrollLeft(item.parent().prev().length ? (container.scrollLeft() + offset.left - containerOffset.left - scrollGap) : 0);
                        else if (offset.left + width > containerOffset.left + containerWidth)
                            container.data('scrolling', false).scrollLeft(container.scrollLeft() + offset.left - containerOffset.left - (containerWidth - width - scrollGap));
                        if (syncScrollbar != false)
                            updateHScrollbar(container, null, false);
                    }
                },
                _focusItem: function (item) {
                    if (!isTouchPointer) {
                        var container = item.closest('.app-data-list'),
                            allItems = container.find('li').removeClass('app-focus');
                        if (!item.is('li'))
                            item = container.find('.app-selected').first();
                        if (!item.length)
                            item = allItems.first();
                        item.addClass('app-focus');
                    }
                },
                _useItemValue: function (field, v, isNew) {
                    var dataView = field._dataView,
                        row,
                        values = [{ name: field.Name, value: v[0] }],
                        copy = field.Copy, copyIndex,
                        hasAlias = field.Index != field.AliasIndex, newValue;
                    if (field.ItemsTargetController) {
                        row = dataView.editRow();
                        newValue = row[field.Index] || '';
                        if (newValue)
                            newValue += ',';
                        newValue += v[0].toString();
                        values[0].value = newValue;
                    }
                    else {
                        if (hasAlias)
                            values.push({ name: dataView._allFields[field.AliasIndex].Name, value: v[1] });
                        if (copy) {
                            copyIndex = 2;
                            while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                                copyToField = copyInfo[1];
                                copyFromField = copyInfo[2];
                                if (dataView.findField(copyToField))
                                    values.push({ name: copyToField, value: copyFromField == 'null' ? null : v[copyIndex++]/* || _input.fieldToPlaceholder(copyField)*/ });
                            }
                        }
                    }
                    if (!isNew) {
                        _input.execute({ dataView: dataView, values: values, skipPopulateField: field });
                        values.splice(0, hasAlias ? 2 : 1);
                    }
                    if (values.length)
                        _input.execute({ dataView: dataView, values: values, populateDynamicLookups: false, skipPopulateField: field });
                }
            }
        },
        //
        // Global methods of Universal Input API
        //
        of: function (element, selector) {
            if (element && !element.jquery)
                element = $(element);
            var dataInput = element.closest('[data-input]');
            if (!dataInput.length)
                dataInput = element.find('.app-data-input').closest('[data-input]');
            return selector ? dataInput.find(selector) : dataInput;
        },
        restoreLastPopup: function () {
            var lastInputBeforeScroll = this._lastInputBeforeScroll,
                dropArrow, scrollable, scrollableOffset, lastInputOffset;
            if (lastInputBeforeScroll && lastInputBeforeScroll.length && !isTouchPointer) {
                dropArrow = _input.elementToButton(lastInputBeforeScroll);//lastInputBeforeScroll.closest('[data-input]').find('.app-data-input-button');
                if (dropArrow.length) {
                    scrollable = findScrollable();
                    scrollableOffset = scrollable.offset();
                    lastInputOffset = lastInputBeforeScroll.offset();
                    if (scrollableOffset.top < lastInputOffset.top && lastInputOffset.top + lastInputBeforeScroll.outerHeight() < scrollableOffset.top + scrollable.height()) {
                        var altKeyDown = $.Event('keydown');
                        altKeyDown.which = 40;
                        altKeyDown.altKey = true;
                        findInput().trigger(altKeyDown);
                    }
                }
            }
        },
        fieldToPlaceholder: function (field) {
            var placeholder = '',
                lov;
            if (field.Watermark)
                placeholder = field.Watermark;
            else
                if (field.ItemsTargetController)
                    placeholder = resourcesLookup.AddItem;
                else if (field.ItemsStyle && field.ItemsStyle != 'CheckBox' && field.ItemsStyle != 'CheckBoxList' && !field.ItemsTargetController) {
                    lov = field.DynamicItems || field.Items;
                    placeholder = lov && lov.length && lov[0][0] == null ? lov[0][1] : resourcesLookup.SelectLink;
                }
                else if (!field.AllowNulls)
                    placeholder = resourcesValidator.Required;
            return placeholder;
        },
        eventToButton: function (event) {
            return this.elementToButton(event.target);
        },
        elementToButton: function (target) {
            //return $(target).closest('[data-input]').find('.app-data-input-button');
            return dataInputOf(target, '.app-data-input-button');
        },
        eventToMethod: function (event) {
            return this.elementToMethod(event.target);
        },
        elementToMethod: function (target) {
            var dataInput = dataInputOf(target);// $(target).closest('[data-input]');
            return _input.methods[dataInput.attr('data-input')];
        },
        eventToField: function (event) {
            return this.elementToField($(event.target));
        },
        elementToField: function (target) {
            var control = target.closest('[data-field]'),
                fieldName = control.attr('data-field'),
                inputContainer = target.closest('[data-input-container]'),
                dataView, field,
                result;
            if (fieldName && inputContainer.length) {
                dataView = _app.find(inputContainer.attr('data-input-container'));
                if (dataView)
                    field = dataView.findField(fieldName);
                return field;
            }
        },
        inputsOf: function (dataContainer) {
            return dataContainer.find('[data-input]:not([data-input="none"])').filter(visibleFilterFunc);
        },
        peersOf: function (dataInput) {
            var inputContainer = dataInput.closest('[data-input-container]'),
                selectedTextInputIndex, textInputList;
            if (!inputContainer.length)
                inputContainer = $body;
            dataInput.data('active', true);
            textInputList = inputContainer.find('[data-input]:not([data-input="none"])').filter(visibleFilterFunc).each(function (index) {
                var textInputContainer = $(this);
                if (textInputContainer.data('active')) {
                    selectedTextInputIndex = index;
                    textInputContainer.removeData('active');
                    return false;
                }
            });
            return {
                list: textInputList, index: selectedTextInputIndex
            };
        },
        eventToDirection: function (event) {
            var that = event.target,
                moveDir,
                keyCode = event.keyCode || event.which;

            function isForm() {
                return $(that).closest('[data-layout="form"]').length > 0;
            }

            // Tab
            if (keyCode == 9)
                moveDir = event.shiftKey ? 'left' : 'right';
            // Left
            if (keyCode == 37 && this.selectionStart == 0 && that.selectionEnd == 0 && !isForm())
                moveDir = 'left';

            // Right
            if (keyCode == 39 && that.value && that.selectionStart == that.value.length && !isForm())
                moveDir = 'right';
            // Up 
            if ((keyCode == 38 && !event.ctrlKey || keyCode == 13 && event.shiftKey) && (that.tagName != 'TEXTAREA' || !that.selectionStart) && that.tagName != 'DIV')
                moveDir = 'up';
            // Down
            if ((keyCode == 40 && !event.ctrlKey || keyCode == 13 && !event.shiftKey)) {
                var isTextArea = that.tagName == 'TEXTAREA',
                    isInput = that.tagName == 'INPUT',
                    isRtf = isRtfEditor(that),
                    selectionStart = that.selectionStart,
                    value = that.value;
                if (!isRtf && (!(isInput || isTextArea) || isInput || (isTextArea && (keyCode == 40 && selectionStart == value.length || keyCode == 13 && selectionStart == 0 && that.selectionEnd == value.length))))
                    moveDir = 'down';
            }
            return moveDir;

        },
        //labelState: function (dataInput, focused) {
        //    if (!dataInput.is('[data-control]'))
        //        dataInput = dataInput.closest('[data-control]');
        //    var fieldName = dataInput.attr('data-field'),
        //        labelControl = dataInput.closest('[data-container]').find('[data-control="label"][data-field="' + fieldName + '"]');
        //    if (!isTouchPointer || dataInput.find('.app-data-input').length)
        //        labelControl.toggleClass('app-has-focus', focused != false);
        //},
        blur: function (dataInput) {
            this.move(dataInput);
        },
        move: function (fromDataInput, direction, keyCode, containerType) {
            if (!fromDataInput.is('[data-input]'))
                fromDataInput = dataInputOf(fromDataInput);// fromDataInput.closest('[data-input]');
            var textInput = findInput(fromDataInput),
                isForm = fromDataInput.closest('[data-layout="form"]').length > 0,
                toDataInput = typeof direction == 'string' ? null : direction,
                nextDataInputList;

            function focusNextInput(toDataInput) {
                if (!_input.valid()) return;
                var input = $(toDataInput),
                    inputType = input.attr('data-input'),
                    inputMethod = _input.methods[inputType],
                    hotSpot = input.find('[data-input-hotspot]');
                if (inputMethod && inputMethod.focus)
                    inputMethod.focus(hotSpot.length ? hotSpot : input, fromDataInput);
            }

            hideTooltip();

            // locate position of input in the current container
            if (!toDataInput && direction) {
                if (isForm) {
                    if (direction == 'down')
                        direction = 'right';
                    if (direction == 'up')
                        direction = 'left';
                }

                var peers = _input.peersOf(fromDataInput),
                    dataContainer = fromDataInput.closest('[data-container]'),
                    dataColumns = parseInt(dataContainer.attr('data-columns')),
                    fromDataInputColumnIndex, peerDataContainer;

                if (dataColumns > 1) {
                    nextDataInputList = _input.inputsOf(dataContainer);
                    fromDataInputColumnIndex = nextDataInputList.toArray().indexOf(fromDataInput[0]);
                }

                // select another input according to user choice
                if (direction == 'left') {

                    if (dataColumns > 1) {
                        // move in a multi-column row set
                        peerDataContainer = dataContainer.prev();
                        if (peerDataContainer.is('[data-container="row"][data-columns]')) {
                            nextDataInputList = _input.inputsOf(peerDataContainer);
                            if (nextDataInputList.length)
                                toDataInput = nextDataInputList[fromDataInputColumnIndex];
                        }
                        else {
                            peerDataContainer = dataContainer.nextAll('[data-container="row"][data-columns]').last();
                            if (peerDataContainer.length) {
                                nextDataInputList = _input.inputsOf(peerDataContainer);
                                if (nextDataInputList.length)
                                    toDataInput = nextDataInputList[fromDataInputColumnIndex - 1];
                            }
                        }
                    }

                    if (!toDataInput)
                        if (peers.index) {
                            // move to the previous input
                            toDataInput = peers.list[peers.index - 1];
                        }
                        else {
                            if (keyCode == 9) {
                                // move to the last input of previous container
                                nextDataInputList = _input.find(fromDataInput, 'up');
                                if (nextDataInputList && nextDataInputList.length)
                                    toDataInput = nextDataInputList[nextDataInputList.length - 1];
                            }
                        }
                }
                else if (direction == 'right') {
                    if (dataColumns > 1) {
                        // move in a multi-column row set
                        peerDataContainer = dataContainer.next();
                        if (peerDataContainer.is('[data-container="row"][data-columns]')) {
                            nextDataInputList = _input.inputsOf(peerDataContainer);
                            if (nextDataInputList.length) {
                                toDataInput = nextDataInputList[fromDataInputColumnIndex];
                                if (!toDataInput && fromDataInputColumnIndex) {
                                    // we are focused on the last input in the incomplete column of a row set
                                    peerDataContainer = dataContainer.nextAll('[data-container="row"][data-columns]').last();
                                    if (peerDataContainer.length) {
                                        nextDataInputList = _input.inputsOf(peerDataContainer);
                                        var nextInput = $(nextDataInputList[fromDataInputColumnIndex - 1]);
                                        if (nextInput.length) {
                                            peers = _input.peersOf(nextInput);
                                            if (peers.index == peers.list.length - 1)
                                                toDataInput = fromDataInput;
                                            else
                                                fromDataInput = nextInput;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            peerDataContainer = dataContainer.prevAll('[data-container="row"][data-columns]').last();
                            if (peerDataContainer.length) {
                                nextDataInputList = _input.inputsOf(peerDataContainer);
                                if (nextDataInputList.length)
                                    toDataInput = nextDataInputList[fromDataInputColumnIndex + 1];
                            }
                        }
                    }
                    if (!toDataInput)
                        if (peers.index < peers.list.length - 1) {
                            // move to the next input
                            toDataInput = peers.list.get(peers.index + 1);
                        }
                        else {
                            if (keyCode == 9) {
                                // move the the first input of the next  container
                                nextDataInputList = _input.find(fromDataInput, 'down');
                                if (nextDataInputList && nextDataInputList.length)
                                    toDataInput = nextDataInputList[0];
                            }
                        }
                }
                else if (direction == 'up' || direction == 'down') {
                    // move to the input with the same index in the previous container
                    nextDataInputList = _input.find(fromDataInput, direction);
                    if (nextDataInputList)
                        toDataInput = nextDataInputList[nextDataInputList.length > peers.index ? peers.index : nextDataInputList.length - 1];
                }
                if (isForm && !toDataInput)
                    toDataInput = fromDataInput;

            }

            var containerSelector = '[data-container="' + containerType + '"]',
                containerTypeIsString = typeof containerType === 'string',
                sameContainer = containerTypeIsString && textInput.closest(containerSelector).first().is($(toDataInput).closest(containerSelector).first()),
                autoFocus, nextContainer;
            if (!containerTypeIsString || sameContainer) {
                if (toDataInput && !sameContainer && direction == 'right') {
                    nextContainer = $(toDataInput).closest('[data-container]').first();
                    autoFocus = nextContainer.find('[data-control][data-focus]').filter(visibleFilterFunc);
                    if (autoFocus.length && !fromDataInput.closest('[data-container]').first().is(nextContainer))
                        toDataInput = autoFocus.first();
                }

                textInput.blur();
                if (toDataInput)
                    focusNextInput(toDataInput);
                //if (isTouchPointer) {
                //    textInput.blur();
                //    if (toDataInput)
                //        focusNextInput(toDataInput);
                //}
                //else
                //    setTimeout(function () {
                //        textInput.blur();
                //        if (toDataInput)
                //            setTimeout(function () {
                //                focusNextInput(toDataInput);
                //            }, 10);
                //    }, 10);
            }
        },
        find: function (inputContainer, dir) {
            var inputContainerList,
                selectedInputContainerIndex,
                result,
                changed;
            if (!inputContainer.is('[data-input-container]'))
                inputContainer = inputContainer.closest('[data-input-container]');
            inputContainerList = inputContainer.data('active', true).parent().find('[data-input-container]');
            $(inputContainerList).each(function (index) {
                var c = $(this);
                if (c.data('active')) {
                    selectedInputContainerIndex = index;
                    c.removeData('active');
                    return false;
                }
            });
            if (dir == 'up')
                result = selectedInputContainerIndex == 0 ? null : $(inputContainerList.get(selectedInputContainerIndex - 1));
            else
                result = selectedInputContainerIndex < inputContainerList.length - 1 ? $(inputContainerList.get(selectedInputContainerIndex + 1)) : null;
            return result ? result.find('[data-input]:not([data-input="none"])') : null;
        },
        popup: function () {
            var that = this,
                popup = that._popup;
            if (arguments.length == 1) {
                if (arguments[0] == 'hide')
                    $(popup).hide();
                else
                    return $(popup).is(arguments[0]);
            }
            else {
                if (!popup) {
                    popup = that._popup = $('<div class="app-data-input-popup"></div>').hide().appendTo($body);
                    var ul = $('<ul/>').appendTo(popup);
                    //if (scrollbarInfo.width)
                    //    ul.appendTo($('<div></div>').appendTo(popup));
                    popup.data('ul', ul);
                }
                return popup;
            }
        },
        render: function (options) {
            var container = options.container,
                inner = options.inner,
                dataView = options && options.dataView || _app.find(container.closest('[data-input-container]').attr('data-input-container')),
                field = options.field,
                row = options.row,
                editing = options.editing,
                invisibleContainers,
                placeholder,
                inputType, oldInputType, newInputType,
                inputMethod;
            if (dataView && !field) {
                if (container.is('[data-layout]') && !container.data('prepared'))
                    return;
                editing = editing != null ? editing : dataView.extension().editing();
                container.attr('data-state', editing ? 'write' : 'read');
                if (!row)
                    row = dataView.extension().commandRow();
                if (editing) {
                    container.find('[data-control="field"]').each(function () {
                        var c = $(this),
                            node = c.data('node'),
                            fieldName, field, readOnly;
                        if (node.ready) {
                            fieldName = c.attr('data-field');
                            field = dataView.findField(fieldName);
                            if (field && field.Type != 'DataView')
                                _input.render({ container: c, dataView: dataView, field: field, editing: editing, row: row });
                        }
                    });
                }
                else {
                    // undo "write" mode of input
                    container.find('[data-control="field"]').removeAttr('data-input');
                }
                //if (isLayout)
                //    container.removeClass('app-dirty');
            }
            else {
                var editable,
                    node = container.data('node');
                if (!node || !node.ready)
                    return;
                if (!container.is(':visible')) {
                    node.dirty = true;
                    return;
                }
                if (field) {
                    editable = editing && container.attr('data-read-only') != 'true' && !field.isReadOnly() && !field._inputReadOnly;
                    inputType = (field.ItemsStyle || (field.OnDemand ? 'blob' : 'text')).toLowerCase();
                    oldInputType = container.attr('data-input');
                    newInputType = editable ? inputType : 'none';
                    container.attr('data-input', newInputType);
                    if (oldInputType && oldInputType != newInputType) {
                        if (!inner)
                            inner = container.find('.app-control-inner');
                        inner.prevAll().remove();
                        inner.nextAll().remove();
                        inner.empty();
                    }
                    //if (editing && !editable && !container.attr('title'))
                    //    container.attr('title', field.HeaderText);
                    placeholder = container.attr('data-placeholder');
                    if (placeholder)
                        field.Watermark = placeholder == '$label' ? field.HeaderText : placeholder;
                }
                else {
                    // init data input properies here
                }
                inputMethod = _input.methods[inputType];
                if (inputMethod) {
                    if (!inner)
                        inner = container.find('.app-control-inner');
                    if (inner.length)
                        inner.addClass('app-field-data');
                    else
                        inner = container;
                    inputMethod.render({
                        container: container, inner: inner, dataView: dataView, field: field, row: row, editing: editable//, fit: options.fit
                    });
                }
            }

        },
        createContainer: function (dataInput) {
            var contents = dataInput.children(),
                textContainer = $('<div class="app-data-input-container"></div>').appendTo(dataInput);
            contents.each(function () {
                var child = this;
                if (!child.className.match(/\b(app-control-(helper|toolbar|frame))\b/))
                    child.style.visibility = 'hidden';
            });
            this.fitContainer(dataInput, textContainer);
            return textContainer;
        },
        fitContainer: function (dataInput, textContainer, value) {
            // create an input container trailer with data input requires auto-sizing to make auto-expansion of data input more natural when typing
            var button = dataInput.find('.app-data-input-button'),
                hasHelper = dataInput.is('.app-has-helper'), lastHelperChild,
                autoSizing = dataInput.attr('data-size') == 'auto' || button.length,
                input, inner, innerText, innerHasTrailer, anchor, textContainerOffset,
                restoreText;
            if (!textContainer)
                textContainer = dataInput.find('.app-data-input-container');
            if (hasHelper) {
                anchor = dataInput.find('.app-control-inner');
                if (anchor.length)
                    textContainer.css({
                        left: anchor.offset().left - dataInput.offset().left,
                        top: anchor.offset().top - dataInput.offset().top
                    });
            }
            if (textContainer) {
                if (autoSizing && !textContainer.is('.app-data-input'))
                    textContainer = dataInput.find('.app-data-input');
                if (textContainer && textContainer.is('.app-data-input')) {
                    input = textContainer;
                    textContainer = input.closest('.app-data-input-container')
                    if (autoSizing) {
                        if (arguments.length < 3)
                            value = input.val();
                        inner = dataInput.find('.app-control-inner');
                        innerText = inner.text();
                        if (innerText != value)
                            if (value.length && innerText.length <= value.length + 2) {
                                restoreText = input.data('restoreText');
                                if (!restoreText)
                                    input.data('restoreText', innerText);
                                inner.addClass('app-control-inner-trailer');
                                inner.text(value);
                            }
                        textContainer.width('')
                    }
                }
            }
            // move the button when needded
            var hasInputHelper = dataInput.is('.app-has-helper'),
                inputHeight;
            if (button.length) {
                if (!inner)
                    inner = dataInput.find('.app-control-inner');
                inputHeight = (inner.length ? inner : dataInput)[0].getBoundingClientRect().height
                button.css('visibility', '');
                textContainer.css({
                    height: inputHeight,
                    width: hasInputHelper ? inner.outerWidth() : Math.ceil(button.position().left) - parseCss(textContainer, 'padding-left') * 2 + 3
                });
                if (hasHelper && anchor.length && textContainer.length) {
                    var textContainerTop = textContainer.offset().top;
                    // text container may need to be re-adjusted if button has shifted to the new position
                    textContainer.css({
                        left: anchor.offset().left - dataInput.offset().left,
                        top: anchor.offset().top - dataInput.offset().top
                    });
                    // if the text input has shifted then move the open popup to the new position
                    textContainerOffset = textContainer.offset();
                    if (textContainerTop != textContainerOffset.top && _input.popup(':visible'))
                        _input.popup().css({
                            left: textContainerOffset.left,
                            top: button.is('.app-caret-u') ? textContainerOffset.top - _input.popup().outerHeight() : textContainerOffset.top + textContainer.outerHeight()
                        });
                }
            }
        },
        execute: function (options) {
            var dataView = options.dataView,
                values = options.values,
                //basketFields,
                originalValueCount = values.length,
                populateDynamicLookups = options.populateDynamicLookups,
                skipPopulateField = options.skipPopulateField,
                skipDrawingInput = options.skipDrawingInput,
                container,
                contextDependencyMap = {},
                causesCalculate,
                evalArgs,
                broadcastValues,
                row;

            if (skipDrawingInput) {
                _input.drawing(skipDrawingInput, false);
                if (!skipPopulateField)
                    skipPopulateField = dataView.findField(skipDrawingInput.attr('data-field'));
            }
            if (skipPopulateField)
                skipPopulateField.skipPopulate = true;

            if (typeof dataView == 'string')
                dataView = _app.find(dataView);
            else if (!dataView)
                dataView = mobile.pageInfo().dataView;
            dataView._ignoreUnsavedChanges = false;

            container = options.container || findActivePage('[data-input-container="' + dataView._id + '"]')

            row = dataView.editRow();

            // 9. detect any Context Field dependencies and inject them into the values
            if (populateDynamicLookups != false)
                $(values).each(function () {
                    var fv = this,
                        field = dataView.findField(fv.name || fv.Name);
                    if (field)
                        dataView._enumerateContextFieldValues(field, values, contextDependencyMap, row);
                });

            // 1. copy values to the "edit" row
            if (populateDynamicLookups != false)
                $(values).each(function () {
                    var fv = this,
                        name = fv.name || fv.Name,
                        field = dataView.findField(name);
                    if (field) {
                        if (field.CausesCalculate && !causesCalculate)
                            causesCalculate = field;
                        row[field.Index] = fv.name ? fv.value : fv.NewValue;
                        //if (field.ItemsTargetController && field.ItemsDataController) {
                        //    if (!basketFields)
                        //        basketFields = [];
                        //    basketFields.push(field);
                        //}
                    }
                });
            //if (basketFields) {
            //    // verify bakset field items and request them from the server as needed
            //    var getItemsBatch = [];
            //    basketFields.forEach(function (field) {
            //        var found, 
            //            lov = field.DynamicItems || field.Items,
            //            valueList = _app.csv.toArray(row[field.Index]);
            //        lov.forEach(function (item) {
            //            var index = valueList.indexOf(item[0]);
            //            if (index != -1)
            //                valueList.splice(index, 1);
            //        });
            //        if (valueList.length) {
            //            getItemsBatch.push({
            //                controller: field.ItemsDataController, view: field.ItemsDataView,
            //                filter: [{ name: field.ItemsDataValueField, values: valueList }],
            //                fieldFilter: [field.ItemsDataValueField, field.ItemsDataTextField]
            //            });
            //        }
            //    });
            //}

            // 2. evaluate visibility and prepare a list of values that require redrawing
            if (populateDynamicLookups != false) {
                evalArgs = { dataView: dataView, row: row, fields: [], container: container };
                _input.evaluate(evalArgs);
                if (evalArgs.visibilityChanged) {
                    clearTimeout(_window._visibilityChangeTimeout);
                    _window._visibilityChangeTimeout = setTimeout(function () {
                        pageResized();
                    }, 10);
                }
            }
            if (evalArgs && evalArgs.fields.length) {
                broadcastValues = values.slice();
                $(broadcastValues).each(function () {
                    var v = this,
                        f = dataView.findField(v.name || v.Name),
                        index = evalArgs.fields.indexOf(f);
                    if (index != -1)
                        evalArgs.fields.splice(index, 1);

                });
                $(evalArgs.fields).each(function () {
                    broadcastValues.push({ name: this.Name });
                });
            }
            else
                broadcastValues = values;

            // 3. broadcast changes to the inputs in the layout
            $(broadcastValues).each(function () {
                var fv = this,
                    name = fv.name || fv.Name,
                    field = dataView.findField(name),
                    editing = dataView.editing(),
                    controls = $(container).find('[data-control][data-field="' + name + '"]');
                controls.each(function () {
                    var c = $(this),
                        type = c.attr('data-control'),
                        editable;
                    if (type != 'label') {
                        editable = editing && c.attr('data-read-only') != 'true' && !field.isReadOnly();
                        if (!_input.drawing(c))
                            _input.drawing(c, true);
                        else //if (options.redraw != false || !editable)
                            _input.render({ container: c, inner: c.find('.app-control-inner'), dataView: dataView, field: field, row: row, editing: editable });
                    }
                });
            });

            // 4. Initiate Calculate event on the server for the first field that causes calculate
            if (causesCalculate && options.raiseCalculate != false)
                dataView._raiseCalculate(causesCalculate, causesCalculate);

            // 5. Populate dynamic lookups
            if (populateDynamicLookups != false && originalValueCount != values.length)
                if (dataView._busy())
                    dataView._pendingPopulate = true;
                else
                    dataView._raisePopulateDynamicLookups();

            // 6. Sync echos
            syncEmbeddedViews(container.closest('.app-wrapper'), true);

            if (skipPopulateField)
                skipPopulateField.skipPopulate = false;
            if (dataView.tagged('modal-auto-grow'))
                resetPageHeight();
        },
        evaluate: function (options) {
            var dataView = options.dataView,
                row = options.row,
                scope = options.scope,
                fields = options.fields,
                inputContainer = options.container,
                blockVisibilityChanged,
                visibilityChanged = [],
                hiddenValues = [],
                styleExpressions = [];

            $(dataView._expressions).each(function () {
                var exp = this,
                    expScope = exp.Scope,
                    f, result, changed,
                    visPrefix = '',
                    visContainers;
                if (exp.Type == 1)
                    if (expScope == 5 && (!scope || scope.readOnly)) {
                        // read-only
                        f = dataView.findField(exp.Target);
                        if (f) {
                            result = !!dataView._evaluateJavaScriptExpressions([exp], row, false);
                            changed = f._inputReadOnly != result;
                            f._inputReadOnlyChanged = changed;
                            f._inputReadOnly = result;
                            if (changed && fields && fields.indexOf(f) == -1)
                                fields.push(f);
                        }
                    }
                    else if ((expScope == 3 || expScope == 2 || expScope == 7) && inputContainer && (!scope || scope.visibility)) {
                        // 3 - field visibility
                        // 2 - category visibility
                        // 7 - custom visibility of elements with "data-visible-when" attributes
                        // field visibility
                        result = !!dataView._evaluateJavaScriptExpressions([exp], row, false);
                        changed = exp._visChanged != result;
                        exp._visChanged = result;
                        if (changed) {
                            options.visibilityChanged = true;
                            if (expScope == 3)
                                visPrefix = 'f:';
                            else if (expScope == 2) {
                                visPrefix = 'c:';
                                blockVisibilityChanged = true;
                            }
                            else if (expScope == 7)
                                visPrefix = 'v:';
                            visContainers = inputContainer.find('[data-visibility="' + visPrefix + exp.Target + '"]').css('display', result ? '' : 'none');
                            if (result)
                                $(visContainers).each(function () {
                                    var node = $(this).data('node');
                                    if (node)
                                        visibilityChanged.push(node);
                                });
                            else if (expScope == 3) {
                                var field = dataView.findField(exp.Target);
                                if (field && row[field.Index] != null && field.is('clear-on-hide')) {
                                    hiddenValues.push({ name: field.Name });
                                    if (field.Index != field.AliasIndex)
                                        hiddenValues.push({ name: dataView._allFields[field.AliasIndex].Name });
                                }
                            }

                            // TODO: check if a tab needs to be hidden

                        }
                    }
                    else if (expScope == 1 && (!scope || scope.readOnly))
                        styleExpressions.push(exp);
            });
            if (styleExpressions.length && inputContainer)
                evaluateConditionalStyleExpressions(dataView, row, inputContainer, styleExpressions);
            if (!options.ignoreFormButtons && (dataView.isDynamicAction('Custom') || dataView.isDynamicAction('Form')))
                inputContainer.find('[data-action]').each(function () {
                    var control = $(this),
                        path = control.attr('data-action'),
                        action;
                    if (dataView.isDynamicAction(path)) {
                        action = dataView.findAction(path);
                        if (action) {
                            dataView._clonedRow = row;
                            control.toggleClass('app-disabled', !dataView._isActionAvailable(action));
                            dataView._clonedRow = null;
                        }
                    }
                });

            if (blockVisibilityChanged && dataView._isWizard)
                wizard('status');
            if (visibilityChanged.length)
                ensureLayoutControls({ controls: $(visibilityChanged) });
            if (blockVisibilityChanged)
                fitTabs();
            if (!options.ignoreDynamicButtons && dataView.isDynamicAction('Form')) {
                var buttons = inputContainer.closest('.ui-page').find('.app-bar-buttons'),
                    doRefreshFormButtons, doRefreshToolbarButtons,
                    buttonList = [], newButtonList = [], newIconList = [], context = [];
                if (buttons.length) {
                    buttons.first().find('.ui-btn').each(function () {
                        buttonList.push($(this).attr('data-action-path'));
                    });
                }
                dataView._clonedRow = row;
                dataView.extension().context(context);
                $(context).each(function () {
                    var item = this;
                    if (item.uiScope == 'Form')
                        newButtonList.push(item.path);
                    if (item.icon)
                        newIconList.push(item.icon);
                });
                if (buttonList.length) {
                    if (buttonList.join() != newButtonList.join()) {
                        doRefreshFormButtons = true;
                        doRefreshToolbarButtons = !getPageInfo(dataView).isModal;
                    }
                }
                else {
                    var hasVisibleButtons;
                    mobile._toolbarButtons.each(function () {
                        var that = this,
                            path;
                        if (that.style.display != 'none') {
                            hasVisibleButtons = true;
                            path = $(that).data('action-path');
                            if (path && newButtonList.indexOf(path) == -1) {
                                doRefreshToolbarButtons = true;
                                return false;
                            }
                        }
                    });
                    if (!hasVisibleButtons)
                        doRefreshToolbarButtons = true;
                }
                if (doRefreshFormButtons || doRefreshToolbarButtons)
                    mobile.refreshAppButtons(context, { buttonBars: buttons, layout: inputContainer, toolbar: doRefreshToolbarButtons, dataView: dataView });
                dataView._clonedRow = null;
            }
            if (hiddenValues.length)
                _input.execute({ dataView: dataView, values: hiddenValues });
        },
        //value: function (text) {
        //    var input = findInput().first();
        //    if (arguments.length) {
        //        if (text == null)
        //            text = '';
        //        input.val(text)[0].setSelectionRange(text.length, text.length);
        //        input.closest('[data-input]').find('.app-data-input-placeholder').css('display', text ? 'none' : '');
        //    }
        //    else
        //        return input.length ? input.val() : null;
        //},
        valid: function (value) {
            if (arguments.length)
                this._valid = value != false;
            else
                return this._valid != false;
        },
        cancel: function (validate) {
            _input._canceled = validate == false;
            deactivateTextInput();
            //hideTooltip();
            _input._canceled = false;
            return _input.valid();
        },
        triggerSetValue: function (element, value, originalValue) {
            this.valid(true);
            var setValueEvent = $.Event('setvalue.input.app', {
                inputValue: value, inputOriginalValue: originalValue, inputElement: element[0], inputValid: true, inputError: null
            });
            element.trigger(setValueEvent);
            setValueEvent.inputElement = null;
            this.valid(setValueEvent.inputValid);
            return setValueEvent;
        },
        drawing: function (dataInput, enable) {
            if (arguments.length == 1)
                return dataInput.data('redraw') != false;
            if (enable)
                dataInput.removeData('redraw');
            else
                dataInput.data('redraw', false);
        },
        addCount: function (li, count) {
            if (count != null)
                $('<span class="app-muted"/>').appendTo(li).text(count > 999 ? String.format('{0:N0}', count) : count);
        },
        editor: function (options) {
            var dataView = options.dataView,
                fieldName = options.fieldName,
                field, row,
                question, itemsStyle, list, fieldValue, options;
            if (typeof dataView == 'string')
                dataView = _app.find(dataView);
            else if (!dataView)
                dataView = mobile.pageInfo().dataView;
            field = dataView.findField(fieldName);
            itemsStyle = field.ItemsStyle;
            question = { name: 'Field', required: !field.AllowNulls, columns: field.Columns, rows: field.Row, options: {} };
            options = question.options;
            if (itemsStyle) {
                list = [];
                var addGroupCount = field.is('lookup-distinct');
                $(field.DynamicItems || field.Items).each(function () {
                    var item = this,
                        newItem = { value: item[0], text: item[1] };
                    if (addGroupCount)
                        newItem.count = item[2];
                    list.push(newItem);
                });
                question.items = {
                    style: itemsStyle,
                    list: list
                };
                options.lookup = {
                    distinct: addGroupCount
                }
            }
            row = dataView.row();
            question.value = row[field.Index];

            function callback(e) {
                var editorDataView = e.rules.dataView(),
                    survey = editorDataView.survey(),
                    data = editorDataView.data(),
                    eventType = e.type;
                mobile.pageInfo(editorDataView)._canceled = true;
                if (eventType == 'submit') {
                    pageTransitions(false);
                    $settings('ui.transitions.style', 'none');
                }
                whenPageShown(function () {
                    if (eventType == 'submit') {
                        _input.execute({ dataView: dataView, values: [{ name: fieldName, value: data.Field }] });
                        pageTransitions(true);
                    }
                    if (!isTouchPointer)
                        _input.focus({ fieldName: field.Name });
                    if (e.type == 'submit') {
                        if (options.submit)
                            options.submit(e);
                    }
                    else if (options.cancel)
                        options.cancel(e);
                });
            }

            _app.survey({
                text: field.HeaderText,
                parent: dataView._id,
                controller: dataView._id + '-' + 'editor',
                context: {},
                questions: [question],
                layout: '<div data-layout="form" data-layout-size="tn"><div data-container="row"><span data-control="field" data-field="Field" data-size="fit"/></div></div>',
                options: {
                    modal: {
                        fitContent: true,
                        always: true
                        //max: 'xs'
                    },
                    materialIcon: 'edit',
                    discardChangesPrompt: false,
                    contentStub: false
                },
                submitText: 'OK',
                submit: callback,
                cancel: callback
            });


            //_app.alert(field.Name, options.callback);
        },
        beforeFocus: function () {
            if (tooltip)
                tooltip.removeData().hide();
        },
        focus: function (options) {
            var result;
            if (!isInTransition) {
                if (!options) options = {};
                var container = options.container || findActivePage('[data-layout][data-state="write"]'),
                    lastFocused = options.lastFocused,
                    containerPage = container.closest('.ui-page'),
                    fieldName = lastFocused ? containerPage.data('last-focused-field') : (options.fieldName || container.find('[data-focus="true"]').attr('data-field')),
                    query = fieldName ? ('[data-field="' + fieldName + '"]') : '',
                    controls = container.find('[data-control]' + query + ':not([data-input="none"])'),
                    message = options.message;
                containerPage.removeData('last-focused-field');
                if (lastFocused && !fieldName) return;
                controls.each(function () {
                    var dataInput = $(this),
                        offset = dataInput.offset(),
                        inputMethod = _input.methods[dataInput.attr('data-input')],
                        textInput,
                        tab = dataInput.closest('[data-container="tab"]'),
                        wizardStep = dataInput.closest('[data-container="wizard"]');
                    if (inputMethod && inputMethod.focus && (query || !tab.length || tab.is('.app-tab-active')) && (!wizardStep.length || wizard('visible', { step: wizardStep, container: container }))) {
                        if (wizardStep.length)
                            wizard('show', { step: wizardStep, container: container });
                        dataInput.closest('[data-container="collapsible"].app-container-collapsed').each(function () {
                            var collapsible = $(this);
                            collapsible.removeClass('app-container-collapsed').find('.app-icon-carat').attr('title', resourcesForm.Minimize);
                            updateScrollbars($(collapsible.children()[1]), true);
                        });
                        //if (wizardStep.length)
                        //    wizard('show', { step: wizardStep });
                        if (tab.length && !tab.is('.app-tab-active')) {
                            isInTransition = true;
                            tab.closest('[data-container="tabset"]').first().find('.app-tabs').first().find('.ui-btn').filter(function () {
                                return $(this).text() == tab.attr('data-tab-text')
                            }).trigger('vclick');
                            setTimeout(function () {
                                isInTransition = false;
                                _input.focus(options);
                            }, 100);
                            return;
                        }
                        stickyHeaderBar(container).hide();
                        inputMethod.focus(dataInput);
                        result = true;
                        if (message) {
                            _input.popup('hide');
                            var field = _input.elementToField(dataInput),
                                button;
                            if (field.ItemsStyle == 'Lookup') {
                                button = _input.elementToButton(dataInput);
                                button.addClass('app-caret-r');
                                button.removeClass('app-caret-u app-caret-d');
                            }

                            textInput = dataInput.find('.app-data-input,.app-data-list,.app-drop-box');
                            if (textInput.is('.app-drop-box'))
                                textInput = textInput.prev();
                            if (textInput.length) {
                                var offset = textInput.offset();
                                setTimeout(function () {
                                    showTooltip(offset.left + 1, offset.top + dataInput.outerHeight(), message, null, true);
                                    tooltip.data({ fieldName: fieldName, message: message });
                                });
                            }
                        }
                        return false;
                    }
                });
            }
            return result;
        },
        focusCopyMaster: function (field) {
            var altField,
                copyRegex = new RegExp('\\b' + field.Name + '\\s*=\\s*.+\\b');
            $(field._dataView._fields).each(function () {
                var f = this,
                    copy = f.Copy;
                if (copy && copyRegex.exec(copy)) {
                    altField = f.Name;
                    return false;
                }
            });
            if (altField)
                _input.focus({ fieldName: altField });

        },
        canCreateItems: function (field, row) {
            if (!row)
                row = field._dataView.editRow();
            var result = !!field.ItemsNewDataView,
                contextFields = field.ContextFields,
                parentField,
                mappingInfo;
            if (result && contextFields) {
                while (mappingInfo = _app._fieldMapRegex.exec(contextFields)) {
                    parentField = field._dataView.findField(mappingInfo[2]);
                    if (parentField && row[parentField.Index] == null)
                        result = false;
                }
            }
            return result;
        }
    }

    function scrollTextInputIntoView(scrollable) {
        var dataInput = findInput(scrollable);
        if (dataInput.length) {
            var dataInputOffset = dataInput.offset(),
                dataInputHeight = dataInput.outerHeight(),
                scrollableOffset = scrollable.offset(),
                scrollableHeight = scrollable.height(),
                scrollableScrollTop = scrollable.scrollTop();
            if (scrollableOffset.top + scrollableHeight < dataInputOffset.top)
                scrollable.scrollTop(dataInputOffset.top + scrollableScrollTop - scrollableHeight - (dataInputHeight > scrollableHeight ? 0 : dataInputHeight));
            else if (scrollableOffset.top > dataInputOffset.top)
                scrollable.scrollTop(dataInputOffset.top + scrollableScrollTop - scrollableOffset.top);
        }
    }

    function deactivateTextInput() {
        findInput().removeData('keepFocus').trigger('blur');
    }

    function findInput(container) {
        return container ? $(container).find('.app-data-input') : $('.app-data-input');
    }

    function borrowDataInputStyle(dataInput) {
        var borrowed = 0,
            inputStyle = dataInput[0].style,
            style = {};
        dataInputStylesToBorrow.forEach(function (st) {
            var v = inputStyle[st.name],
                ignoreSelector = st.ignore;
            if (!ignoreSelector || !dataInput.is(ignoreSelector)) {
                borrowed++;
                style[st.name] = v;
            }
        });
        return borrowed ? style : null;
    }

    function activateTextInput(target) {
        //if (skipClickAfterDrop)
        //    return false;
        var dataInput,
            //contents = dataInput.contents(),
            //inputHeight = dataInput.outerHeight(),
            textInput, placeholder, text, inputContainer,
            dataType,
            getValueEvent,
            beforeFocusEvent,
            dataInput, dataPlaceholder,
            activeTextInput,
            scrollable, scrollTop;
        if (!_input.valid()) return false;
        activeTextInput = findInput();// $('.app-data-input');
        dataInput = dataInputOf(target);// target.closest('[data-input]');
        if (activeTextInput.length) {
            dataInput.data('hitTest', true);
            if (!dataInputOf(activeTextInput)/* activeTextInput.closest('[data-input]')*/.data('hitTest'))
                activeTextInput = null;
            dataInput.removeData('hitTest');
            //if (activeTextInput)
            //    return;
            //else
            //    deactivateTextInput();
            deactivateTextInput();
        }
        if (dataInput.find('[data-input-hotspot]').length && !target.is('[data-input-hotspot]'))
            return false;

        getValueEvent = $.Event('getvalue.input.app'/*, { inputValue: null, inputElement: textInput }*/);
        dataInput.trigger(getValueEvent);
        var inputRows = getValueEvent.inputRows,
            isRtf = getValueEvent.rtf,
            inputStyle;
        if (isRtf) {
            //textInput = $('<div class="app-data-input" contenteditable="true"></div>');
            textInput = $(' <iframe class="app-data-input"></iframe>');
            inputRows = inputRows || 1;
        }
        else {
            textInput = inputRows ? $('<textarea class="app-data-input" rows="' + (parseInt(inputRows) + 1) + '"/>') : $('<input class="app-data-input"/>').attr('type', getValueEvent.inputIsPassword ? 'password' : 'text');
            inputStyle = borrowDataInputStyle(dataInput);
            if (inputStyle)
                textInput.css(inputStyle);
        }
        if (!isTouchPointer && !inputRows && dataInput.attr('data-spell-check') != 'false')
            textInput.attr('spellcheck', 'true');

        inputContainer = _input.createContainer(dataInput.addClass('app-has-focus'));
        if (!isRtf)
            textInput.appendTo(inputContainer);
        if (inputRows) {
            inputContainer.addClass('app-has-textarea');
            if (isRtf)
                inputContainer.addClass('app-has-rtf');
        }
        //getValueEvent.inputElement = null;

        text = getValueEvent.inputAltValue || getValueEvent.inputValue || '';
        if (getValueEvent.inputMaxLength)
            textInput.attr('maxlength', getValueEvent.inputMaxLength);
        textInput.val(text).data('original', text);
        if (isRtf) {
            // setting up the source code of iframe
            var rtfDoc = [],
                iframe = textInput[0];

            textInput.appendTo(inputContainer);

            textInput.load(function () {
                rtf.handlers(textInput, true);
            });

            function rtfDocLine(line) { rtfDoc.push(line); }
            // create an HTML document for RTF editor
            rtfDocLine('<html><head><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/><meta charset="utf-8">');
            rtfDocLine('<style>b,strong{font-weight:600}body{white-space:pre-line;margin:0;padding:0;overflow:hidden;font-size:' + textInput.css('font-size'));
            rtfDocLine(';font-family:' + $body.css('font-family'));
            rtfDocLine(';}</style></head><body contenteditable="true">');
            rtfDocLine(text);
            rtfDocLine('</body></html>');
            iframe.contentWindow.document.open();
            iframe.contentWindow.document.write(rtfDoc.join(''));
            iframe.contentWindow.document.close();
        }
        if (getValueEvent.placeholder) {
            // native placeholder will not work - use a custom one
            placeholder = $('<span class="app-data-input-placeholder"/>').insertAfter(textInput).text(getValueEvent.placeholder).css('display', text ? 'none' : '');
            textInput.data('placeholder', placeholder);
        }
        if (getValueEvent.change) {
            textInput.data({
                change: getValueEvent.change, last: text
            });
            getValueEvent.change = null;
            textInput.attr({ autocomplete: 'false', autocorrect: 'false', autocapitalize: 'false', spellcheck: 'false' });
        }

        dataType = dataInput.attr('data-type');
        if (!dataType) {
            switch (getValueEvent.inputDataType) {
                case 'DateTime':
                    dataType = 'datetime'
                    break;
                case 'Date':
                    dataType = 'date'
                    break;
            }
            dataInput.attr('data-type', dataType);
        }

        var inner = dataInput.find('.app-control-inner');
        switch (dataType) {
            case 'datetime':
                if (inner.attr('data-smart-value'))
                    inner.data('last-smart-text', inner.text()).text(textInput.val());
                break;
            default:
                if (dataType && isTouchPointer) {
                    textInput.attr('type', dataType);
                    if (dataType == 'number'/* && !iOS*/) {
                        text = getValueEvent.inputValueRaw;
                        if (text != null)
                            textInput.val(JSON.stringify(text));
                    }
                }
                break;
        }

        beforeFocusEvent = $.Event('beforefocus.input.app', {
            inputElement: textInput
        });
        //beforeFocusEvent.input = textInput;
        dataInput.trigger(beforeFocusEvent);
        beforeFocusEvent.inputElement = null;
        if (beforeFocusEvent.isDefaultPrevented())
            return false;

        try {
            var range, /*rangeRect, */textInputOffset, inputElement,
                x = lastTouchX(), y = lastTouchY();
            if (isRtf) {

                textInputOffset = textInput.offset();
                if (textInputOffset.left <= x && x <= textInputOffset.left + textInput.outerWidth() && textInputOffset.top <= y && y < textInputOffset.top + textInput.outerHeight()) {
                    range = rtf.range('select', { x: x - textInputOffset.left, y: y - textInputOffset.top });
                    //if (range)
                    //    range.select();
                }
            }
            if (!range) {
                if (isRtf) {
                    //if (range)
                    //    range.select();
                    //else
                    //    rtf.document('focus');
                    rtf.document('focus');
                    rtf.range('save');
                    rtf.focus();
                }
                else {
                    inputElement = textInput.focus()[0];
                    /*if (dataType == 'number' && isTouchPointer) {
                        if (iOS) {
                            inner.css('visibility', 'visible');
                            setTimeout(function () {
                                textInput.attr('type', 'text').val(text);
                                inner.css('visibility', 'hidden');
                            }, 200);
                        }
                    }
                    else*/ if (inputElement.setSelectionRange)
                        inputElement.setSelectionRange(dataInput.attr('data-select-on-focus') == 'false' ||
                            isTouchPointer && $settingsEnabled('ui.input.touch.autoSelect') == false ||
                            !isTouchPointer && $settingsEnabled('ui.input.mouse.autoSelect') == false ? text.length : 0, text.length);
                }
            }
            else
                rtf.document('focus');
        } catch (ex) {
        }
        return true;
    }

    $(document).on('getvalue.input.app', function (event) {
        var field = _input.eventToField(event),
            inputMethod = _input.eventToMethod(event),
            aliasField, dataView, item,
            v, row;
        if (field) {
            dataView = field._dataView;
            aliasField = dataView._allFields[field.AliasIndex];
            if (field.Index != aliasField.AliasIndex && !field.ItemsStyle)
                aliasField = field;
            row = dataView.editRow();
            v = row[field.Index];
            if (field.ItemsTargetController)
                v = null;
            else if (field.ItemsStyle && field.ItemsStyle != 'Lookup' && field.ItemsStyle != 'AutoComplete') {
                item = dataView._findItemByValue(field, v);
                if (item && (v != null || !field.tagged('lookup-null-value-none') && field.AllowNulls))
                    v = item[1];
            }
            event.inputValue = v != null ? field.format(v) : '';
            event.inputValueRaw = v;
            event.inputDataType = field.Type;
            if (aliasField.Len)
                event.inputMaxLength = aliasField.Len;
            if (field.Index != aliasField.Index) {
                v = row[aliasField.Index];
                event.inputAltValue = v != null ? aliasField.format(v) : '';
            }
            if (!field.ItemsStyle) {
                event.inputRows = field.Rows;
                if (field.TextMode == 2)
                    event.rtf = true;
            }
            event.inputIsPassword = field.TextMode == 1;
            event.placeholder = _input.fieldToPlaceholder(field);
            if (inputMethod && inputMethod.setup)
                inputMethod.setup(event);

        }
    }).on('setvalue.input.app', function (event) {
        var field = _input.eventToField(event),
            dataView, fieldName,
            target = $(event.target),
            control = target.closest('[data-field]'),
            v = event.inputValue,
            vObj, row, error;
        if (field && (!(field.isReadOnly() || field.ItemsStyle || field.OnDemand) || field.is('lookup-accept-any-value') && !field.ItemsTargetController)) {
            dataView = field._dataView;
            fieldName = field.Name;
            row = dataView.editRow();
            if (row) {
                // perform validation
                if (String.isBlank(v))
                    /*
                    if (!field.AllowNulls && !field.HasDefaultValue)
                        error = resourcesValidator.RequiredField;
                    else
                        v = null;
                    */
                    v = null;
                else {
                    vObj = {
                        NewValue: v
                    };
                    error = dataView._validateFieldValueFormat(field, vObj, true);
                    if (!error)
                        v = vObj.NewValue;

                }
                if (error) {
                    event.inputError = error;
                    event.inputValid = false;
                }
                else {
                    if (field.Index != field.AliasIndex)
                        field.AliasIndex = field.Index;
                    _input.execute({
                        dataView: dataView, values: [{
                            name: field.Name, value: v
                        }]
                    });
                }
            }
        }
    }).on('vclick', '[data-control="action"]', function (event) {
        var target = $(event.target),
            dataControl = target.closest('[data-control]'),
            dataInputContainer = dataControl.closest('[data-input-container]'),
            dataView = _app.find(dataInputContainer.attr('data-input-container')),
            a;
        if (dataView) {
            hideTooltip();
            a = dataView.findAction(dataControl.attr('data-action'));
            if (a && dataView._isActionAvailable(a))
                callWithFeedback(target.closest('.app-action-column-button'), function () {
                    var extension = dataView.extension();
                    extension.command(extension.commandRow(), a.CommandName, a.CommandArgument, a.CausesValidation, a.Path);
                });
            return false;
        }

    }).on('vclick', '[data-control="label"]', function (event) {
        var target = $(this),
            inputContainer = target.closest('[data-input-container]'),
            dataView = _app.find(inputContainer.attr('data-input-container')),
            fieldName = target.attr('data-field'),
            prevControl, nextControl,
            foundSelf,
            inputType, inputMethod,
            field;
        if (dataView && (isTouchPointer || !htmlSelection())) {
            field = dataView.findField(fieldName);
            if (field) {
                //hideTooltip();
                target.data('active', true);
                inputContainer.find('[data-control]').each(function () {
                    var c = $(this),
                        controlType = c.attr('data-control'),
                        controlFieldName = c.attr('data-field');
                    if (controlType == 'label') {
                        if (c.data('active'))
                            foundSelf = true;
                    }
                    else if (controlFieldName == fieldName) {
                        if (!foundSelf)
                            prevControl = c;
                        else if (nextControl)
                            return false;
                        else
                            nextControl = c;
                    }
                });
                target.removeData('active');
                if (!nextControl)
                    nextControl = prevControl;
                if (!nextControl.filter(visibleFilterFunc).length) {
                    var following = nextControl.nextAll('[data-input]').filter(visibleFilterFunc).first();
                    if (following.length)
                        nextControl = following;
                    else
                        nextControl = nextControl.prevAll('[data-input]').filter(visibleFilterFunc).first();
                }
                if (nextControl && nextControl.length) {
                    inputType = nextControl.attr('data-input');
                    inputMethod = _input.methods[inputType];
                    if (inputMethod)
                        if (inputMethod.focus)
                            inputMethod.focus(nextControl, target);
                        else
                            _input.focusCopyMaster(field);
                    //else {
                    //    var altField,
                    //        copyRegex = new RegExp('\\b' + field.Name + '\\s*=\\s*.+\\b');
                    //    $(dataView._fields).each(function () {
                    //        var f = this,
                    //            copy = f.Copy;
                    //        if (copy && copyRegex.exec(copy)) {
                    //            altField = f.Name;
                    //            return false;
                    //        }
                    //    });
                    //    if (altField)
                    //        _input.focus({ fieldName: altField });
                    //}
                }

            }
        }
        return false;
    }).on('vclick mousedown touchend', '[data-input]', function (e) {
        var target = $(e.target)
        if (!target.closest('.app-data-input-button').length) {
            if (e.type == 'mousedown' && e.which != 3)
                return;
            if (findInput(this).length && !target.closest('.app-control-helper').length)
                return;
        }
        if (skipTap) return;
        var inputMethod = _input.eventToMethod(e);
        if (inputMethod) {
            if (inputMethod.click)
                inputMethod.click(e);
            if (e.isDefaultPrevented())
                return false;
            if (inputMethod.focus) {
                if (inputMethod.focus(target)) {
                    if (e.cancelable)
                        e.preventDefault();
                    if (e.type == 'mousedown')
                        $(this).find('.app-data-input-placeholder').css('display', 'none');
                }
            }
            else if (e.type == 'vclick' && (isTouchPointer || !htmlSelection())) {
                var field = _input.eventToField(e);
                if (!_input.focus({ fieldName: field.Name })) {
                    _input.focusCopyMaster(field);
                    return false;
                }
            }
        }
    }).on('blur', '.app-data-input', function (e) {
        var textInput = $(e.target),
            inputMethod = _input.eventToMethod(e),
            dataInput = dataInputOf(textInput),// textInput.closest('[data-input]'),
            originalValue = textInput.data('original'),
            value = textInputToValue(textInput),// textInput.is('div') ? textInput.html() : textInput.val().trim(),
            container = textInput.parent(),
            field,
            parent = container.parent(),
            relatedTarget = $(e.relatedTarget),
            setValueEvent;

        function focusTextInput(message, callback) {
            clearTimeout(_window._focusTextInputTimeout);
            _window._focusTextInputTimeout = setTimeout(function () {
                textInput.focus();
                if (message) {
                    textInput.attr('title', message)
                    showTooltip(textInput.offset().left + 1, textInput.offset().top + textInput.outerHeight() + 1, message, null, true);
                }
                if (callback)
                    callback(dataInput);
            }, 10);
        }

        function removeTextInput(callback) {
            _input.valid(true);
            var removeInputEvent = $.Event('remove.input.app', {
                input: textInput
            });
            if (container.is('.app-has-rtf'))
                rtf.handlers(textInput, false);
            $(textInput).trigger(removeInputEvent);
            if (textInput.attr('title'))
                hideTooltip();
            dataInput.find('.app-data-input-focus').remove();
            if (!dataInput.find('.app-control-helper .app-focus').length)
                dataInput.removeClass('app-has-focus');
            parent.contents().css('visibility', '');
            var inner = dataInput.find('.app-control-inner').removeClass('app-control-inner-trailer'),
                smartText = inner.data('last-smart-text');
            if (smartText) {
                if (!dataInput.is('.app-null'))
                    inner.text(smartText);
                inner.removeData('last-smart-text');
            }
            //textInput.remove();
            //container.hide();
            container.remove().empty();
            _input._lastInputBeforeScroll = null;
            if (callback)
                callback(dataInput);
        }

        function relatedTargetIs(selector) {
            var result,
                selector = selector.split(/,/);
            if (selector.length == 1) {
                result = relatedTarget.closest(selector[0]).is(textInput.closest(selector[0]));
            }
            else
                $(selector).each(function () {
                    result = relatedTargetIs(this);
                    if (result)
                        return false;
                });
            return result;
        }

        if (_input._canceled) {
            clearTimeout(_window._focusTextInputTimeout);
            removeTextInput();
            return;
        }

        if (relatedTargetIs('.app-data-input-popup,.app-data-input-helper,.app-data-input-button')/*relatedTarget.closest('.app-data-input-popup,.app-data-input-helper,.app-data-input-button').length*/) {
            return false;
        }

        //if (relatedTargetIs('.app-has-rtf')) {
        //    return false;
        //}

        if (textInput.data('keepFocus')) {
            textInput.removeData('keepFocus');
            return false;
        }

        if (inputMethod && inputMethod.blur)
            inputMethod.blur(e);

        if (e.isDefaultPrevented())
            return;

        //if (relatedTargetIs('.app-data-input-popup,.app-data-input-button')/*relatedTarget.closest('.app-data-input-popup,.app-data-input-button').length*/) {
        //    focusTextInput();
        //    return false;
        //}

        if (relatedTargetIs('.app-data-input-container,.app-data-input-placeholder')/*relatedTarget.closest('.app-data-input-container,.app-data-input-placeholder').length*/) {
            e.preventDefault();
            focusTextInput();
        }
        else if (value == originalValue)
            removeTextInput();
        else {
            var setValueEvent = _input.triggerSetValue(textInput, value, originalValue);
            if (setValueEvent.inputValid)
                removeTextInput(setValueEvent.inputValidCallback);
            else if (_input.ignoreErrors)
                removeTextInput();
            else {
                e.preventDefault();
                focusTextInput(setValueEvent.inputError, setValueEvent.inputErrorCallback);
            }
        }
    }).on('keydown', function (e) {
        userActivity();
        var keyCode = e.keyCode || e.which;
        if (keyCode == 27) { // Esc
            if (dragEvent || pendingDragEvent) {
                $(document).trigger($.Event('dragcancel.app', { drag: pendingDragEvent || dragEvent }));
                e.preventDefault();
                return;
            }
            if (!mobile.busy() && !_input.popup(':visible')) {
                var calendar = $('.app-calendar-plugin-container');
                if (calendar.length && calendar.is(':visible')) {
                    mobile.CalendarInput('escape');
                    return false;
                }
                else {
                    if (closePopupsAndPanels(false)) {
                        e.preventDefault();
                        return false;
                    }
                    if (findActivePage().is('.app-page-modal')) {
                        setTimeout(goBack);
                        e.preventDefault();
                        return false;
                    }
                }
            }
        }
        if (keyCode == 70 && (e.ctrlKey || e.metaKey)) { // Ctrl+F
            _app.search('enumerate');
            return false;
        }
        if (!isTouchPointer && handleKeyboardShortcuts(e)) return;
        if (keyCode == 121) {
            e.preventDefault();
            var shiftKey = e.shiftKey,
                button = shiftKey ? mobile._contextButton : mobile._menuButton,
                openPanel = $('.ui-panel-open');
            if (shiftKey || (button.is('.ui-icon-bars') && !findActivePage().is('.app-page-modal') && !openPanel.length))
                setTimeout(function () {
                    skipTap = false;
                    button.trigger('vclick');
                });
            else
                openPanel.panel('close');
            return false;
        }
    }).on('keydown', '.app-data-input,.app-drop-box', function (e) {
        userActivity();
        var that = this,
            ctrlKey = e.ctrlKey || e.metaKey,
            altKey = e.altKey,
            keyCode = e.keyCode || e.which,
            text, changed, helperSelector,
            textInput = $(e.target),
            dataInput = dataInputOf(textInput),// textInput.closest('[data-input]'),
            inputMethod,
            isForm = textInput.closest('[data-layout="form"]').length > 0,
            moveDir, popup,
            changeCallback,
            inputContainer,
            isRtf = isRtfEditor(that),
            peers, formButtons, field,
            selectedItem, allItems, currentItem;

        if (handleKeyboardShortcuts(e, false, false))
            return false;

        // handle value navigation for Basket lookups
        if (!ctrlKey && (keyCode == 38 || keyCode == 8 || keyCode == 37)) {
            var inputHelper = dataInputOf(that, '.app-control-before'),//$(that).closest('[data-input]').find('.app-control-before'),
                listItems = inputHelper.find('li'),
                focusedListItem = inputHelper.find('.app-focus'),
                lastFocusedListItem = focusedListItem,
                focusedOffset;
            if (listItems.length && !focusedListItem.length && !that.value && !_input.popup(':visible')) {
                // focus on the last list item
                focusedListItem = listItems.last();
                // locate the left-most item in the same row
                if (keyCode == 38 || keyCode == 37) {
                    focusedOffset = focusedListItem.offset();
                    if ($(that).offset().top > inputHelper.offset().top + inputHelper.outerHeight())
                        listItems.each(function () {
                            var li = $(this),
                                offset = li.offset();
                            if (offset.top == focusedOffset.top) {
                                focusedListItem = li;
                                return false;
                            }
                        });
                }
                focusedListItem.addClass('app-focus');
                setTimeout(function () {
                    inputHelper.focus().addClass('app-has-focus');
                    scrollIntoView(focusedListItem);
                });
                return false;
            }
        }

        if (keyCode == 27) {
            if (_input.popup(':visible')) {
                _input.methods.lookup._hidePopup();
                return false;
            }
            if (!textInput.is('.app-data-input')) {
                textInput.blur();
                focusScrollable();
                return false;
            }
            changeCallback = textInput.data('change');
            text = textInput.data('original');
            changed = textInputToValue(textInput) != text;
            if (!changed) {
                var modalPage = dataInput.closest('.app-page-modal');
                if (modalPage.length && !_input.popup(':visible')) {
                    //modalPage.data('last-focused-field', dataInput.attr('data-field'));
                    lastFocusedField(dataInput.attr('data-field'), modalPage);
                    return;
                }
            }
            e.stopPropagation();
            e.preventDefault();
            if (changeCallback) {
                textInput.val(text);
                if (!text)
                    dataInput.data('autoComplete', false);
                _input.move(dataInput, _input.popup(':visible') ? dataInput.data('autoComplete', false) : null);
            }
            else {
                var cancelInputEvent = $.Event('cancel.input.app', {
                    inputElement: textInput
                });
                dataInput.trigger(cancelInputEvent);
                cancelInputEvent.inputElement = null;
                if (!cancelInputEvent.isDefaultPrevented()) {
                    if (textInput.is('iframe'))
                        rtf.document('blur');
                    else if (changed) {
                        hideTooltip();
                        textInput.val(text).select();
                    }
                    else {
                        _input.blur(dataInput);
                        //findScrollable().focus();
                        focusScrollable();
                    }
                }
            }
            return false;
        }

        // Enter or Tab may autocomplete or execute a command in the list
        if ((keyCode == 13 && !ctrlKey || keyCode == 9) && _input.popup(':visible')) {
            selectedItem = _input.popup().find('.app-selected');
            field = _input.elementToField(textInput);
            if (!selectedItem.length) {
                if (keyCode == 13 && (field.AllowAutoComplete != false && canCreateNewItem(field) && (textInput.data('original') || !!textInput.val()))) {
                    _input.methods.lookup._createItemFromText(field, dataInputOf(textInput)/*.closest('[data-input]')*/, textInput.val());
                    return false;
                }
            }
            else {
                if (keyCode == 9 && field.ItemsTargetController)
                    keyCode = 13;
                if (!selectedItem.is('[data-command]') || keyCode == 13) {
                    selectedItem.trigger('vclick', { feedback: false });
                    if (keyCode == 13)
                        return false;
                }
            }
        }

        // Ctrl+Enter - click the button
        if (keyCode == 13 && ctrlKey || keyCode == 39 && that.selectionStart == that.selectionEnd && (!that.value || that.value.length == that.selectionEnd)) {
            var button = _input.eventToButton(e);
            if (button.length && _input.elementToField(button).ItemsStyle == 'Lookup' && button.is(':visible')) {
                inputMethod = _input.eventToMethod(e);
                if (inputMethod && inputMethod.clickButton) {
                    if (_input.popup(':visible'))
                        _input.popup().find('[data-command="SeeAll"].app-selected').trigger('vclick');
                    else {
                        e.stopPropagation();
                        e.preventDefault();
                        inputMethod.clickButton(e);
                    }
                    return false;
                }
            }
        }

        if (ctrlKey && keyCode == 13) {
            _input.blur(dataInput);
            e.preventDefault();
            return false;
        }

        if (!altKey && (keyCode == 38 || keyCode == 40)) {
            field = _input.eventToField(e);
            var lov = field.DynamicItems || field.Items,
                valueIndex = -1, itemValue;
            if (field.ItemsStyle == 'DropDownList' && !_input.popup(':visible') && !field.ItemsTargetController) {
                if (field.is('lookup-auto-advance') || field.is('lookup-open-on-tap'))
                    _input.eventToMethod(e).clickButton(e);
                else {
                    $(lov).each(function (index) {
                        if (this[1] == that.value) {
                            valueIndex = index;
                            return false;
                        }
                    });
                    if (valueIndex != -1) {
                        if (keyCode == 38 && valueIndex > (!field.AllowNulls && lov[0][0] == null ? 1 : 0))
                            valueIndex--;
                        if (keyCode == 40 && valueIndex < lov.length - 1)
                            valueIndex++;
                    }
                    else {
                        valueIndex = 0;
                        if (that.value == '' && keyCode == 40 && lov.length && lov[0][0] == null)
                            valueIndex++;
                    }
                    itemValue = lov[valueIndex];
                    if (itemValue) {
                        $(that).data('last', itemValue[1])
                        setTimeout(function () {
                            _input.methods.lookup._useItemValue(field, itemValue, true);
                        });
                    }
                }
                e.preventDefault();
                return false;
            }
            else if (dataInput.data('notify')) {
                var list = dataInput.closest('[data-container]').next('[data-container]').find('li[data-text]'),
                    selectedItem = list.filter(function () { return $(this).is('.app-selected') }).removeClass('app-selected');
                if (list.length) {
                    if (selectedItem.length)
                        selectedItem = keyCode == 40 ? selectedItem.next('[data-text]') : selectedItem.prev('[data-text]');
                    else
                        selectedItem = $(list[keyCode == 40 ? 0 : list.length - 1]);
                    selectedItem.addClass('app-selected');
                    e.preventDefault();
                    return false;
                }
            }
        }

        moveDir = _input.eventToDirection(e);

        if (keyCode == 32 && !(ctrlKey || e.shiftKey || altKey) && !isRtf && that.value != null && !that.value.trim())
            return false;

        // Alt+Down, Ctrl+Space
        if (keyCode == 40 && altKey || keyCode == 32 && ctrlKey) {
            changeCallback = textInput.data('change');
            if (changeCallback) {
                if (!_input.popup(':visible')) {
                    e.stopPropagation();
                    e.preventDefault();
                    setTimeout(function () {
                        changeCallback({
                            input: textInput, value: textInput.val(), lastValue: textInput.data('last')
                        });
                    });
                }
                return false;
            }
            else {
                var helpInputEvent = $.Event('help.input.app', {
                    inputElement: textInput
                });
                dataInput.trigger(helpInputEvent);
                helpInputEvent.inputElement = null;
                if (helpInputEvent.isDefaultPrevented() || keyCode == 32)
                    return false;
            }
        }

        // Back, Del will not trigger autocomplete if a list with options is visible
        //if ((keyCode == 8 || keyCode == 46) && that.selectionStart > 0 && that.selectionStart < that.selectionEnd && _input.popup(':visible'))
        //    textInput.data('autoComplete', false);
        textInput.data('autoComplete', !((keyCode == 8 || keyCode == 46) && that.selectionStart > 0 && that.selectionStart < that.selectionEnd && _input.popup(':visible')));
        textInput.data('keyCode', keyCode);

        // PgUp and PgDn
        if ((keyCode == 33 || keyCode == 34) && _input.popup(':visible')) {
            popup = _input.popup();
            selectedItem = popup.find('.app-selected');
            if (selectedItem.length) {
                currentItem = selectedItem.removeClass('app-selected');
                popup.scrollTop(popup.scrollTop() + (keyCode == 33 ? -1 : 1) * popup.height());
                while (currentItem.length) {
                    if (keyCode == 33) {
                        if (currentItem.offset().top < popup.offset().top)
                            break;
                    }
                    else
                        if (currentItem.offset().top + currentItem.outerHeight() - 1 > popup.offset().top + popup.height())
                            break;
                    if (!currentItem.is('.app-instruction'))
                        selectedItem = currentItem;
                    currentItem = keyCode == 33 ? currentItem.prev() : currentItem.next();
                }
                selectedItem.addClass('app-selected');
            }
            else
                selectedItem = popup.find('li:not(.app-instruction)').first().addClass('app-selected');
            return false;
        }


        // control the item selected in the popup list
        if ((keyCode == 38 || keyCode == 40) && !(e.ctrlKey || e.shiftKey || e.altKey) && _input.popup(':visible')) {
            e.preventDefault;
            e.stopPropagation();
            popup = _input.popup();
            selectedItem = popup.find('.app-selected').removeClass('app-selected');
            allItems = popup.find('li:not(.app-instruction)');
            if (selectedItem.length) {
                currentItem = selectedItem;
                while (currentItem.length) {
                    currentItem = keyCode == 38 ? currentItem.prev() : currentItem.next();
                    if (currentItem.length && !currentItem.is('.app-instruction')) {
                        selectedItem = currentItem;
                        break;
                    }
                    if (!currentItem.length && !allItems.filter(':not([data-command])').length)
                        selectedItem = [];
                }
            }
            else {
                if (keyCode == 38)
                    selectedItem = allItems.last();
                else
                    selectedItem = allItems.first();
            }
            if (selectedItem.length) {
                // make item visible
                selectedItem.addClass('app-selected');
                if (keyCode == 38 && selectedItem.prev().is('.app-instruction'))
                    selectedItem = selectedItem.prev();
                if (keyCode == 40 && selectedItem.next().is('.app-instruction'))
                    selectedItem = selectedItem.next();
                var itemOffset = selectedItem.offset(),
                    popupOffset = popup.offset();
                if (keyCode == 38) {
                    if (itemOffset.top < popupOffset.top)
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - 1);
                    else if (itemOffset.top >= popupOffset.top + popup.height())
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - (popup.height() - selectedItem.outerHeight()) - 1);
                }
                else if (keyCode == 40) {
                    if (itemOffset.top + selectedItem.outerHeight() >= popupOffset.top + popup.height())
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - (popup.height() - selectedItem.outerHeight()) - 1);
                    else if (itemOffset.top < popupOffset.top)
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - 1);
                }
                return false;
            }
        }

        if (moveDir && dataInput.is('[data-input-tab-stop="false"]')) {
            if (keyCode == 13 || keyCode == 9) {
                _input.blur(dataInput);
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }

        if (moveDir) {
            if (isForm && keyCode == 13) {
                if (!_input.popup(':visible')) {
                    var field = _input.elementToField(textInput),
                        value = textInput.val();
                    if (canCreateNewItem(field) && value && value != textInput.data('original')) {
                        _input.methods.lookup._createItemFromText(field, dataInputOf(textInput)/*.closest('[data-input]')*/, value);
                        return false;
                    }
                }
                e.stopPropagation();
            }

            setTimeout(function () {
                _input.move(dataInput, moveDir, keyCode);
            });
            e.preventDefault();
            return false;
        }

        // F2
        if (keyCode == 113) {
            selectionStart = that.selectionStart;
            selectionEnd = that.selectionEnd;
            if (selectionStart == 0 && selectionEnd == that.value.length)
                that.selectionStart = selectionEnd;
            else {
                that.selectionStart = 0;
                that.selectionEnd = this.value.length;
            }
            e.preventDefault();
            return;
        }

        // how to select text

    }).on('input', '.app-data-input', function (e) {
        var that = this,
            keyCode = e.keyCode || e.which,
            input = $(that),
            placeholder = input.data('placeholder'), placeholderDisplay,
            change = input.data('change'),
            last, value = textInputToValue(input), valueChanged,
            trimmedValue = value.trim();

        // suppress supported RTF keyboard shortcuts
        //if (handleKeyboardShortcuts(e, isRtfEditor(that), true))
        //    return;

        if (!trimmedValue.length)
            value = trimmedValue;

        // ignore Up/Down

        //if (keyCode == 38 || keyCode == 40 || keyCode == 13)
        //    return;
        if (placeholder) {
            placeholderDisplay = value ? 'none' : '';
            placeholder = placeholder[0];
            if (placeholder.style.display != placeholderDisplay)
                placeholder.style.display = placeholderDisplay;
        }

        last = input.data('last');
        valueChanged = value != last;
        if (valueChanged)
            _input.fitContainer(dataInputOf(input)/*.closest('[data-input]')*/, input);

        if (change) {
            if (valueChanged) {
                input.data('last', value);
                change({ input: input, value: value, lastValue: last, keyCode: keyCode, keyboard: true });
            }
        }
    }).on('cut paste', '.app-data-input', function (event) {
        var textInput = $(this);
        setTimeout(function () {
            textInput.trigger('keyup');
        });
    }).on('contextmenu', '.app-data-input', function (event) {
        $(this).data('keepFocus', true);
    }).on('mousedown contextmenu', '.app-data-input-placeholder', function (e) {
        if (e.which == 3)
            $(this).css('display', 'none');
    }).on('vclick mousedown', '.app-data-input-popup', function (e) {
        var li = $(e.target).closest('li'),
            command = li.attr('data-command'),
            list = _input.popup().data('list'),
            input = findInput(),// $('.app-data-input'),
            dataInput = dataInputOf(input)/*.closest('[data-input]')*/,
            field = _input.elementToField(input), allValues,
            inputMethod;

        function doSelectItem() {
            if (command) {
                inputMethod = _input.elementToMethod(input);
                if (command == 'SeeAll') {
                    e.target = input;
                    setTimeout(function () {
                        _input.popup('hide');
                        if (inputMethod && inputMethod.clickButton)
                            inputMethod.clickButton(e, false);
                    }, feedbackDelay);
                }
                else if (command == 'Clear') {
                    setTimeout(function () {
                        input.blur();
                        _input.methods.lookup._clearValue(field);
                        _input.fitContainer(dataInput, null, _input.fieldToPlaceholder(field));
                        setTimeout(function () {
                            _input.methods.lookup.focus(dataInput);
                        }, 100);
                    }, feedbackDelay);
                }
                else if (command == 'New') {
                    var inputValue = input.val();
                    input.blur();
                    mobile.lookup({ field: field, create: true, dataInput: dataInput, value: inputValue });
                }
                else if (command == 'ShowOptions') {
                    setTimeout(function () {
                        field._doSearch = true;
                        _input.methods.lookup._showList({
                            field: field, value: null, input: input
                        });
                    }, feedbackDelay);
                }
                else if (command == 'SelectAll') {
                    _input.popup('hide');
                    allValues = _input.popup().find('li[data-index]');
                    allValues.each(function (index) {
                        _input.methods.lookup._useItemValue(field, list[parseInt($(this).attr('data-index'))], null, index == allValues.length - 1);
                    });
                }
                else if (command == 'None')
                    _input.popup('hide');
            }
            else {
                _input.popup('hide');
                if (list && field) {
                    input.removeData('restoreText');
                    _input.methods.lookup._buttonUp(input);
                    _input.methods.lookup._useItemValue(field, list[parseInt(li.attr('data-index'))]);
                }
            }
        }

        if (li.length && !li.is('.app-instruction') && !li.data('selected')) {
            li.parent().find('.app-selected').removeClass('app-selected');
            li.addClass('app-selected').attr('data-selected', 'true');
            input.focus();
            if (arguments.length == 2 && !arguments[1].feedback)
                doSelectItem();
            else
                setTimeout(doSelectItem, feedbackDelay);
        }
        return false;
    }).on('keydown', '.app-checkbox-container', function (e) {
        if (handleKeyboardShortcuts(e)) return;
        var keyCode = e.keyCode || e.which,
            checkbox = $(this), action;
        if (keyCode == 32/* || keyCode == 13*/ || keyCode == 39 && !checkbox.is('.app-checkbox-on') || keyCode == 37 && checkbox.is('.app-checkbox-on'))
            action = 'toggle';
        else
            action = _input.eventToDirection(e);
        if (action) {
            if (action == 'toggle')
                _input.elementToMethod(checkbox)._toggleState(checkbox);
            else
                _input.move(checkbox, action, keyCode);
            return false;
        }
    }).on('keydown', '.app-data-list', function (e) {
        if (handleKeyboardShortcuts(e)) return;
        var keyCode = e.keyCode || e.which,
            list = $(this), action, focusedItem, nextItem;
        if (keyCode == 32/* || keyCode == 13*/)
            action = 'vclick';
        else if (keyCode == 8 || keyCode == 46)
            action = 'clear';
        else if (!e.ctrlKey) {
            if (keyCode == 38)
                action = 'up';
            else if (keyCode == 40)
                action = 'down';
            else if (keyCode == 37)
                action = 'left';
            else if (keyCode == 39)
                action = 'right';
            else if (keyCode == 36)
                action = 'home';
            else if (keyCode == 35)
                action = 'end';
        }

        if (action) {
            focusedItem = list.find('.app-focus');
            if (!focusedItem.length)
                _input.methods.listbox._scrollItemIntoView(list.find('.app-selected').first().addClass('app-focus'));
            else
                if (action == 'up') {
                    nextItem = focusedItem.prev();
                    if (!nextItem.length) {
                        nextItem = focusedItem.parent().prev().find('li').last();
                        //if (!nextItem.length)
                        //    _input.move(list, 'left', keyCode);
                    }
                }
                else if (action == 'down') {
                    nextItem = focusedItem.next();
                    if (!nextItem.length) {
                        nextItem = focusedItem.parent().next().find('li').first();
                        //if (!nextItem.length)
                        //    _input.move(list, 'right', keyCode); 
                    }
                }
                else if (action == 'right') {
                    nextItem = focusedItem.parent().next().find('li:eq(' + focusedItem.index() + ')');
                    if (!nextItem.length)
                        nextItem = focusedItem.parent().next().find('li').last();
                }
                else if (action == 'left')
                    nextItem = focusedItem.parent().prev().find('li:eq(' + focusedItem.index() + ')');
                else if (action == 'home')
                    nextItem = list.find('ul').first().find('li').first();
                else if (action == 'end')
                    nextItem = list.find('ul').last().find('li').last();
                else if (action == 'vclick') {
                    nextItem = null;
                    focusedItem.trigger('vclick');
                }
                else if (action == 'clear' && !list.closest('[data-control]').is('[data-input="checkboxlist"]')) {
                    nextItem = null;
                    list.find('ul').first().find('li').first().trigger('vclick');
                }
            if (nextItem && nextItem.length) {
                _input.methods.listbox._focusItem(nextItem);
                _input.methods.listbox._scrollItemIntoView(nextItem);
            }
            return false;
        }
        else {
            action = _input.eventToDirection(e);
            if (action) {
                _input.move(list, action, keyCode);
                return false;
            }
        }
    }).on('keydown', '.app-control-helper', function (e) {
        var inputHelper = $(this),
            keyCode = e.keyCode || e.which,
            listItems = inputHelper.find('li'),
            focusedListItem = inputHelper.find('.app-focus'),
            lastFocusedListItem = focusedListItem,
            focusedOffset;
        if (!listItems.length || !focusedListItem.length) return;
        focusedOffset = focusedListItem.offset();
        if (keyCode == 32 || keyCode == 40 && (e.altKey || e.metaKey)) {
            focusedListItem.trigger('vclick');
            return false;
        }
        if ((keyCode == 46 || keyCode == 8)) { // Del || Back Space
            _input.methods.lookup._removeBasketItem(focusedListItem, keyCode != 8);
            return false;
        }
        if (keyCode == 9 || keyCode == 13 || keyCode == 27) {
            setTimeout(function () {
                var dataInput = dataInputOf(focusedListItem);//.closest('[data-input]');
                if (e.shiftKey && keyCode != 27)
                    _input.move(dataInput, 'up', keyCode);
                else {
                    inputHelper.data('focus', false);
                    _input.methods.lookup.focus(dataInput);
                }
            });
            return false;
        }
        if (keyCode == 36)
            // home
            focusedListItem = listItems.first();
        else if (keyCode == 35)
            // end
            focusedListItem = listItems.last();
        else if (keyCode == 38) {
            // up
            var focusedLeft = focusedOffset.left,
                focusedRight = focusedLeft + focusedListItem.outerWidth() - 1,
                overlapWidth = 0,
                focusedTop = focusedOffset.top - 1;
            $(listItems.get().reverse()).each(function () {
                var li = $(this),
                    offset = li.offset(),
                    left = offset.left,
                    right = left + li.outerWidth() - 1,
                    w;
                if (overlapWidth == 0 && offset.top < focusedTop || overlapWidth > 0 && offset.top == focusedTop) {
                    if (!(right < focusedLeft || left > focusedRight)) {
                        if (left >= focusedLeft && right <= focusedRight)
                            w = right - left + 1;
                        else if (left < focusedLeft && right <= focusedRight)
                            w = right - focusedLeft + 1;
                        else if (left < focusedRight && right >= focusedRight)
                            w = focusedRight - left + 1;
                        else
                            w = focusedRight - focusedLeft + 1;
                        if (w > overlapWidth) {
                            focusedListItem = li;
                            overlapWidth = w;
                            focusedTop = offset.top;
                        }
                    }
                }
                else if (overlapWidth)
                    return false;
            });
        }
        else if (keyCode == 40) {
            // down
            var focusedLeft = focusedOffset.left,
                focusedRight = focusedLeft + focusedListItem.outerWidth() - 1,
                overlapWidth = 0,
                focusedTop = focusedOffset.top + 1;
            listItems.each(function () {
                var li = $(this),
                    offset = li.offset(),
                    left = offset.left,
                    right = left + li.outerWidth() - 1,
                    w;
                if (overlapWidth == 0 && offset.top > focusedTop || overlapWidth > 0 && offset.top == focusedTop) {
                    if (!(right < focusedLeft || left > focusedRight)) {
                        if (left >= focusedLeft && right <= focusedRight)
                            w = right - left + 1;
                        else if (left < focusedLeft && right <= focusedRight)
                            w = right - focusedLeft + 1;
                        else if (left < focusedRight && right >= focusedRight)
                            w = focusedRight - left + 1;
                        else
                            w = focusedRight - focusedLeft + 1;
                        if (w > overlapWidth) {
                            focusedListItem = li;
                            overlapWidth = w;
                            focusedTop = offset.top;
                        }
                    }
                }
                else if (overlapWidth)
                    return false;
            });
        }
        else if (keyCode == 39 || keyCode == 37) {
            listItems.each(function () {
                var li = $(this),
                    offset = li.offset();
                // right
                if (keyCode == 39 && offset.top == focusedOffset.top && offset.left > focusedOffset.left) {
                    focusedListItem = li;
                    return false;
                }
                //left
                if (keyCode == 37 && offset.top == focusedOffset.top && offset.left < focusedOffset.left)
                    focusedListItem = li;
            });
        }
        else
            return;
        if (focusedListItem == lastFocusedListItem) {

            function focusOnTextInput() {
                setTimeout(function () {
                    inputHelper.data('focus', false);
                    _input.methods.lookup.focus(dataInputOf(focusedListItem)/*.closest('[data-input]')*/);
                });
            }

            // right to the next line
            if (keyCode == 39)
                if (focusedListItem.next().length)
                    focusedListItem = focusedListItem.next();
                else
                    focusOnTextInput();

            // left to the prev line
            if (keyCode == 37 && focusedListItem.prev().length)
                focusedListItem = focusedListItem.prev();
            // up to the previous input
            if (keyCode == 38) {
                setTimeout(function () {
                    _input.move(dataInputOf(focusedListItem)/*.closest('[data-input]')*/, 'up', 9);
                });
                return false;
            }
            // down to the next input
            if (keyCode == 40) {
                focusOnTextInput();
                return false;
            }
        }
        listItems.removeClass('app-focus');
        focusedListItem.addClass('app-focus');
        // make sure the focused item is visible to the user
        scrollIntoView(focusedListItem);
        return false;
    }).on('blur', '.app-data-list,.app-control-helper,.app-checkbox-container,.app-drop-box', function (e) {
        var container = $(this);
        container.find('.app-focus').removeClass('app-focus');
        container.parent().removeClass('app-has-focus');
        //_input.labelState(container, false);
    }).on('keydown', '.ui-panel-inner', function (e) {
        var keyCode = e.keyCode || e.which,
            inner = $(this), ul,
            innerOffset = inner.offset(),
            dir, item, allItems;
        if (keyCode == 37)
            dir = 'left';
        else if (keyCode == 39)
            dir = 'right';
        else if (keyCode == 40)
            dir = 'down';
        else if (keyCode == 38)
            dir = 'up';
        else if (keyCode == 36)
            dir = 'home';
        else if (keyCode == 35)
            dir = 'end';
        else if (keyCode == 13 || keyCode == 32)
            dir = 'select';
        if (keyCode == 9) {
            if (inner.closest('.app-sidebar').length) {
                focusScrollable();
                findScrollable().find('.app-selected').addClass('ui-btn-active');
                return false;
            }
        }
        if (dir) {
            inner.find('ul').each(function () {
                var list = $(this),
                    listOffset = list.offset();
                if (listOffset.left >= innerOffset.left && listOffset.left < innerOffset.left + 10) {
                    ul = list;
                    return false;
                }
            });
            if (!ul) return false;
            allItems = ul.find('.ui-btn').filter(function () { return !$(this).parent().is('.ui-disabled'); });
            item = ul.find('.app-focus');
            if (item.length) {
                if (dir == 'right')
                    dir = item.find('.material-icon-chevron-right').length ? 'select' : 'down';
                if (dir == 'left')
                    dir = item.find('.material-icon-chevron-left').length ? 'select' : 'up';
                if (dir == 'select')
                    if (item.length) {
                        var context = item.data('data-context') || item.data('context-action');
                        if (keyCode == 32 && (!context || !context.keepOpen))
                            return false;
                        skipTap = false;
                        item.trigger('vclick');
                        return false;
                    }
                    else
                        dir = 'down';
            }
            if (!item.length) {
                item = allItems.first();
                if (dir == 'up' || dir == 'end')
                    item = allItems.last();
                item.addClass('app-focus');
            }
            else if (dir == 'down')
                $(allItems).each(function (index) {
                    if (item.is(this)) {
                        item = $(allItems.get(index < allItems.length - 1 ? index + 1 : 0));
                        return false;
                    }
                });
            else if (dir == 'up')
                $(allItems).each(function (index) {
                    if (item.is(this)) {
                        item = $(allItems.get(index > 0 ? index - 1 : allItems.length - 1));
                        return false;
                    }
                });

            else if (dir == 'home')
                item = allItems.first();
            else if (dir == 'end')
                item = allItems.last();

            ul.find('.ui-btn-active, .app-focus').removeClass('ui-btn-active app-focus');
            item.addClass('app-focus ui-btn-active');
            scrollFocusedLinkIntoView(item, inner);
            event.preventDefault();
        }
    }).on('keydown', '.app-drop-box', function (e) {
        var keyCode = e.keyCode || e.which,
            dropBox = $(this), action;
        if (keyCode == 32 /*|| keyCode == 13 && !e.shiftKey*/)
            action = 'vclick';
        else if (keyCode == 8 || keyCode == 46)
            action = 'clear';
        /*       else
                   action = _input.eventToDirection(e);*/
        if (action) {
            if (action == 'vclick')
                dropBox.trigger(action);
            else if (action == 'clear')
                dropBox.parent().find('.app-clear').trigger('vclick');
            /*            else
                            _input.move(dropBox, action, keyCode);*/
            return false;
        }
    }).on('keydown', '.app-wrapper', function (event) {
        var keyCode = event.keyCode || event.which,
            wrapper, wrapperOffset, stickyHeaderBar, stickyHeaderBarOffset,
            listview, selectedLink, dataContext, itemOffset,
            dataView, extension, action, deltaY, top, bottom;
        // Down
        switch (keyCode) {
            case 35:
                action = 'end';
                break;
            case 36:
                action = 'home';
                break;
            case 39:
                action = 'right';
                break;
            case 40:
                action = 'down';
                break;
            case 37:
                action = 'left';
                break;
            case 38:
                action = 'up';
                break;
            case 13:
                if ($(event.target).is('textarea'))
                    return;
                action = 'enter';
                break;
            //case 45:
            //    action = 'new';
            //    break;
            //case 46:
            //    action = 'del';
            //    break;
            case 9:
                if (mobile._menuButton.is('.ui-icon-bars') && !findActivePage().is('.app-page-modal'))
                    action = 'tab';
                break;
        }
        if (action && $('.ui-panel-dismiss:visible,.app-popup').length) {
            event.preventDefault();
            return false;
        }
        if (action && !event.ctrlKey && !$(event.target).is(':input')) {
            wrapper = $(this);
            listview = wrapper.children('.app-listview');
            if (action == 'tab') {
                if (appBars.left.visible) {
                    refreshContext(true);
                    refreshContext(false, 0);
                    listview.find('.ui-btn-active').removeClass('ui-btn-active');
                    appBars.left.inner.focus().find('.ui-btn').first().addClass('app-focus ui-btn-active');
                    return false;
                }
            }
            if (listview.length && listview.is(':visible')) {
                if (action.match(/left|right|home|end/) && listview.is('.app-grid')) {
                    dataView = mobile.dataView();
                    var availWidth = dataView.session('grid-avail-width'),
                        firstDataItem = listview.find('.dv-item').first(),
                        maxScroll = firstDataItem.length && Math.ceil(availWidth - availWidth * (firstDataItem.width() / availWidth)),
                        scrollLeft = dataView.session('scroll-left') || 0,
                        doScroll;
                    if (maxScroll)
                        if (action == 'right' && scrollLeft < maxScroll) {
                            scrollLeft = Math.min(scrollLeft + 32, maxScroll);
                            doScroll = true;
                        }
                        else if (action == 'left' && scrollLeft > 0) {
                            scrollLeft = Math.max(scrollLeft - 32, 0);
                            doScroll = true;
                        }
                        else if (action == 'home') {
                            scrollLeft = 0;
                            doScroll = true;
                        }
                        else if (action == 'end') {
                            scrollLeft = maxScroll;
                            doScroll = true;
                        }
                    if (doScroll) {
                        dataView.session('scroll-left', scrollLeft);
                        gridScrollStyle(dataView, -scrollLeft);
                    }
                    event.preventDefault();
                    return;
                }
                selectedLink = listview.find('.dv-item .app-selected');
                if (!selectedLink.length) {
                    selectedLink = listview.find('.dv-item').first().find('a');
                    action = 'none';
                }
                if (selectedLink.length) {
                    // figure the dataview
                    var selectedItem = selectedLink.parent();
                    dataView = mobile.dataView();
                    extension = dataView.extension();
                    // move if needed
                    if (action == 'right')
                        action = 'down';
                    else if (action == 'left')
                        action = 'up';
                    if (action == 'down')
                        selectedItem = selectedItem.next();
                    else if (action == 'up')
                        selectedItem = selectedItem.prev();
                    selectedLink = selectedItem.find('a');
                    dataContext = selectedLink.data('data-context');
                    // perform a click
                    if (dataContext && !selectedItem.is('.dv-load-at-top-parent,.dv-load-at-bottom-parent,.app-calculated')) {
                        listview.find('.ui-btn.app-selected').removeClass('app-selected ui-btn-active');
                        //selectedLink.addClass('app-selected');
                        checkIfMultiSelect(dataView, selectedLink);
                        extension.tap(dataContext, action == 'enter' ? null : 'none');
                        getPageInfo(dataView).echoChanged = true;
                        selectedLink.addClass('app-selected ui-btn-active');
                        /* if (action == 'enter')
                             selectedLink.addClass('app-selected');
                         else */
                        if (action.match(/up|down/)) {
                            itemOffset = selectedItem.offset();
                            wrapperOffset = wrapper.offset();
                            headerBar = wrapper.data('sticky-header');//stickyHeaderBar(wrapper);
                            stickyHeaderBarOffset = headerBar.offset();
                            top = Math.max(wrapperOffset.top, stickyHeaderBarOffset.top + headerBar.outerHeight());
                            bottom = wrapperOffset.top + wrapper.height() - 1;
                            if (itemOffset.top < top)
                                deltaY = itemOffset.top - top;
                            else if (itemOffset.top + selectedItem.outerHeight() > bottom)
                                deltaY = itemOffset.top + selectedItem.outerHeight() - bottom;
                        }
                        event.preventDefault();
                        if (deltaY)
                            setTimeout(function () {
                                wrapper.scrollTop(wrapper.scrollTop() + deltaY);
                            }, 10);
                    }
                }
            }
        }
    }).on('mousedown', '.app-hscrollbar2', function (event) {
        if (isTouchPointer) return;
        var that = $(this),
            scrollable,
            handle;
        if (!$(event.target).is('.app-hscrollbar-handle')) {
            scrollable = that.prev();
            if (scrollable.attr('class').match(/-outer/))
                scrollable = scrollable.children().first();
            scrollable.scrollLeft(scrollable.scrollLeft() + (event.pageX < that.find('.app-hscrollbar-handle').offset().left ? -1 : 1) * calcWidth(scrollable));
        }
    }).on('mousedown', '.app-vscrollbar', function (event) {
        if (isTouchPointer) return;
        var that = $(this),
            scrollable,
            handle;
        if (!$(event.target).is('.app-vscrollbar-handle')) {
            scrollable = that.prev();
            if (scrollable.attr('class').match(/-outer/))
                scrollable = scrollable.children().first();
            scrollable.scrollTop(scrollable.scrollTop() + (event.pageY < that.find('.app-vscrollbar-handle').offset().top ? -1 : 1) * scrollable.height());
        }
    }).on('transitionend', '.app-hidden', function () {
        var that = $(this).parent(),
            timeout,
            newItem;
        if (that.is('.app-data-list')) {
            newItem = that.find('[data-index="new"]');
            if (newItem.length) {
                timeout = that.data('revealTimeout');
                clearTimeout(timeout);
                that.data('revealTimeout', setTimeout(function () {
                    newItem.parent().prevAll().remove();
                    newItem.prevAll().remove();
                    newItem.parent().removeClass('app-hidden');
                }, 50));
            }
        }
    }).on('vclick', '[data-container="toggle"]', function (e) {
        var that = $(this),
            //icon = that.find('.app-collapsible-toggle-button'),
            //iconOffset = icon.offset(),
            //x = lastTouchX(e.clientX),
            minimized, tooltip, button;
        that.addClass('ui-btn-active');
        setTimeout(function () {
            that.removeClass('ui-btn-active');
            setTimeout(function () {
                minimized = that.parent().toggleClass('app-container-collapsed').is('.app-container-collapsed');
                tooltip = minimized ? resourcesForm.Maximize : resourcesForm.Minimize;
                button = that.find('.app-collapsible-toggle-button');
                if (button.data('title')) {
                    button.data('title', tooltip);
                    if (!isTouchPointer)
                        setTimeout(function () {
                            button.attr('title', tooltip).trigger('mouseenter', 10);
                        }, 50);
                }
                else
                    button.attr('title', tooltip);
                that.parent().find('[data-control="dataview"]').each(function () {
                    var id = $(this).attr('id') || '_ph',
                        echo = that.closest('.app-wrapper').find('#' + id.substring(0, id.length - 3) + '_echo');
                    echo.css('display', minimized ? 'none' : '');

                });
                if (!minimized)
                    ensureLayoutControls({ controls: that.closest('[data-container="collapsible"]').data('node').children });
                //icon.attr('title', minimized ? resourcesForm.Maximize : resourcesForm.Minimize).removeData('title');
                //if (!isTouchPointer && iconOffset && x >= iconOffset.left && x < iconOffset.left + icon.outerWidth())
                //    showTooltip(iconOffset.left, iconOffset.top + 25, icon.attr('title'));
                pageResized();
            })
        }, feedbackDelay);
        clearHtmlSelection();
        hideTooltip();
        return false;
    }).on('vclick', '.app-field-object-ref', function () {
        var target = $(this),
            control = target.closest('[data-control]'),
            inputContainer = target.closest('[data-input-container]'),
            dataView, field, row;
        dataView = _app.find(inputContainer.attr('data-input-container'));
        if (dataView) {
            field = dataView.findField(control.attr('data-field'));
            if (field) {
                callWithFeedback(target, function () {
                    mobile.details({ field: field });
                });
            }
        }
        return false;
    }).on('vclick', '.app-echo-see-all', function () {
        var link = $(this).addClass('ui-btn-active');
        setTimeout(function () {
            link.removeClass('ui-btn-active');
            useFullscreenWhenSeeAll = true;
            mobile.changePage(link.closest('.app-echo').attr('data-for'));
        }, feedbackDelay);
        return false;
    }).on('vclick', '.app-echo-toolbar a', function (e) {
        var link = $(e.target),
            id = link.closest('.app-echo').attr('data-for');
        if (clickable(link) && !mobile.busy())
            callWithFeedback(link, function () {
                /*if (link.is('.ui-icon-carat-r')) // this is not applicable anymore since the button is "hidden". Now we use "See All >" instead.
                    mobile.changePage(id);
                else*/ if (link.is('.ui-icon-dots')) {
                    mobile.showContextMenu({
                        scope: id,
                        position: findPage(link).is('.app-page-panel') ? 'right' : null
                    });
                }
            });
        return false;
    }).on('vclick', '.app-sidebar ul', function (e) {
        if (panelIsBusy || !clickable(e.target))
            return false;
        var link = $(e.target).closest('a'),
            action = link.data('context-action');
        if (link.length)
            if (action) {
                if (!mobile.busy())
                    callWithFeedback(link, function () {
                        executeContextAction(action, link);
                    });
                return false;
            }
            else
                activeLink(link, false);
    }).on('vclick', '.app-bar-buttons', function (e) {
        var button,
            x = lastTouchX(e.clientX);
        $(this).find('.ui-btn').each(function () {
            var btn = $(this),
                btnOffset = btn.offset();
            if (btn.is(':visible') && x >= btnOffset.left - 8 && x <= btnOffset.left + btn.outerWidth() + 8) {
                setTimeout(function () {
                    btn.trigger('vclick');
                });
                return false;
            }
        });
        return false;
    }).on('touchstart mousedown', '.app-page-modal-title', function () {
        var input = findInput(),
            fieldName;
        if (input.length) {
            fieldName = dataInputOf(input)/*.closest('[data-input]')*/.data('field');
            if (fieldName)
                findActivePage().data('last-focused-field', fieldName);
        }
    }).on('vclick', '.app-page-modal-title', function (e) {
        var button,
            x = lastTouchX(e.clientX);
        $(this).find('.app-btn').each(function () {
            var btn = $(this),
                btnOffset = btn.offset();
            if (btn.is(':visible') && x >= btnOffset.left - 8 && x <= btnOffset.left + btn.outerWidth() + 8) {
                button = btn;
                return;
            }
        });
        if (button)
            callWithFeedback(button, function () {
                if (button.is('.ui-icon-dots'))
                    mobile.showContextMenu();
                else if (button.is('.app-btn-search'))
                    _app.search();
                else if (button.is('.app-btn-close'))
                    goBack();
                else if (button.is('.app-btn-fullscreen')) {
                    var zoomed = !button.is('.app-btn-fullscreen-exit'),
                        lastFocused = findActivePage().data('last-focused-field');
                    button.removeData('title').toggleClass('app-btn-fullscreen-exit', zoomed).attr('title', resourcesMobile[(zoomed ? 'Exit' : '') + 'Fullscreen']).closest('.ui-page').toggleClass('app-page-modal-fullscreen', zoomed);
                    pageResized(true);
                    if (lastFocused)
                        _input.focus({ lastFocused: lastFocused });
                }
            });
        return false;
    }).on('vclick', '.app-btn-menu', handleMenuButtonClick).on('vclick', '.app-back-text', function () {
        mobile._menuButton.trigger('vclick');
        return false;
    }).on('vclick', '.app-bar-toolbar', handleToolbarClick).on('vclick', '.StatusBar .Segment', function (e) {
        var text = $(this).text();
        setTimeout(function () {
            wizard('select', { text: text });
        });
        return false;
    }).on('vclick', '.app-page-modal-glass-pane-partial', function (e) {
        setTimeout(goBack);
        return false;
    }).on('vclick', '.app-page-modal-glass-pane,.app-page-modal-background', function () {
        var pageInfo = mobile.pageInfo();
        if (pageInfo.dataView && pageInfo.dataView.tagged('modal-tap-out'))
            goBack();
        else {
            var page = findActivePage().toggleClass('app-page-modal-centered');
            setTimeout(function () {
                page.toggleClass('app-page-modal-centered')
            }, 100);
        }

    }).on('touchmove pointermove', '.app-page-modal-glass-pane,.app-page-modal-background,.app-progress-screen', function (e) {
        e.preventDefault();
        return false;
    }).on('vclick', '.app-sidebar .app-bar-toolbar-bottom .ui-btn', function (e) {
        var link = $(e.target).closest('.ui-btn');
        if (!link.is('.app-selected')) {
            if (link.is('.app-btn-page'))
                link.closest('.app-bar-toolbar-bottom').find('.ui-btn').removeClass('app-selected');
            callWithFeedback(link, function () {
                var node = link.data('context');
                if (node) {
                    link.addClass('app-selected');
                    menuItemNodeCallback(node);
                }
                else if (link.is('.app-btn-apps'))
                    showApps();
                else if (link.is('.app-btn-settings'))
                    configureSettings('left');
            });
        }
        return false;
    }).on('focusout', '.app-sidebar .ui-panel-inner', function (e) {
        $(this).find('.app-focus').removeClass('app-focus ui-btn-active');
    }).on('vclick', '.app-bar-search', function (e) {
        var searchBar = $(this),
            icon;
        $(this).find('.app-icon').each(function () {
            var that = $(this),
                x = lastTouchX(),
                offset = that.offset();
            if (offset.left <= x && x < offset.left + that.outerWidth()) {
                icon = that;
                return false;
            }
        });
        if (icon) {
            var dataView = mobile.contextDataView(),
                searchDataViewId = dataView.survey().context.id; // search survey
            callWithFeedback(icon, function () {
                if (icon.is('.material-icon-cancel')) {
                    findInput()/*$('.app-data-input')*/.blur();
                    icon.closest('.app-bar-search').addClass('app-null');
                    _input.execute({ values: { name: 'QuickFind', value: null } });
                    _input.focus();
                    _app.search('autoComplete', { id: searchDataViewId, dataInput: searchBar.find('[data-field="QuickFind"]') });
                }
                else if (icon.is('.material-icon-search'))
                    _app.action({ path: 'form/submit' });
                else if (icon.is('.material-icon-more'))
                    _app.search('toggle', searchDataViewId);
            });
            return false;
        }
        else if (!findInput().length) {
            _input.focus();
            return false;
        }
    }).on('mousedown pointerdown touchstart', '.app-control-toolbar', function (e) {
        rtf.range('save');
        rtf.focus();
        findInput().data('keepFocus', true);
    }).on('vclick', '.app-control-toolbar', function (e) {
        var target = $(e.target),
            button,
            x = lastTouchX(e.clientX);
        if (target.is('.app-has-droparrow')) {
            var input = findInput().data('keepFocus', true).blur(),
                field = _input.elementToField(input);
            target.addClass('app-selected');
            input.data('keepFocus', true);
            rtf.range('restore', { force: true });
            setTimeout(function () {
                var g = target.data('group'),
                    options = [];
                g.list.forEach(function (c) {
                    var command = c.command,
                        argument = c.argument,
                        icon = c.icon,
                        text;
                    if (rtf.allow(field, c))
                        if (command) {
                            text = rtf.toText(command, argument);//resourcesEditor[command.substring(0, 1).toUpperCase() + command.substring(1)]
                            options.push({
                                text: text, icon: icon ? ('material-icon-' + icon) : icon, context: { c: command, a: argument }, callback: rtf.exec
                            });
                        }
                });
                function showPopup() {
                    showListPopup({
                        anchor: target, items: options, y: target.offset().top + target.outerHeight(),
                        afterclose: function () {
                            target.removeClass('app-selected');
                            rtf.focus();
                        }
                    });
                }

                if (isTouchPointer)
                    setTimeout(showPopup, 200);
                else
                    showPopup();
            }, feedbackDelay);
        }
        else if (target.is('.app-control-toolbar-more')) {
            var input = findInput().data('keepFocus', true).blur(),
                context = [],
                position;
            //mobile.pageInfo().autoFocus = false;
            button = target;


            dataInputOf(input, '.app-control-toolbar')/* input.closest('[data-input]').find('.app-control-toolbar')*/.find('.app-has-droparrow,i,.app-divider').each(function () {
                var btn = $(this),
                    group = btn.data('group'),
                    command = btn.data('command'),
                    icon = btn.data('icon');
                if (group)
                    context.push({
                        text: group.text, icon: false, transition: true, callback: function (index) {
                            var newContext = [
                                {
                                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                                        showContextPanel(context, '#app-rtf', position);
                                    }
                                }, {}
                            ];
                            group.list.forEach(function (c) {
                                var command = c.command,
                                    argument = c.argument,
                                    icon = c.icon;
                                if (command && rtf.allow(field, c))
                                    newContext.push({ text: rtf.toText(command, argument), icon: icon ? ('material-icon-' + icon) : false, context: { c: command, a: argument }, callback: rtf.exec });
                            });
                            showContextPanel(newContext, '#app-rtf-' + 1, {
                                close: rtf.focus
                            });
                        }
                    });
                else if (command)
                    context.push({
                        text: btn.data('text'), shortcut: btn.data('shortcut'), icon: icon ? ('material-icon-' + icon) : false, context: { c: btn.data('command'), a: btn.data('argument') }, callback: rtf.exec, disabled: btn.is('.app-disabled'), state: btn.is('.app-selected')
                    });
                else
                    context.push({});
            });
            target.addClass('app-active');
            input.data('keepFocus', true);
            rtf.range('restore', { force: true });

            setTimeout(function () {
                target.removeClass('app-active');
                var range = rtf.range(),
                    position = range ? (_screen.width - 325 > input.offset().left + range.getBoundingClientRect().right ? 'right' : 'left') : 'right'
                showContextPanel(context, '#app-rtf', {
                    position: position,
                    close: rtf.focus
                });
            }, feedbackDelay);
            return false;
        }
        else if (!target.is('.app-shim-more'))
            $(this).find('i').each(function () {
                var btn = $(this),
                    offset = btn.offset();
                if (x >= offset.left - 4 && x <= offset.left + btn.outerWidth() + 4) {
                    button = btn;
                    return false;
                }
            });
        if (button && button.length && !button.is('.app-disabled')) {
            if (!android)
                findInput().data('keepFocus', true).blur();
            //rtf.range('restore');
            button.addClass('app-active');
            setTimeout(function () {
                button.removeClass('app-active');
                rtf.range('restore');
                rtf.focus();
                //setTimeout(function () {
                rtf.range('exec', { command: button.data('command'), argument: button.data('argument') }); //execCommandOnSelectedRange(button.data('command'), button.data('argument'));
                //}, feedbackDelay);
            }, feedbackDelay);
        }
        return false;
    }).on('mousedown pointerdown touchstart', '.app-has-rtf', function (e) {
        if ($(e.target).is('.app-has-rtf,.app-data-input-placeholder'))
            return false;
    }).on('rtfeditorsubmit.dataview.app', function (e) {
        rtf.document('blur');
        var dataView = e.dataView,
            data = dataView.data(),
            fieldName = e.survey.context.field;
        dataView.tag('discard-changes-prompt-none');
        whenPageShown(function () {
            _input.execute({ values: [{ name: fieldName, value: data['text'] }] });
        });
    }).on('touchstart pointerdown mousedown', '.app-glass-pane', function (e) {
        saveTouchPoint(e);
        $(this).addClass('app-glass-pane-reject');
        e.preventDefault();
        e.stopPropagation();
    }).on('mouseenter', '.app-menu-strip .ui-btn', function (e) {
        if (!isTouchPointer) {
            var btn = $(this);
            clearTimeout(autoOpenMenuTimeout);
            autoOpenMenuTimeout = setTimeout(function () {
                if (btn.is('.app-has-children'))
                    btn.trigger('vclick');
                else if (btn.closest('.app-menu-strip').length)
                    closePopups(true, '.app-popup-menu');
            }, $('.ui-popup-active .app-popup-menu').length ? 100 : 350);
        }
    }).on('mouseleave', '.app-menu-strip .ui-btn', function (e) {
        if (!isTouchPointer) {
            clearTimeout(autoOpenMenuTimeout);
            var btn = $(this);
            if (!btn.data('selected'))
                closePopups(true, '.app-popup-menu');
        }
    }).on('mousedown', '.ui-popup-screen,.app-menu-strip,.app-logo,.app-bar-toolbar', function (e) {
        var x = e.pageX, y = e.pageY, triggerClick;
        if (!isTouchPointer && $('.ui-popup-active').length && e.button == 0) {
            triggerClick = !$(e.target).closest('.app-bar-toolbar').length;
            closePopups(true);
            if (triggerClick)
                setTimeout(function () {
                    var clickEvent = $.Event('vclick');
                    clickEvent.pageX = clickEvent.clientX = x;
                    clickEvent.pageY = clickEvent.clientY = y;;
                    $(document.elementFromPoint(x, y)).trigger(clickEvent);
                }, 75);
            return false;
        }
    }).on('vclick', '.app-bar-tabs li', function (e) {
        var li = $(this),
            item = li.data('item');
        if (item)
            menuItemNodeCallback(item.context);
        else
            showApps('right', false, true);
        return false;
    });

    // Rich Text Format API

    rtf = {
        list: [],
        groups: [
            {
                list: [
                    { command: 'undo', key: 'Ctrl+Z', metaKey: true, icon: 'undo', toolbar: false },
                    { command: 'redo', key: 'Ctrl+Y', icon: 'redo', toolbar: false },
                    { command: 'redo', key: 'Meta+Shift+Z', toolbar: false, hidden: true }
                ]
            },
            {
                text: resourcesEditor.Format,
                list: [
                    { command: 'formatBlock', argument: 'p', icon: 'short-text' },
                    { command: 'formatBlock', argument: 'blockquote', icon: 'format-quote' },
                    { command: 'formatBlock', argument: 'h1', icon: 'title' },
                    { command: 'formatBlock', argument: 'h2' },
                    { command: 'formatBlock', argument: 'h3' },
                    { command: 'formatBlock', argument: 'h4' },
                    { command: 'formatBlock', argument: 'h5' },
                    { command: 'formatBlock', argument: 'h6' }
                ]
            },
            {
                list: [
                    { command: 'bold', key: 'Ctrl+B', metaKey: true, icon: 'format-bold' },
                    { command: 'italic', key: 'Ctrl+I', metaKey: true, icon: 'format-italic' },
                    { command: 'underline', key: 'Ctrl+U', metaKey: true, icon: 'format-underlined' },
                    { command: 'strikethrough', key: 'Alt+Shift+5', metaKey: true, icon: 'strikethrough-s' }
                ]
            },
            {
                list: [
                    { command: 'insertUnorderedList', icon: 'format-list-bulleted' },
                    { command: 'insertOrderedList', icon: 'format-list-numbered' }
                ]
            },
            {
                list: [
                    { command: 'justifyLeft', key: 'Ctrl+L', metaKey: true, icon: 'format-align-left' },
                    { command: 'justifyCenter', key: 'Ctrl+E', metaKey: true, icon: 'format-align-center' },
                    { command: 'justifyRight', key: 'Ctrl+R', metaKey: true, icon: 'format-align-right' },
                    { command: 'justifyFull', key: 'Ctrl+J', metaKey: true, icon: 'format-align-justify' }
                ]
            },
            {
                list: [
                    { command: 'indent', icon: 'format-indent-increase', key: 'Ctrl+]', which: 221 },
                    { command: 'outdent', icon: 'format-indent-decrease', key: 'Ctrl+[', which: 219 }
                ]
            },
            {
                list: [
                    { command: 'removeFormat', icon: 'format-clear' },
                    { command: 'rtf', argument: 'editor', icon: 'fullscreen', key: 'F11' }
                ]
            }
        ],
        status: {
            undo: true,
            redo: true,
            indent: true,
            outdent: true
        },
        init: function () {
            rtf.groups.forEach(function (g) {
                g.list.forEach(function (c) { rtf.list.push(c); });
            });
        },
        allow: function (field, commandDef) {
            if (!field) {
                field = _input.elementToField(findInput());
                if (!field) return false;
            }
            var tag = field.Tag, test, result,
                command = commandDef.command,
                argument = commandDef.argument;
            if (command == 'rtf' && argument == 'editor' && field._dataView._controller == 'rtfeditor_sys')
                return false;
            if (!tag || !tag.match(/\brtf\-command\-/))
                return true;
            test = command;
            if (argument)
                test += '-' + argument;
            return field.is('rtf-command-' + test);
        },
        document: function (method) {
            var input = findInput(),
                doc = input.is('iframe') ? input[0].contentDocument : null;
            if (doc)
                if (method == 'focus')
                    doc.body.focus();
                else if (method == 'blur') {
                    var rtfOffset = input.offset(),
                        fakeInput = $('<input/>').css({ borderWidth: 0, position: 'absolute', left: rtfOffset.left, top: rtfOffset.top }).appendTo(input.parent()).focus();
                    input.blur();
                    fakeInput.remove();
                    focusScrollable();
                }
            return doc;
        },
        window: function (method) {
            var input = findInput(),
                result = input.is('iframe') ? input[0].contentWindow : null;
            if (result)
                if (method == 'selection')
                    result = result.getSelection();
            return result;
        },
        toText: function (command, argument) {
            var text = resourcesEditor[command.substring(0, 1).toUpperCase() + command.substring(1)];
            if (typeof text != 'string')
                text = text[argument];
            return text;
        },
        range: function (method, options) {
            if (!method)
                method = 'get';
            // save the range in the internal global variable
            if (method == 'save') {
                rtf._range = rtf.range();
                return;
            }
            // reset the internal range
            if (method == 'clear') {
                rtf._range = null;
                return;
            }
            var selection = rtf.window('selection');
            if (method == 'get')
                return selection && selection.getRangeAt && selection.rangeCount ? selection.getRangeAt(0) : null;
            // other range manipulation
            var contentDocument = rtf.document(),
                range = rtf._range;
            if (method == 'restore') {
                if (options && options.force) {
                    if (range && range.startOffset == range.endOffset) {
                        var r = range.getBoundingClientRect(),
                            input = findInput(),
                            inputOffset = input.offset(),
                            cursor = $('<span class="app-rtf-cursor"/>').appendTo($body).css({ left: inputOffset.left + r.left, top: inputOffset.top + r.top + parseCss(input, 'padding-top'), height: r.height }).data('blink', setInterval(function () {
                                cursor.css('display', cursor.css('display') != 'none' ? 'none' : '');
                            }, 500));

                    }
                }
                else {
                    var cursor = $('.app-rtf-cursor');
                    clearInterval(cursor.data('blink'));
                    cursor.remove();
                }
                // restore selected range
                if (range && selection) {
                    try {
                        selection.removeAllRanges();
                    }
                    catch (ex) {
                        contentDocument.body.createTextRange().select();
                        contentDocument.selection.empty();
                    }
                    try {
                        selection.addRange(range);
                    }
                    catch (ex) {
                        rtf._range = null;
                    }
                }
            }
            else if (method == 'insert') {
                var result = true,
                    tag = options && options.tag;
                if (tag) {
                    if (tag == 'br') {
                        var br = contentDocument.createElement(tag);
                        range.deleteContents();
                        range.insertNode(br);
                        range.setStartAfter(br);
                        range.setEndAfter(br);
                        range.collapse(false);
                        selection.removeAllRanges();
                        selection.addRange(range);
                        result = false;
                    }
                    else
                        contentDocument.execCommand('formatBlock', false, tag);
                    findInput().trigger('rtfchanged');
                    return result;
                }
            }
            else if (method == 'exec' && options) {
                var command = options.command,
                    argument = options.argument;
                if (command == 'rtf') {
                    if (rtf.allow(null, options)) {
                        rtf.range('restore');
                        rtf[argument]();
                    }
                    return;
                }
                if (options.validate && command && !command.match(/^(undo|redo)$/)) {
                    if (!rtf.allow(null, options))
                        return;
                }
                rtf.range('restore');
                if (command == 'formatBlock' && argument) {
                    if (!contentDocument.execCommand(command, 0, argument))
                        contentDocument.execCommand(command, 0, '<' + argument + '>')
                }
                else
                    contentDocument.execCommand(command, 0, argument);
                contentDocument.body.focus();
                rtf.range('status');
                findInput().trigger('rtfchanged');
            }
            else if (method == 'focus') {
                rtf.range('restore');
                findInput().focus();
                rtf.document('focus');
            }
            else if (method == 'status') {
                dataInputOf(findInput(), '.app-control-toolbar i')/*.closest('[data-input]').find('.app-control-toolbar i')*/.each(function () {
                    var btn = $(this),
                        command = btn.data('command');
                    if (command && command != 'rtf')
                        try {
                            btn.toggleClass('app-selected', contentDocument.queryCommandState(command));
                            if (rtf.status[command])
                                btn.toggleClass('app-disabled', !contentDocument.queryCommandEnabled(command));
                            else
                                btn.toggleClass('app-selected', contentDocument.queryCommandState(command));
                        }
                        catch (ex) {
                        }
                });
            }
            else if (method == 'select') {
                var startX = options.x,
                    startY = options.y,
                    endX = options.x2,
                    endY = options.y2;
                if (startX == null) return null;
                try {
                    if (endX == null)
                        endX = startX;
                    if (endY == null)
                        endY = startY;
                    var win = rtf.window(),
                        start, end, range = null;
                    if (typeof contentDocument.caretPositionFromPoint != "undefined") {
                        start = contentDocument.caretPositionFromPoint(startX, startY);
                        end = contentDocument.caretPositionFromPoint(endX, endY);
                        range = contentDocument.createRange();
                        range.setStart(start.offsetNode, start.offset);
                        range.setEnd(end.offsetNode, end.offset);
                    } else if (typeof contentDocument.caretRangeFromPoint != "undefined") {
                        start = contentDocument.caretRangeFromPoint(startX, startY);
                        end = contentDocument.caretRangeFromPoint(endX, endY);
                        range = contentDocument.createRange();
                        range.setStart(start.startContainer, start.startOffset);
                        range.setEnd(end.startContainer, end.startOffset);
                    }
                    if (range !== null && typeof win.getSelection != "undefined") {
                        var sel = win.getSelection();
                        sel.removeAllRanges();
                        sel.addRange(range);
                        //if (range.select)
                        //    range.select();
                    } else if (typeof contentDocument.body.createTextRange != "undefined") {
                        range = contentDocument.body.createTextRange();
                        range.moveToPoint(startX, startY);
                        var endRange = range.duplicate();
                        endRange.moveToPoint(endX, endY);
                        range.setEndPoint("EndToEnd", endRange);
                        range.select();
                    }
                    return range;
                }
                catch (ex) {
                    return null;
                }
            }
        },
        exec: function (context) {
            rtf.range('exec', { command: context.c, argument: context.a });//execCommandOnSelectedRange(context.cmd, context.args);                
        },
        focus: function () {
            rtf.range('focus');
        },
        editor: function (options) {
            var field, fieldName, data, editorType, tag, commands = [], iterator, rtfCommand;
            if (options) {
                field = mobile.dataView().findField(options.field);
                editorType = options.type;
            }
            else
                field = _input.elementToField(dataInputOf(findInput()/*.closest('[data-input]')*/));
            tag = field.Tag;
            if (tag) {
                iterator = /\brtf\-command\-(.+?)(\s|$)/g;
                while (rtfCommand = iterator.exec(tag))
                    commands.push(rtfCommand[0]);
            }
            fieldName = field.Name;
            rtf.document('blur');
            data = field._dataView.data();
            lastFocusedField(editorType ? null : fieldName);
            _app.survey({
                controller: 'rtfeditor_sys',
                context: { field: fieldName },
                text: field.HeaderText,
                text2: resourcesActions.Scopes.Form.Edit.HeaderText,
                questions: [
                    { name: 'text', rows: 5, mode: 'rtf', value: data[fieldName], tags: (commands.length ? commands.join(' ') : null) }
                ],
                layout: '<div data-container="simple" data-wrap="true" class="app-rtf-editor"><div data-container="row"><span data-control="field" data-field="text"/></div></div>',
                options: {
                    modal: {
                        fullscreen: editorType ? editorType == 'fullscreen' : _screen.width <= toPhysicalWidth('xl')
                    },
                    materialIcon: 'edit'
                },
                submit: 'rtfeditorsubmit.dataview.app',
                submitKey: 'Ctrl+Enter',
                submitText: resourcesModalPopup.SaveButton
            });
        },
        scrolled: function (e) {
            rtf.toolbar('position');
        },
        blur: function (e) {
            var textInput = findInput(dataInputOf(e.target));
            if (!textInput.is('iframe') || textInput.is(e.target) || panelIsBusy)
                return;
            if (!iOS)
                textInput.blur();


            // this is to force display of the input caret after the loss of focus in RTF on iOS
            //if (iOS)
            //    setTimeout(function () {
            //        var input = findInput();
            //        if (input.length/* && input[0].setSelectionRange*/ && input.is('iframe')) {
            //            document.focus();
            //            //rtf.document('focus');
            //            //input[0].setSelectionRange(0, input.text().length);
            //        }
            //    },100);
        },
        autoSize: function (e) {
            if (!rtf.document()) return;
            var textInput = findInput(),
                dataInput = dataInputOf(textInput),//.closest('[data-input]'),
                inner = dataInput.find('.app-control-inner'),
                placeholder,
                value = textInputToValue(textInput),// contentDocument.body.innerHTML,
                lastValue = inner.html(),
                height;
            if (lastValue != value) {
                height = inner.height();
                inner.html(value.length ? value : _input.fieldToPlaceholder(_input.elementToField(textInput)) || '&nbsp;');
                lastValue = value;
                if (height != inner.height()) {
                    textInput.parent().scrollTop(0);
                    syncEmbeddedViews();
                    rtf.range('save'); //saveSelectedRange();
                }
                placeholder = dataInput.find('.app-data-input-placeholder');
                placeholder.css('display', value.length ? 'none' : '');
            }
        },
        handlers: function (textInput, attach) {
            var contentDocument = textInput[0].contentDocument,
                $contentDocument = $(contentDocument),
                dataInput = dataInputOf(textInput),//.closest('[data-input]'),
                inner = dataInput.find('.app-control-inner'),
                lastValue = inner.html();

            if (attach) {
                textInput.on('rtfchanged', rtf.autoSize);
                $(document).one('focusin touchend', rtf.blur);
                $(document).on('scroll.app scrollstop.app resized.app', rtf.scrolled);

                $contentDocument.on('keydown', 'body', function (e) {
                    userActivity();
                    var key = e.originalEvent.key,
                        preventDefault;
                    if (key == 'Enter') {
                        preventDefault = rtf.range('insert', { tag: e.shiftKey ? 'br' : 'p' });
                        if (!preventDefault)
                            return false;
                    }
                    if (key == 'Tab') {
                        _input.move(findInput(), e.shiftKey ? 'up' : 'down');
                        return false;
                    }
                    if (key == 'F10') {
                        if (e.shiftKey)
                            mobile.showContextMenu();
                        else
                            //textInput.closest('[data-input]').find('.app-control-toolbar-more').trigger('vclick');
                            dataInputOf(textInput, '.app-control-toolbar-more').trigger('vclick');
                        return false;
                    }
                    if (key && key.match(/^Esc/)) {
                        var escEvent = $.Event('keydown');
                        escEvent.which = 27;
                        textInput.trigger(escEvent);
                        return false;
                    }
                    if (handleKeyboardShortcuts(e, true))
                        rtf.autoSize();
                }).on('mouseup keyup mouseout', 'body', function (e) {
                    rtf.range('save');
                    rtf.range('status');
                }).on('touchend', 'body', function (e) {
                    setTimeout(function () {
                        rtf.range('save');
                        rtf.range('status');
                    }, 100);
                }).on('paste', 'body', function (e) {
                    if (e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData) {
                        e.preventDefault();
                        var text = e.originalEvent.clipboardData.getData('text/plain');
                        contentDocument.execCommand('insertText', false, text);
                    }
                    else if (e.clipboardData && e.clipboardData.getData) {
                        e.preventDefault();
                        var text = e.clipboardData.getData('text/plain');
                        contentDocument.execCommand('insertText', false, text);
                    }
                    else if (_window.clipboardData && _window.clipboardData.getData) {
                        if (!_window._rtfLock) {
                            _window._rtfLock = true;
                            e.preventDefault();
                            contentDocument.execCommand('ms-pasteTextOnly', false);
                        }
                        _window._rtfLock = false;
                    }
                    rtf.autoSize();
                }).on('keyup', 'body', rtf.autoSize);
            }
            else {
                rtf.range('clear'); // selectedRange = null;
                $contentDocument.off();
                textInput.off('rtfchanged');
                $(document).off('scroll.app scrollstop.app resized.app', rtf.scrolled);

            }
        },
        toolbar: function (method, dataInput) {
            var inner, field, toolbar, frame;

            if (!dataInput)
                dataInput = dataInputOf(findInput());

            function create() {
                toolbar = dataInput.find('.app-control-toolbar');
                if (!toolbar.length) {
                    inner = dataInput.find('.app-control-inner');
                    field = _input.elementToField(dataInput);
                    if (field.is('rtf-frame'))
                        frame = $('</div><div class="app-control-frame app-hidden"></div>').insertBefore(inner);
                    toolbar = $('<div class="app-control-toolbar app-hidden"></div>');
                    if (!frame)
                        toolbar.addClass('app-control-toolbar-noframe');
                    rtf.groups.forEach(function (g) {
                        var lastButton,
                            allowGroup,
                            commandList = g.list,
                            groupText = g.text;
                        if (groupText) {
                            if ($(commandList).filter(function () { return rtf.allow(field, this); }).length)
                                lastButton = $('<span class="app-has-droparrow"/>').text(groupText).attr('title', groupText).data('group', g).appendTo(toolbar);
                        }
                        else
                            commandList.forEach(function (def) {
                                var command = def.command,
                                    argument = def.argument,
                                    showOnToolbar = def.toolbar != false,
                                    icon = def.icon,
                                    tooltip, shortcut,
                                    button;
                                if (!def.hidden && command && rtf.allow(field, def)) {
                                    tooltip = rtf.toText(command, argument);// resourcesEditor[command.substring(0, 1).toUpperCase() + command.substring(1)];
                                    shortcut = def.key;
                                    if (icon) {
                                        button = materialIcon('material-icon-' + icon, toolbar).attr('title', tooltip + (shortcut ? (' (' + shortcut + ')') : ''));
                                        if (!showOnToolbar)
                                            button.addClass('app-hidden');
                                    }
                                    else
                                        button = $('<i class="app-hidden"/>').appendTo(toolbar);
                                    button.data({ command: command, argument: argument, icon: icon, text: tooltip, shortcut: shortcut });
                                    lastButton = button;
                                }
                            });
                        if (lastButton) {
                            button = $('<span class="app-divider"/>').appendTo(toolbar);
                            if (lastButton.is('.app-hidden'))
                                button.addClass('app-hidden');
                        }
                    });
                    if (!field.is('rtf-more-none')) {
                        $('<span class="app-shim-more"/>').appendTo(toolbar);
                        materialIcon('material-icon-more-' + (android ? 'vert' : 'horiz'), toolbar).addClass('app-control-toolbar-more').attr('title', labelMore + ' (F10)');
                    }
                    var toolbarInfo = { bar: toolbar, frame: frame, location: field.is('rtf-toolbar-location') == 'bottom' ? 'bottom' : (android ? 'bottom' : 'top') };
                    toolbarInfo.defaultLocation = toolbarInfo.location;
                    dataInput.data('toolbar', toolbarInfo);
                    updateLocation();
                    position(dataInput);
                    setTimeout(function () {
                        if (frame)
                            frame.removeClass('app-hidden');
                        toolbar.removeClass('app-hidden');
                    });
                }
            }

            function updateLocation() {
                var inner = dataInput.find('.app-control-inner'),
                    toolbarInfo = dataInput.data('toolbar'),
                    toolbar = toolbarInfo.bar,
                    frame = toolbarInfo.frame,
                    offset;

                toolbar.insertBefore(inner);
                offset = toolbar.outerHeight();
                if (toolbarInfo.location == 'top') {
                    offset = -offset;
                    if (frame)
                        frame.css({ top: offset, bottom: '' });
                }
                else {
                    toolbar.insertAfter(inner);
                    if (frame)
                        frame.css({ top: '', bottom: -offset });
                    offset = 0;
                }
                toolbar.css('margin-top', offset);
                toolbarInfo.floatin = false;
            }

            function position(dataInput) {
                if (!dataInput)
                    dataInput = dataInputOf(findInput());
                var scrollable = findScrollable(),
                    scrollableOffset = scrollable.offset(),
                    toolbarInfo = dataInput.data('toolbar'),
                    toolbar, toolbarOffset;
                if (toolbarInfo) {
                    toolbar = toolbarInfo.bar;
                    toolbarOffset = toolbar.offset();

                    if (toolbarOffset.top < scrollableOffset.top || toolbarOffset.top + toolbar.outerHeight() > scrollableOffset.top + scrollable.height()) {
                        toolbarInfo.location = toolbarInfo.location == 'bottom' ? 'top' : 'bottom';
                        updateLocation();
                    }
                }
            }

            function remove() {
                toolbar = dataInput.data('toolbar');
                if (toolbar) {
                    toolbar.bar.find('i,.app-has-droparrow').removeData();
                    toolbar.bar.remove();
                    frame = toolbar.frame;
                    if (frame)
                        frame.remove();
                    dataInput.removeData('toolbar');
                }
            }

            if (method == 'create')
                create(dataInput);
            else if (method == 'position')
                position(dataInput);
            else
                remove(dataInput);
        }
    }

    Sys.Application.add_init(function () {
        settings = __settings;
    });
    Sys.Application.add_load(function () {
        mobile._appLoaded = true;
        $.mobile.initializePage();
    });

    Web.DataView.MobileGrid.registerClass('Web.DataView.MobileGrid', Web.DataView.MobileBase);
    Web.DataView.MobileForm.registerClass('Web.DataView.MobileForm', Web.DataView.MobileBase);

})();